
-- // TABLE 1: __RefactorLog
COPY INTO ARES.STG.SRC___RefactorLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar 	-- $1: OperationKey VARCHAR(36) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/__RefactorLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*__RefactorLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK___RefactorLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK___RefactorLog_HIST;
SELECT * FROM STG.WINCHK___RefactorLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 2: _AARCC
COPY INTO ARES.STG.SRC__AARCC_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::number, 	-- $1: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::varchar, 	-- $4: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: FIRSTNAME VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: LASTNAME VARCHAR(8000) NULL
		($8)::int, 	-- $8: CUSTOMER_KEY INT NOT NULL
		($9)::int, 	-- $9: RISREPT_KEY INT NOT NULL
		($10)::boolean, 	-- $10: REJECTED BOOLEAN NULL
		($11)::boolean 	-- $11: PROCESSED BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/_AARCC/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_AARCC_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__AARCC_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__AARCC_HIST;
SELECT * FROM STG.WINCHK__AARCC_HIST;
[STATUS=tbd]
*/

-- // TABLE 3: _ACHBankFor2104PostScript
COPY INTO ARES.STG.SRC__ACHBankFor2104PostScript_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_BANK_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_INTERNET BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: IS_ADASTRA BOOLEAN NOT NULL
		($5)::varchar, 	-- $5: DEBIT_OR_CREDIT VARCHAR(8000) NOT NULL
		($6)::boolean 	-- $6: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_ACHBankFor2104PostScript/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_ACHBankFor2104PostScript_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__ACHBankFor2104PostScript_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__ACHBankFor2104PostScript_HIST;
SELECT * FROM STG.WINCHK__ACHBankFor2104PostScript_HIST;
[STATUS=tbd]
*/

-- // TABLE 4: _achHistoryPresentmentXrefForConvert
COPY INTO ARES.STG.SRC__achHistoryPresentmentXrefForConvert_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_HISTORY_KEY INT NOT NULL
		($2)::int 	-- $2: ACH_PRESENTMENT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_achHistoryPresentmentXrefForConvert/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_achHistoryPresentmentXrefForConvert_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__achHistoryPresentmentXrefForConvert_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__achHistoryPresentmentXrefForConvert_HIST;
SELECT * FROM STG.WINCHK__achHistoryPresentmentXrefForConvert_HIST;
[STATUS=tbd]
*/

-- // TABLE 5: _achHistoryTransDetailVerify
COPY INTO ARES.STG.SRC__achHistoryTransDetailVerify_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_HISTORY_KEY INT NOT NULL
		($2)::int 	-- $2: TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_achHistoryTransDetailVerify/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_achHistoryTransDetailVerify_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__achHistoryTransDetailVerify_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__achHistoryTransDetailVerify_HIST;
SELECT * FROM STG.WINCHK__achHistoryTransDetailVerify_HIST;
[STATUS=tbd]
*/

-- // TABLE 6: _achPendingConvert1905
COPY INTO ARES.STG.SRC__achPendingConvert1905_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PENDING_KEY INT NOT NULL
		($2)::int 	-- $2: ACH_PRESENTMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_achPendingConvert1905/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_achPendingConvert1905_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__achPendingConvert1905_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__achPendingConvert1905_HIST;
SELECT * FROM STG.WINCHK__achPendingConvert1905_HIST;
[STATUS=tbd]
*/

-- // TABLE 7: _AchPresentment1904Convert
COPY INTO ARES.STG.SRC__AchPresentment1904Convert_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PRESENTMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: REFERENCE_KEY INT NULL
		($3)::number, 	-- $3: AMT NUMBER(19,4) NOT NULL
		($4)::int, 	-- $4: COLLECTION_PAYMENT_NUMBER INT NOT NULL
		($5)::int, 	-- $5: FEE_PAYMENT_NUMBER INT NOT NULL
		($6)::varchar, 	-- $6: STATEMENT_ID VARCHAR(8000) NOT NULL
		($7)::int 	-- $7: SCHEDULED_PAYMENT_NUMBER INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_AchPresentment1904Convert/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_AchPresentment1904Convert_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__AchPresentment1904Convert_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__AchPresentment1904Convert_HIST;
SELECT * FROM STG.WINCHK__AchPresentment1904Convert_HIST;
[STATUS=tbd]
*/

-- // TABLE 8: _achProcessingQueueConvert1905
COPY INTO ARES.STG.SRC__achProcessingQueueConvert1905_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PROCESSING_QUEUE_KEY INT NOT NULL
		($2)::int 	-- $2: ACH_PRESENTMENT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_achProcessingQueueConvert1905/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_achProcessingQueueConvert1905_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__achProcessingQueueConvert1905_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__achProcessingQueueConvert1905_HIST;
SELECT * FROM STG.WINCHK__achProcessingQueueConvert1905_HIST;
[STATUS=tbd]
*/

-- // TABLE 9: _achRequestConvert1905
COPY INTO ARES.STG.SRC__achRequestConvert1905_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_REQUEST_KEY INT NOT NULL
		($2)::int 	-- $2: ACH_PRESENTMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_achRequestConvert1905/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_achRequestConvert1905_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__achRequestConvert1905_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__achRequestConvert1905_HIST;
SELECT * FROM STG.WINCHK__achRequestConvert1905_HIST;
[STATUS=tbd]
*/

-- // TABLE 10: _AchUniquePresentment1904Convert
COPY INTO ARES.STG.SRC__AchUniquePresentment1904Convert_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PRESENTMENT_KEY INT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NULL
		($3)::int, 	-- $3: SCHEDULED_PAYMENT_NUMBER INT NULL
		($4)::int 	-- $4: ACH_PRESENTMENT_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_AchUniquePresentment1904Convert/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_AchUniquePresentment1904Convert_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__AchUniquePresentment1904Convert_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__AchUniquePresentment1904Convert_HIST;
SELECT * FROM STG.WINCHK__AchUniquePresentment1904Convert_HIST;
[STATUS=tbd]
*/

-- // TABLE 11: _CH022850StatementFixes
COPY INTO ARES.STG.SRC__CH022850StatementFixes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: PRODUCT_TYPE CHAR(8000) NOT NULL
		($5)::char, 	-- $5: LOAN_TYPE CHAR(8000) NOT NULL
		($6)::date, 	-- $6: NEXT_STATEMENT_DATE DATE NOT NULL
		($7)::date, 	-- $7: LAST_STATEMENT_DATE DATE NULL
		($8)::char, 	-- $8: PAY_CYCLE CHAR(8000) NOT NULL
		($9)::smallint, 	-- $9: PAY_CYCLE_DAY SMALLINT NOT NULL
		to_timestamp_ntz($10), 	-- $10: ADJUSTED_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($11)::number, 	-- $11: LAST_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($12)::date, 	-- $12: LAST_PAYMENT_DATE DATE NULL
		($13)::number, 	-- $13: LAST_CAB_FEE_AMT NUMBER(10,4) NULL
		($14)::date, 	-- $14: LAST_CAB_FEE_DATE DATE NULL
		to_timestamp_ntz($15), 	-- $15: LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($16), 	-- $16: LAST_LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($17), 	-- $17: LAST_LAST_LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($18), 	-- $18: LAST_LAST_LAST_LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		($19)::int, 	-- $19: TRANS_DETAIL_KEY INT NULL
		($20)::int, 	-- $20: LOAN_PAYMENT_KEY INT NULL
		($21)::int, 	-- $21: OPEN_END_LOAN_STMT_KEY INT NULL
		($22)::int, 	-- $22: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NULL
		($23)::date, 	-- $23: NEW_LAST_STATEMENT_DATE DATE NULL
		($24)::date, 	-- $24: NEW_ADJUSTED_DUE_DATE DATE NULL
		($25)::date, 	-- $25: NEW_NEXT_STATEMENT_DATE DATE NULL
		($26)::date 	-- $26: NEW_NEXT_DUE_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CH022850StatementFixes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CH022850StatementFixes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CH022850StatementFixes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CH022850StatementFixes_HIST;
SELECT * FROM STG.WINCHK__CH022850StatementFixes_HIST;
[STATUS=tbd]
*/

-- // TABLE 12: _CH035718_DOCLOST
COPY INTO ARES.STG.SRC__CH035718_DOCLOST_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CH035718_DOCLOST/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CH035718_DOCLOST_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CH035718_DOCLOST_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CH035718_DOCLOST_HIST;
SELECT * FROM STG.WINCHK__CH035718_DOCLOST_HIST;
[STATUS=tbd]
*/

-- // TABLE 13: _CH035718_DWDOCID
COPY INTO ARES.STG.SRC__CH035718_DWDOCID_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CH035718_DWDOCID/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CH035718_DWDOCID_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CH035718_DWDOCID_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CH035718_DWDOCID_HIST;
SELECT * FROM STG.WINCHK__CH035718_DWDOCID_HIST;
[STATUS=tbd]
*/

-- // TABLE 14: _CH039338_PendingReason
COPY INTO ARES.STG.SRC__CH039338_PendingReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PENDING_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: PRIORITY INT NOT NULL
		($3)::boolean, 	-- $3: USER_CAN_ADD BOOLEAN NOT NULL
		($4)::boolean 	-- $4: USER_CAN_RESOLVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CH039338_PendingReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CH039338_PendingReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CH039338_PendingReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CH039338_PendingReason_HIST;
SELECT * FROM STG.WINCHK__CH039338_PendingReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 15: _CH040985_CSV_Data_For_NOOA
COPY INTO ARES.STG.SRC__CH040985_CSV_Data_For_NOOA_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: EMAIL_ADDRESS VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: CUSTOMER_NAME VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: FIRST_NAME VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: LAST_NAME VARCHAR(8000) NULL
		($5)::int, 	-- $5: VISITOR_KEY INT NULL
		($6)::int, 	-- $6: CUSTOMER_KEY INT NULL
		($7)::int, 	-- $7: LOAN_APPLICATION_KEY INT NULL
		($8)::char, 	-- $8: BUSINESS_STATE CHAR(8000) NULL
		($9)::varchar, 	-- $9: PHONE VARCHAR(8000) NULL
		($10)::datetime, 	-- $10: APPLICATION_DATE datetime NULL
		($11)::datetime, 	-- $11: PRIMARY_SCORE_DATE datetime NULL
		($12)::varchar, 	-- $12: REASON_DENIED VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: CREDIT_SCORE VARCHAR(8000) NULL
		($14)::char, 	-- $14: CREDIT_SCORE_RECEIVED CHAR(8000) NULL
		($15)::varchar, 	-- $15: CREDIT_SCORE_VENDOR_NAME VARCHAR(8000) NULL
		($16)::int, 	-- $16: CREDIT_SCORE_BEGIN_RANGE INT NULL
		($17)::int, 	-- $17: CREDIT_SCORE_END_RANGE INT NULL
		($18)::datetime, 	-- $18: NOTICE_DATE datetime NULL
		($19)::varchar, 	-- $19: CONTACT_NAME1 VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: AGENCY_ADDRESS1 VARCHAR(8000) NULL
		($21)::varchar, 	-- $21: AGENCY_CITY1 VARCHAR(8000) NULL
		($22)::char, 	-- $22: AGENCY_STATE1 CHAR(8000) NULL
		($23)::varchar, 	-- $23: AGENCY_ZIP1 VARCHAR(8000) NULL
		($24)::varchar, 	-- $24: AGENCY_PHONE1 VARCHAR(8000) NULL
		($25)::char, 	-- $25: CRA_USED CHAR(8000) NULL
		($26)::varchar, 	-- $26: CONTACT_NAME2 VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: AGENCY_ADDRESS2 VARCHAR(8000) NULL
		($28)::varchar, 	-- $28: AGENCY_CITY2 VARCHAR(8000) NULL
		($29)::char, 	-- $29: AGENCY_STATE2 CHAR(8000) NULL
		($30)::varchar, 	-- $30: AGENCY_ZIP2 VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: AGENCY_PHONE2 VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: CONTACT_NAME3 VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: AGENCY_ADDRESS3 VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: AGENCY_CITY3 VARCHAR(8000) NULL
		($35)::char, 	-- $35: AGENCY_STATE3 CHAR(8000) NULL
		($36)::varchar, 	-- $36: AGENCY_ZIP3 VARCHAR(8000) NULL
		($37)::varchar, 	-- $37: AGENCY_PHONE3 VARCHAR(8000) NULL
		($38)::varchar, 	-- $38: EQUIFAX_REASON1 VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: EQUIFAX_REASON2 VARCHAR(8000) NULL
		($40)::varchar, 	-- $40: EQUIFAX_REASON3 VARCHAR(8000) NULL
		($41)::varchar, 	-- $41: EQUIFAX_REASON4 VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: SRC_REASON1 VARCHAR(8000) NULL
		($43)::varchar, 	-- $43: SRC_REASON2 VARCHAR(8000) NULL
		($44)::varchar, 	-- $44: NON_CRA_CONTACT_NAME1 VARCHAR(8000) NULL
		($45)::varchar, 	-- $45: AGENCY_ADDRESS4 VARCHAR(8000) NULL
		($46)::varchar, 	-- $46: AGENCY_CITY4 VARCHAR(8000) NULL
		($47)::char, 	-- $47: AGENCY_STATE4 CHAR(8000) NULL
		($48)::varchar, 	-- $48: AGENCY_ZIP4 VARCHAR(8000) NULL
		($49)::varchar, 	-- $49: AGENCY_PHONE4 VARCHAR(8000) NULL
		($50)::char 	-- $50: NON_CRA_RESULTS CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CH040985_CSV_Data_For_NOOA/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CH040985_CSV_Data_For_NOOA_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CH040985_CSV_Data_For_NOOA_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CH040985_CSV_Data_For_NOOA_HIST;
SELECT * FROM STG.WINCHK__CH040985_CSV_Data_For_NOOA_HIST;
[STATUS=tbd]
*/

-- // TABLE 16: _CH040985_MissingEquifaxReasons
COPY INTO ARES.STG.SRC__CH040985_MissingEquifaxReasons_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MISSING_EQUIFAX_REASONS_KEY INT NOT NULL
		($2)::int, 	-- $2: AGENCY_DATA_KEY INT NULL
		($3)::smallint, 	-- $3: AGENCY_MASTER_KEY smallint NULL
		($4)::int, 	-- $4: SCORE_SUMMARY_KEY INT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NULL
		($6)::int, 	-- $6: LOAN_APPLICATION_KEY INT NULL
		($7)::varchar, 	-- $7: REASON_CODE VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: REASON VARCHAR(8000) NULL
		($9)::datetime, 	-- $9: DATE_ENTERED datetime NULL
		($10)::int, 	-- $10: CREDIT_SCORE_BEGIN_RANGE INT NULL
		($11)::int, 	-- $11: CREDIT_SCORE_END_RANGE INT NULL
		($12)::int, 	-- $12: CREDIT_SCORE INT NULL
		($13)::varchar, 	-- $13: ADDRESS_CONSUMER_CONTACT_NAME VARCHAR(8000) NULL
		($14)::boolean, 	-- $14: REASON_DESCRIPTIONS_INSERTED BOOLEAN NOT NULL
		($15)::boolean 	-- $15: CSV_DATA_CREATED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CH040985_MissingEquifaxReasons/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CH040985_MissingEquifaxReasons_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CH040985_MissingEquifaxReasons_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CH040985_MissingEquifaxReasons_HIST;
SELECT * FROM STG.WINCHK__CH040985_MissingEquifaxReasons_HIST;
[STATUS=tbd]
*/

-- // TABLE 17: _CollectionsDebtRecall
COPY INTO ARES.STG.SRC__CollectionsDebtRecall_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: RISREPT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_CollectionsDebtRecall/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_CollectionsDebtRecall_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__CollectionsDebtRecall_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__CollectionsDebtRecall_HIST;
SELECT * FROM STG.WINCHK__CollectionsDebtRecall_HIST;
[STATUS=tbd]
*/

-- // TABLE 18: _DsExclude
COPY INTO ARES.STG.SRC__DsExclude_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::int, 	-- $4: RISREPT_KEY INT NOT NULL
		($5)::varchar 	-- $5: REFERENCE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/_DsExclude/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_DsExclude_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__DsExclude_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__DsExclude_HIST;
SELECT * FROM STG.WINCHK__DsExclude_HIST;
[STATUS=tbd]
*/

-- // TABLE 19: _Dup_CustomerIdentificationRecords
COPY INTO ARES.STG.SRC__Dup_CustomerIdentificationRecords_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_IDENTIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NULL
		($3)::int, 	-- $3: IDENTIFICATION_TYPE_KEY INT NULL
		($4)::varchar, 	-- $4: ID_NUMBER VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: ID_SOURCE VARCHAR(8000) NULL
		($6)::char, 	-- $6: CUST_ID_COUNTRY CHAR(8000) NULL
		($7)::char, 	-- $7: CUST_ID_STATE CHAR(8000) NULL
		($8)::date, 	-- $8: EXPIRATION_DATE DATE NULL
		($9)::varchar, 	-- $9: VERIFIED_OTHER VARCHAR(8000) NULL
		($10)::boolean, 	-- $10: IS_ACTIVE BOOLEAN NULL
		($11)::datetime, 	-- $11: DATE_ENTERED datetime NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NULL
		($13)::int 	-- $13: IDENTIFICATION_TYPE_VERIFY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_Dup_CustomerIdentificationRecords/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_Dup_CustomerIdentificationRecords_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__Dup_CustomerIdentificationRecords_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__Dup_CustomerIdentificationRecords_HIST;
SELECT * FROM STG.WINCHK__Dup_CustomerIdentificationRecords_HIST;
[STATUS=tbd]
*/

-- // TABLE 20: _FormLetterOnDemand_200103
COPY INTO ARES.STG.SRC__FormLetterOnDemand_200103_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_ON_DEMAND_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_BATCH_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: PROMPT_DATA_1 VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: PROMPT_DATA_2 VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: PROMPT_DATA_3 VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: PROMPT_DATA_4 VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: PROMPT_DATA_5 VARCHAR(8000) NOT NULL
		($12)::int 	-- $12: CASHED_CHECK_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_FormLetterOnDemand_200103/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_FormLetterOnDemand_200103_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__FormLetterOnDemand_200103_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__FormLetterOnDemand_200103_HIST;
SELECT * FROM STG.WINCHK__FormLetterOnDemand_200103_HIST;
[STATUS=tbd]
*/

-- // TABLE 21: _formLetterOnDemand_Delete_201003
COPY INTO ARES.STG.SRC__formLetterOnDemand_Delete_201003_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: form_letter_on_demand_key INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_formLetterOnDemand_Delete_201003/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_formLetterOnDemand_Delete_201003_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__formLetterOnDemand_Delete_201003_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__formLetterOnDemand_Delete_201003_HIST;
SELECT * FROM STG.WINCHK__formLetterOnDemand_Delete_201003_HIST;
[STATUS=tbd]
*/

-- // TABLE 22: _FormLetterPrinted_200103
COPY INTO ARES.STG.SRC__FormLetterPrinted_200103_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_PRINTED_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_ADDRESS_KEY INT NULL
		($5)::int, 	-- $5: FORM_LETTER_BATCH_KEY INT NOT NULL
		($6)::int, 	-- $6: FORM_LETTER_ON_DEMAND_KEY INT NULL
		($7)::int, 	-- $7: LOAN_KEY INT NULL
		($8)::int, 	-- $8: PROMISE_TO_PAY_DETAIL_KEY INT NULL
		($9)::smallint, 	-- $9: FORM_LETTER_RESULT_FILE_TYPE SMALLINT NOT NULL
		to_timestamp_ntz($10), 	-- $10: VENDOR_DATE_PRINTED TIMESTAMP_LTZ NULL
		($11)::varchar, 	-- $11: VENDOR_JOB_CODE VARCHAR(8000) NULL
		($12)::smallint, 	-- $12: PROCESSING_STATE_KEY SMALLINT NULL
		($13)::int, 	-- $13: CASHED_CHECK_KEY INT NULL
		($14)::int, 	-- $14: DWDOCID INT NULL
		($15)::int, 	-- $15: RISREPT_KEY INT NULL
		($16)::int 	-- $16: DOCUWARE_CABINET_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_FormLetterPrinted_200103/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_FormLetterPrinted_200103_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__FormLetterPrinted_200103_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__FormLetterPrinted_200103_HIST;
SELECT * FROM STG.WINCHK__FormLetterPrinted_200103_HIST;
[STATUS=tbd]
*/

-- // TABLE 23: _FormLetterResult_200103
COPY INTO ARES.STG.SRC__FormLetterResult_200103_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_RESULT_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_PRINTED_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_BATCH_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::int, 	-- $5: CUSTOMER_ADDRESS_KEY INT NULL
		($6)::smallint, 	-- $6: FORM_LETTER_RESULT_FILE_TYPE SMALLINT NOT NULL
		($7)::varchar, 	-- $7: FORM_LETTER_RESULT_ERROR_CODE VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: FORM_LETTER_RESULT_FFWD_CODE CHAR(8000) NOT NULL
		($9)::char, 	-- $9: FORM_LETTER_RESULT_DPV_CODE CHAR(8000) NOT NULL
		($10)::char, 	-- $10: FORM_LETTER_RESULT_RET_CODE CHAR(8000) NOT NULL
		($11)::varchar 	-- $11: MAILING_SVC_JOB_NUM VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_FormLetterResult_200103/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_FormLetterResult_200103_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__FormLetterResult_200103_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__FormLetterResult_200103_HIST;
SELECT * FROM STG.WINCHK__FormLetterResult_200103_HIST;
[STATUS=tbd]
*/

-- // TABLE 24: _IN594077_RIFees
COPY INTO ARES.STG.SRC__IN594077_RIFees_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: loan_key INT NOT NULL
		($2)::number 	-- $2: ORIGINAL_RI_FEE_PER_DEFAULT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_IN594077_RIFees/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_IN594077_RIFees_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__IN594077_RIFees_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__IN594077_RIFees_HIST;
SELECT * FROM STG.WINCHK__IN594077_RIFees_HIST;
[STATUS=tbd]
*/

-- // TABLE 25: _IN600631
COPY INTO ARES.STG.SRC__IN600631_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_IN600631/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_IN600631_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__IN600631_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__IN600631_HIST;
SELECT * FROM STG.WINCHK__IN600631_HIST;
[STATUS=tbd]
*/

-- // TABLE 26: _IN600631Test
COPY INTO ARES.STG.SRC__IN600631Test_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_IN600631Test/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_IN600631Test_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__IN600631Test_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__IN600631Test_HIST;
SELECT * FROM STG.WINCHK__IN600631Test_HIST;
[STATUS=tbd]
*/

-- // TABLE 27: _IssuerBankAccount
COPY INTO ARES.STG.SRC__IssuerBankAccount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ISSUER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_IssuerBankAccount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_IssuerBankAccount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__IssuerBankAccount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__IssuerBankAccount_HIST;
SELECT * FROM STG.WINCHK__IssuerBankAccount_HIST;
[STATUS=tbd]
*/

-- // TABLE 28: _NextStatementFixes
COPY INTO ARES.STG.SRC__NextStatementFixes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: PRODUCT_TYPE CHAR(8000) NOT NULL
		($5)::char, 	-- $5: LOAN_TYPE CHAR(8000) NOT NULL
		($6)::date, 	-- $6: NEXT_STATEMENT_DATE DATE NOT NULL
		($7)::date, 	-- $7: LAST_STATEMENT_DATE DATE NULL
		($8)::char, 	-- $8: PAY_CYCLE CHAR(8000) NOT NULL
		($9)::smallint, 	-- $9: PAY_CYCLE_DAY SMALLINT NOT NULL
		to_timestamp_ntz($10), 	-- $10: ADJUSTED_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($11)::number, 	-- $11: LAST_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($12)::date, 	-- $12: LAST_PAYMENT_DATE DATE NULL
		($13)::number, 	-- $13: LAST_CAB_FEE_AMT NUMBER(10,4) NULL
		($14)::date, 	-- $14: LAST_CAB_FEE_DATE DATE NULL
		to_timestamp_ntz($15), 	-- $15: LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($16), 	-- $16: LAST_LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($17), 	-- $17: LAST_LAST_LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($18), 	-- $18: LAST_LAST_LAST_LAST_STATEMENT_CURR_DUE_DATE TIMESTAMP_LTZ NULL
		($19)::int, 	-- $19: TRANS_DETAIL_KEY INT NULL
		($20)::int, 	-- $20: LOAN_PAYMENT_KEY INT NULL
		($21)::int, 	-- $21: OPEN_END_LOAN_STMT_KEY INT NULL
		($22)::int 	-- $22: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_NextStatementFixes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_NextStatementFixes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__NextStatementFixes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__NextStatementFixes_HIST;
SELECT * FROM STG.WINCHK__NextStatementFixes_HIST;
[STATUS=tbd]
*/

-- // TABLE 29: _OELoansOutOfBalance
COPY INTO ARES.STG.SRC__OELoansOutOfBalance_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::datetime, 	-- $2: LOAN_DATE datetime NOT NULL
		($3)::datetime, 	-- $3: DATE_ADDED datetime NOT NULL
		($4)::datetime 	-- $4: DATE_REMOVED datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/_OELoansOutOfBalance/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_OELoansOutOfBalance_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__OELoansOutOfBalance_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__OELoansOutOfBalance_HIST;
SELECT * FROM STG.WINCHK__OELoansOutOfBalance_HIST;
[STATUS=tbd]
*/

-- // TABLE 30: _RCC2022aaspeedy
COPY INTO ARES.STG.SRC__RCC2022aaspeedy_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: SEND_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PAY_CYCLE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PAY_TO VARCHAR(8000) NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::varchar, 	-- $8: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FIRSTNAME VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: LASTNAME VARCHAR(8000) NULL
		($12)::int, 	-- $12: CUSTOMER_KEY INT NOT NULL
		($13)::int, 	-- $13: RISREPT_KEY INT NOT NULL
		($14)::varchar, 	-- $14: REFERENCE VARCHAR(8000) NULL
		($15)::int, 	-- $15: REJECTED INT NOT NULL
		($16)::int 	-- $16: PROCESSED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RCC2022aaspeedy/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RCC2022aaspeedy_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RCC2022aaspeedy_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RCC2022aaspeedy_HIST;
SELECT * FROM STG.WINCHK__RCC2022aaspeedy_HIST;
[STATUS=tbd]
*/

-- // TABLE 31: _RCC2022AdAstra
COPY INTO ARES.STG.SRC__RCC2022AdAstra_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: SEND_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PAY_CYCLE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PAY_TO VARCHAR(8000) NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::varchar, 	-- $8: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FIRSTNAME VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: LASTNAME VARCHAR(8000) NULL
		($12)::int, 	-- $12: CUSTOMER_KEY INT NOT NULL
		($13)::int, 	-- $13: RISREPT_KEY INT NOT NULL
		($14)::varchar, 	-- $14: REFERENCE VARCHAR(8000) NULL
		($15)::int, 	-- $15: REJECTED INT NOT NULL
		($16)::int 	-- $16: PROCESSED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RCC2022AdAstra/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RCC2022AdAstra_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RCC2022AdAstra_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RCC2022AdAstra_HIST;
SELECT * FROM STG.WINCHK__RCC2022AdAstra_HIST;
[STATUS=tbd]
*/

-- // TABLE 32: _RCC2022AdAstraDryRun
COPY INTO ARES.STG.SRC__RCC2022AdAstraDryRun_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: SEND_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PAY_CYCLE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PAY_TO VARCHAR(8000) NOT NULL
		($5)::numeric, 	-- $5: PAYMENT_AMT NUMERIC NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::varchar, 	-- $8: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FIRSTNAME VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: LASTNAME VARCHAR(8000) NULL
		($12)::int, 	-- $12: CUSTOMER_KEY INT NOT NULL
		($13)::int, 	-- $13: RISREPT_KEY INT NOT NULL
		($14)::varchar, 	-- $14: REFERENCE VARCHAR(8000) NULL
		($15)::int, 	-- $15: REJECTED INT NOT NULL
		($16)::int 	-- $16: PROCESSED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RCC2022AdAstraDryRun/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RCC2022AdAstraDryRun_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RCC2022AdAstraDryRun_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RCC2022AdAstraDryRun_HIST;
SELECT * FROM STG.WINCHK__RCC2022AdAstraDryRun_HIST;
[STATUS=tbd]
*/

-- // TABLE 33: _RCC2022NonAdAstra
COPY INTO ARES.STG.SRC__RCC2022NonAdAstra_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: SEND_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PAY_CYCLE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PAY_TO VARCHAR(8000) NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::varchar, 	-- $8: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FIRSTNAME VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: LASTNAME VARCHAR(8000) NULL
		($12)::int, 	-- $12: CUSTOMER_KEY INT NOT NULL
		($13)::int, 	-- $13: RISREPT_KEY INT NOT NULL
		($14)::varchar, 	-- $14: REFERENCE VARCHAR(8000) NULL
		($15)::int, 	-- $15: REJECTED INT NOT NULL
		($16)::int 	-- $16: PROCESSED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RCC2022NonAdAstra/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RCC2022NonAdAstra_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RCC2022NonAdAstra_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RCC2022NonAdAstra_HIST;
SELECT * FROM STG.WINCHK__RCC2022NonAdAstra_HIST;
[STATUS=tbd]
*/

-- // TABLE 34: _RCC2022NonAdAstraDryRun
COPY INTO ARES.STG.SRC__RCC2022NonAdAstraDryRun_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: SEND_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PAY_CYCLE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PAY_TO VARCHAR(8000) NOT NULL
		($5)::numeric, 	-- $5: PAYMENT_AMT NUMERIC NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::varchar, 	-- $8: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FIRSTNAME VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: LASTNAME VARCHAR(8000) NULL
		($12)::int, 	-- $12: CUSTOMER_KEY INT NOT NULL
		($13)::int, 	-- $13: RISREPT_KEY INT NOT NULL
		($14)::varchar, 	-- $14: REFERENCE VARCHAR(8000) NULL
		($15)::int, 	-- $15: REJECTED INT NOT NULL
		($16)::int 	-- $16: PROCESSED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RCC2022NonAdAstraDryRun/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RCC2022NonAdAstraDryRun_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RCC2022NonAdAstraDryRun_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RCC2022NonAdAstraDryRun_HIST;
SELECT * FROM STG.WINCHK__RCC2022NonAdAstraDryRun_HIST;
[STATUS=tbd]
*/

-- // TABLE 35: _RCC2022srconly
COPY INTO ARES.STG.SRC__RCC2022srconly_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: SEND_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PAY_CYCLE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PAY_TO VARCHAR(8000) NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::varchar, 	-- $8: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FIRSTNAME VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: LASTNAME VARCHAR(8000) NULL
		($12)::int, 	-- $12: CUSTOMER_KEY INT NOT NULL
		($13)::int, 	-- $13: RISREPT_KEY INT NOT NULL
		($14)::varchar, 	-- $14: REFERENCE VARCHAR(8000) NULL
		($15)::int, 	-- $15: REJECTED INT NOT NULL
		($16)::int 	-- $16: PROCESSED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RCC2022srconly/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RCC2022srconly_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RCC2022srconly_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RCC2022srconly_HIST;
SELECT * FROM STG.WINCHK__RCC2022srconly_HIST;
[STATUS=tbd]
*/

-- // TABLE 36: _RISREPTCollectionsDebtRecall
COPY INTO ARES.STG.SRC__RISREPTCollectionsDebtRecall_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        to_timestamp_ntz($1), 	-- $1: DATE TIMESTAMP_LTZ NOT NULL
		($2)::char, 	-- $2: TLR CHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::number, 	-- $4: AMOUNT NUMBER(10,4) NULL
		($5)::number, 	-- $5: SURCHG NUMBER(10,4) NOT NULL
		to_timestamp_ntz($6), 	-- $6: FOLLOWUP TIMESTAMP_LTZ NULL
		($7)::int, 	-- $7: CUSTOMER_KEY INT NOT NULL
		($8)::int, 	-- $8: ISSUER_KEY INT NOT NULL
		to_timestamp_ntz($9), 	-- $9: MANUAL_ACH_DATE TIMESTAMP_LTZ NULL
		($10)::char, 	-- $10: MANUAL_TELLER CHAR(8000) NULL
		($11)::int, 	-- $11: RISREPT_KEY INT NOT NULL
		($12)::int, 	-- $12: LOAN_KEY INT NULL
		($13)::number, 	-- $13: RI_BALANCE NUMBER(10,4) NOT NULL
		($14)::smallint, 	-- $14: PRA SMALLINT NOT NULL
		($15)::int, 	-- $15: ris_type_id INT NOT NULL
		($16)::int, 	-- $16: Ris_Audit_ID INT NULL
		($17)::boolean, 	-- $17: STOP_PAYMENT BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: reversed BOOLEAN NOT NULL
		to_timestamp_ntz($19), 	-- $19: reversed_date TIMESTAMP_LTZ NULL
		($20)::int, 	-- $20: CASHED_CHECK_KEY INT NULL
		($21)::int, 	-- $21: DOS_REFNO INT NULL
		($22)::varchar, 	-- $22: DOS_MIGRATED_ID VARCHAR(8000) NULL
		($23)::number, 	-- $23: MANUAL_ACH_AMOUNT NUMBER(10,4) NULL
		($24)::int, 	-- $24: MANUAL_ACH_PTP INT NULL
		to_timestamp_ntz($25), 	-- $25: LAST_CALL_DATE TIMESTAMP_LTZ NULL
		($26)::smallint, 	-- $26: LAST_CALL_HOST_CODE smallint NULL
		($27)::varchar, 	-- $27: REFERENCE VARCHAR(8000) NULL
		($28)::smallint, 	-- $28: RISK_ASSESSMENT SMALLINT NOT NULL
		($29)::int, 	-- $29: COLLECTION_AGENCY_KEY INT NOT NULL
		($30)::int, 	-- $30: ASSIGNMENT_NUMBER INT NOT NULL
		($31)::char, 	-- $31: CR_TELLER CHAR(8000) NOT NULL
		($32)::int, 	-- $32: REASON_FOR_ARREARS_KEY INT NOT NULL
		to_timestamp_ntz($33), 	-- $33: LAST_DCARD_ATTEMPT_DATE TIMESTAMP_LTZ NULL
		($34)::int, 	-- $34: RI_URGENT_NOTE_KEY INT NOT NULL
		($35)::boolean, 	-- $35: KEEP_WITH_AGENCY BOOLEAN NOT NULL
		($36)::date, 	-- $36: AD_ASTRA_ASSIGNED_DATE DATE NULL
		($37)::smallint 	-- $37: COLLECTIONS_RISK_SCORE smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_RISREPTCollectionsDebtRecall/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_RISREPTCollectionsDebtRecall_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__RISREPTCollectionsDebtRecall_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__RISREPTCollectionsDebtRecall_HIST;
SELECT * FROM STG.WINCHK__RISREPTCollectionsDebtRecall_HIST;
[STATUS=tbd]
*/

-- // TABLE 37: _ScheduledPrimaryCardManualFixes
COPY INTO ARES.STG.SRC__ScheduledPrimaryCardManualFixes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: DOCUWARE_CABINET_KEY INT NOT NULL
		($4)::int, 	-- $4: DOCUWARE_ID_KEY INT NOT NULL
		($5)::int, 	-- $5: DWDOCID INT NOT NULL
		($6)::datetime, 	-- $6: ADJUSTED_DUE_DATE datetime NOT NULL
		($7)::smallint, 	-- $7: SELECTED_SCHED_PRIMARY_CARD_LAST_FOUR smallint NULL
		($8)::boolean, 	-- $8: IS_MANUALLY_PROCESSED BOOLEAN NOT NULL
		($9)::boolean 	-- $9: IS_SYSTEM_PROCESSED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_ScheduledPrimaryCardManualFixes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_ScheduledPrimaryCardManualFixes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__ScheduledPrimaryCardManualFixes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__ScheduledPrimaryCardManualFixes_HIST;
SELECT * FROM STG.WINCHK__ScheduledPrimaryCardManualFixes_HIST;
[STATUS=tbd]
*/

-- // TABLE 38: _tmpACHProcessingQueue
COPY INTO ARES.STG.SRC__tmpACHProcessingQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: DeleteText VARCHAR(8000) NULL
		($2)::int, 	-- $2: ACH_PROCESSING_QUEUE_KEY INT NOT NULL
		($3)::int, 	-- $3: LOCATION INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::number, 	-- $5: ACH_AMOUNT NUMBER(19,4) NOT NULL
		($6)::date, 	-- $6: DUE_DATE DATE NOT NULL
		($7)::smallint, 	-- $7: ACH_ATTEMPT SMALLINT NOT NULL
		to_timestamp_ntz($8), 	-- $8: MANUAL_SEND_DATE TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: MANUAL_TELLER CHAR(8000) NULL
		($10)::varchar, 	-- $10: ABA_NO VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: BANK_NO VARCHAR(8000) NOT NULL
		($12)::boolean, 	-- $12: IS_SCHEDULED_PAYMENT BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: IS_AD_ASTRA BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: IS_ACH_PAID BOOLEAN NOT NULL
		($15)::int, 	-- $15: JOB_ID INT NULL
		($16)::smallint, 	-- $16: ACH_REASON_CODE smallint NULL
		($17)::int, 	-- $17: OPTPLUS_CARD_DETAIL_KEY INT NULL
		($18)::varchar, 	-- $18: STATEMENT_ID VARCHAR(8000) NULL
		($19)::number, 	-- $19: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($23)::int, 	-- $23: ACH_BANK_KEY INT NOT NULL
		($24)::varchar, 	-- $24: GRAD_NUMBER VARCHAR(8000) NULL
		($25)::int, 	-- $25: ACH_PROCESSING_TYPE_KEY INT NOT NULL
		($26)::int, 	-- $26: ACH_SENT_PARENT_KEY INT NULL
		($27)::int, 	-- $27: RUN_MASTER_KEY INT NOT NULL
		($28)::int, 	-- $28: SCHED_ROLLOVER_KEY INT NULL
		($29)::int, 	-- $29: ACH_PRESENTMENT_KEY INT NULL
		($30)::number, 	-- $30: LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($31)::boolean, 	-- $31: IS_RETRY_PAYMENT BOOLEAN NULL
		($32)::boolean, 	-- $32: IS_RCC_PAYMENT BOOLEAN NULL
		($33)::number 	-- $33: INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_tmpACHProcessingQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_tmpACHProcessingQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__tmpACHProcessingQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__tmpACHProcessingQueue_HIST;
SELECT * FROM STG.WINCHK__tmpACHProcessingQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 39: _tmpFundingMethod
COPY INTO ARES.STG.SRC__tmpFundingMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: FUNDING_METHOD_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::smallint 	-- $3: NEW_CUSTOMER_HOLD_MINUTES smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_tmpFundingMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_tmpFundingMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__tmpFundingMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__tmpFundingMethod_HIST;
SELECT * FROM STG.WINCHK__tmpFundingMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 40: _tmpLocationFundingMethod
COPY INTO ARES.STG.SRC__tmpLocationFundingMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::smallint, 	-- $2: APPLY_ORDER SMALLINT NOT NULL
		($3)::smallint 	-- $3: FUNDING_METHOD_KEY smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_tmpLocationFundingMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_tmpLocationFundingMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__tmpLocationFundingMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__tmpLocationFundingMethod_HIST;
SELECT * FROM STG.WINCHK__tmpLocationFundingMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 41: _VirginiaDateFixes
COPY INTO ARES.STG.SRC__VirginiaDateFixes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_UPDATED BOOLEAN NOT NULL
		($3)::datetime, 	-- $3: DATE_PROCESSED datetime NOT NULL
		($4)::char, 	-- $4: CUSTOMER_PAY_CYCLE CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: CUSTOMER_PAY_CYCLE_DAY SMALLINT NOT NULL
		($6)::smallint, 	-- $6: CUSTOMER_PAY_CYCLE_1ST SMALLINT NOT NULL
		($7)::smallint, 	-- $7: CUSTOMER_PAY_CYCLE_2ND SMALLINT NOT NULL
		($8)::smallint, 	-- $8: OPEN_END_LOAN_CYCLE_1ST SMALLINT NOT NULL
		($9)::date, 	-- $9: ORIG_DUE_DATE DATE NOT NULL
		($10)::date, 	-- $10: NEXT_STATEMENT_DATE DATE NOT NULL
		($11)::date, 	-- $11: NEXT_DUE_DATE DATE NOT NULL
		($12)::date, 	-- $12: BIWEEK_BASE_DATE DATE NULL
		($13)::date, 	-- $13: ORIG_DUE_DATE_SHOULD_BE DATE NULL
		($14)::date, 	-- $14: NEXT_STATEMENT_DATE_SHOULD_BE DATE NULL
		($15)::date, 	-- $15: NEXT_DUE_DATE_SHOULD_BE DATE NULL
		($16)::date, 	-- $16: BIWEEK_BASE_DATE_SHOULD_BE DATE NULL
		($17)::smallint 	-- $17: OPEN_END_LOAN_CYCLE_1ST_SHOULD_BE SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/_VirginiaDateFixes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*_VirginiaDateFixes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK__VirginiaDateFixes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK__VirginiaDateFixes_HIST;
SELECT * FROM STG.WINCHK__VirginiaDateFixes_HIST;
[STATUS=tbd]
*/

-- // TABLE 42: AACbExportDataArchive
COPY INTO ARES.STG.SRC_AACbExportDataArchive_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ID INT NOT NULL
		($2)::int, 	-- $2: AccountType INT NOT NULL
		($3)::varchar, 	-- $3: AccountStatus VARCHAR(8000) NULL
		($4)::char, 	-- $4: DateOfLoss CHAR(8000) NULL
		($5)::char, 	-- $5: InputDate CHAR(8000) NULL
		($6)::varchar, 	-- $6: Creditor VARCHAR(8000) NULL
		($7)::int, 	-- $7: CreditorClassification INT NOT NULL
		($8)::int, 	-- $8: ECOA INT NOT NULL
		($9)::varchar, 	-- $9: PortfolioType VARCHAR(8000) NOT NULL
		($10)::number, 	-- $10: AmountPastDue NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: AmountDue NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: HighestCredit NUMBER(19,4) NULL
		($13)::char, 	-- $13: LastPaymentDate CHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: TermsDuration VARCHAR(8000) NOT NULL
		($15)::char, 	-- $15: ComplianceConditionCode CHAR(8000) NULL
		($16)::varchar, 	-- $16: FirstName VARCHAR(8000) NULL
		($17)::varchar, 	-- $17: MiddleName VARCHAR(8000) NULL
		($18)::varchar, 	-- $18: LastName VARCHAR(8000) NULL
		($19)::char, 	-- $19: GenerationCode CHAR(8000) NULL
		($20)::varchar, 	-- $20: Street1 VARCHAR(8000) NULL
		($21)::int, 	-- $21: Street2 INT NULL
		($22)::varchar, 	-- $22: City VARCHAR(8000) NOT NULL
		($23)::char, 	-- $23: State CHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: Zip VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: Country VARCHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: Telephone VARCHAR(8000) NOT NULL
		($27)::varchar, 	-- $27: SSN VARCHAR(8000) NULL
		($28)::char, 	-- $28: DOB CHAR(8000) NULL
		($29)::varchar, 	-- $29: DateClosed VARCHAR(8000) NULL
		($30)::datetime, 	-- $30: EXPORT_DATE datetime NOT NULL
		($31)::varchar 	-- $31: CII VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/AACbExportDataArchive/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AACbExportDataArchive_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AACbExportDataArchive_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AACbExportDataArchive_HIST;
SELECT * FROM STG.WINCHK_AACbExportDataArchive_HIST;
[STATUS=tbd]
*/

-- // TABLE 43: ABLFacility
COPY INTO ARES.STG.SRC_ABLFacility_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ABL_FACILITY_KEY INT NOT NULL
		($2)::int, 	-- $2: COMPANY_BANK_ACCOUNT_KEY INT NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ABLFacility/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ABLFacility_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ABLFacility_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ABLFacility_HIST;
SELECT * FROM STG.WINCHK_ABLFacility_HIST;
[STATUS=tbd]
*/

-- // TABLE 44: AccumConfig
COPY INTO ARES.STG.SRC_AccumConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACCUM_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SHORT_DESCR VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LONG_DESCR VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: TASK_ACTION_RESULT_KEYS VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: AGENT_ACTION_KEYS VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: RESULT1_KEYS VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: RESULT2_KEYS VARCHAR(8000) NULL
		($8)::number, 	-- $8: ACCUM_COST NUMBER(10,4) NOT NULL
		($9)::boolean, 	-- $9: SHOW_IN_RI BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: EXCLUDE_RESULTS VARCHAR(8000) NULL
		to_timestamp_ntz($11), 	-- $11: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12) 	-- $12: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AccumConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AccumConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AccumConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AccumConfig_HIST;
SELECT * FROM STG.WINCHK_AccumConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 45: AccumConfigHistory
COPY INTO ARES.STG.SRC_AccumConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACCUM_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SHORT_DESCR VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LONG_DESCR VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: TASK_ACTION_RESULT_KEYS VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: AGENT_ACTION_KEYS VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: RESULT1_KEYS VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: RESULT2_KEYS VARCHAR(8000) NULL
		($8)::number, 	-- $8: ACCUM_COST NUMBER(10,4) NOT NULL
		($9)::boolean, 	-- $9: SHOW_IN_RI BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: EXCLUDE_RESULTS VARCHAR(8000) NULL
		to_timestamp_ntz($11), 	-- $11: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12) 	-- $12: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AccumConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AccumConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AccumConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AccumConfigHistory_HIST;
SELECT * FROM STG.WINCHK_AccumConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 46: ACH_History
COPY INTO ARES.STG.SRC_ACH_History_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		($5)::number, 	-- $5: ACH_AMOUNT NUMBER(19,4) NULL
		($6)::smallint, 	-- $6: ACH_ATTEMPT SMALLINT NOT NULL
		to_timestamp_ntz($7), 	-- $7: PROJ_SEND_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8), 	-- $8: MANUAL_SEND_DATE TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: MANUAL_TELLER CHAR(8000) NULL
		($10)::int, 	-- $10: ACH_SENT_KEY INT NOT NULL
		($11)::int, 	-- $11: ACH_RECV_KEY INT NULL
		($12)::char, 	-- $12: ACH_RESULT_CODE CHAR(8000) NULL
		($13)::datetime, 	-- $13: DATE_ENTERED datetime NOT NULL
		($14)::varchar, 	-- $14: BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($16)::int, 	-- $16: jobid INT NOT NULL
		($17)::int, 	-- $17: SEND_LOAN_PAYMENT_KEY INT NULL
		($18)::int, 	-- $18: RECV_LOAN_PAYMENT_KEY INT NULL
		($19)::boolean, 	-- $19: IS_AD_ASTRA BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: IS_ACH_PAID BOOLEAN NOT NULL
		($21)::int, 	-- $21: REFUND_LOAN_PAYMENT_KEY INT NULL
		($22)::smallint, 	-- $22: ACH_REASON_CODE smallint NULL
		($23)::varchar, 	-- $23: STATEMENT_ID VARCHAR(8000) NULL
		($24)::number, 	-- $24: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($28)::boolean, 	-- $28: SCHED_PAYMENT BOOLEAN NOT NULL
		($29)::boolean, 	-- $29: IS_CREDIT BOOLEAN NOT NULL
		($30)::number, 	-- $30: LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($31)::boolean, 	-- $31: IS_RCC_PAYMENT BOOLEAN NULL
		($32)::number, 	-- $32: INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
		($33)::date, 	-- $33: CREDIT_START_DATE DATE NULL
		($34)::int 	-- $34: QUEUE_LOAN_PAYMENT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACH_History/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACH_History_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACH_History_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACH_History_HIST;
SELECT * FROM STG.WINCHK_ACH_History_HIST;
[STATUS=tbd]
*/

-- // TABLE 47: ACH_Recv
COPY INTO ARES.STG.SRC_ACH_Recv_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_RECV_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FILE_NAME_RECV VARCHAR(8000) NOT NULL
		($3)::datetime, 	-- $3: DATE_RECV datetime NOT NULL
		($4)::int, 	-- $4: PAID_COUNT INT NOT NULL
		($5)::number, 	-- $5: PAID_TOTAL NUMBER(19,4) NOT NULL
		($6)::int, 	-- $6: UNPAID_COUNT INT NOT NULL
		($7)::number, 	-- $7: UNPAID_TOTAL NUMBER(19,4) NOT NULL
		to_timestamp_ntz($8) 	-- $8: BTIME TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACH_Recv/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACH_Recv_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACH_Recv_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACH_Recv_HIST;
SELECT * FROM STG.WINCHK_ACH_Recv_HIST;
[STATUS=tbd]
*/

-- // TABLE 48: ach_recv_fix
COPY INTO ARES.STG.SRC_ach_recv_fix_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: loan_key INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ach_recv_fix/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ach_recv_fix_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ach_recv_fix_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ach_recv_fix_HIST;
SELECT * FROM STG.WINCHK_ach_recv_fix_HIST;
[STATUS=tbd]
*/

-- // TABLE 49: ACH_ReturnCode
COPY INTO ARES.STG.SRC_ACH_ReturnCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_RETCODE_KEY INT NOT NULL
		($2)::char, 	-- $2: ACH_RETCODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: RETCODE_SHORT VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: RETCODE_LONG VARCHAR(8000) NULL
		($5)::int, 	-- $5: RIS_Type_Id INT NOT NULL
		($6)::boolean, 	-- $6: CHARGE_NSF_FEE BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: INCREMENT_NSF_COUNT BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: RESET_NSF_COUNT BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: SET_ACH_BLOCK BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: SET_SYSTEM_BLOCK BOOLEAN NOT NULL
		($11)::int, 	-- $11: BANK_STATUS_KEY INT NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13) 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACH_ReturnCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACH_ReturnCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACH_ReturnCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACH_ReturnCode_HIST;
SELECT * FROM STG.WINCHK_ACH_ReturnCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 50: ACH_ReturnCodeHistory
COPY INTO ARES.STG.SRC_ACH_ReturnCodeHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_RETCODE_KEY INT NOT NULL
		($2)::char, 	-- $2: ACH_RETCODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: RETCODE_SHORT VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: RETCODE_LONG VARCHAR(8000) NULL
		($5)::int, 	-- $5: RIS_Type_Id INT NOT NULL
		($6)::boolean, 	-- $6: CHARGE_NSF_FEE BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: INCREMENT_NSF_COUNT BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: RESET_NSF_COUNT BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: SET_ACH_BLOCK BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: SET_SYSTEM_BLOCK BOOLEAN NOT NULL
		($11)::int, 	-- $11: BANK_STATUS_KEY INT NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13) 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACH_ReturnCodeHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACH_ReturnCodeHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACH_ReturnCodeHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACH_ReturnCodeHistory_HIST;
SELECT * FROM STG.WINCHK_ACH_ReturnCodeHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 51: ACH_Sent
COPY INTO ARES.STG.SRC_ACH_Sent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_SENT_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NULL
		($3)::varchar, 	-- $3: FILE_NAME_SENT VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: FILE_NAME_UPDATED VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: ITEM_COUNT INT NOT NULL
		($6)::number, 	-- $6: ITEM_TOTAL NUMBER(19,4) NOT NULL
		($7)::datetime, 	-- $7: DATE_SENT datetime NOT NULL
		to_timestamp_ntz($8), 	-- $8: EXPECTED_RESULTS TIMESTAMP_LTZ NOT NULL
		($9)::int, 	-- $9: ACH_RECV_KEY INT NULL
		($10)::boolean, 	-- $10: SCHEDULED_PAYMENTS BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_AD_ASTRA BOOLEAN NULL
		($12)::char, 	-- $12: FILE_TYPE CHAR(8000) NOT NULL
		($13)::boolean, 	-- $13: IS_DAY_AFTER_DUE_SENT BOOLEAN NULL
		($14)::int, 	-- $14: ACH_SENT_PARENT_KEY INT NULL
		($15)::int 	-- $15: TRANSACTION_PROCESSOR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACH_Sent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACH_Sent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACH_Sent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACH_Sent_HIST;
SELECT * FROM STG.WINCHK_ACH_Sent_HIST;
[STATUS=tbd]
*/

-- // TABLE 52: ACHGroup
COPY INTO ARES.STG.SRC_ACHGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BM_DR_ACH_NUMBER VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: BM_CR_ACH_NUMBER VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: BM_COLL_DR_ACH_NUMBER VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: IL_DR_ACH_NUMBER VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: IL_CR_ACH_NUMBER VARCHAR(8000) NOT NULL
		($7)::varchar 	-- $7: IL_COLL_DR_ACH_NUMBER VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHGroup_HIST;
SELECT * FROM STG.WINCHK_ACHGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 53: ACHInterestCreditOverride
COPY INTO ARES.STG.SRC_ACHInterestCreditOverride_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_INTEREST_CREDIT_OVERRIDE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::date, 	-- $5: CREDIT_START_DATE DATE NOT NULL
		($6)::int, 	-- $6: SCHEDULED_PAYMENT_NUMBER INT NOT NULL
		($7)::number, 	-- $7: PAID_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($13)::number 	-- $13: INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHInterestCreditOverride/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHInterestCreditOverride_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHInterestCreditOverride_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHInterestCreditOverride_HIST;
SELECT * FROM STG.WINCHK_ACHInterestCreditOverride_HIST;
[STATUS=tbd]
*/

-- // TABLE 54: ACHLoanPaymentRefund
COPY INTO ARES.STG.SRC_ACHLoanPaymentRefund_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_LOAN_PAYMENT_REFUND_KEY INT NOT NULL
		($2)::int, 	-- $2: ACH_QUEUE_KEY INT NULL
		($3)::int, 	-- $3: ACH_PROCESSING_QUEUE_KEY INT NULL
		($4)::int, 	-- $4: LOAN_PAYMENT_KEY INT NOT NULL
		($5)::int, 	-- $5: ACH_LOAN_PAYMENT_REFUND_STATUS_KEY INT NOT NULL
		($6)::varchar 	-- $6: REQUEST_NOTE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHLoanPaymentRefund/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHLoanPaymentRefund_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHLoanPaymentRefund_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHLoanPaymentRefund_HIST;
SELECT * FROM STG.WINCHK_ACHLoanPaymentRefund_HIST;
[STATUS=tbd]
*/

-- // TABLE 55: ACHLoanPaymentRefundStatus
COPY INTO ARES.STG.SRC_ACHLoanPaymentRefundStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_LOAN_PAYMENT_REFUND_STATUS_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHLoanPaymentRefundStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHLoanPaymentRefundStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHLoanPaymentRefundStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHLoanPaymentRefundStatus_HIST;
SELECT * FROM STG.WINCHK_ACHLoanPaymentRefundStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 56: ACHOpenEndLoanStreamInterestCredit
COPY INTO ARES.STG.SRC_ACHOpenEndLoanStreamInterestCredit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_OPEN_END_LOAN_STREAM_INTEREST_CREDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: ACH_HISTORY_KEY INT NOT NULL
		($3)::int, 	-- $3: OPEN_END_LOAN_STREAM_KEY INT NOT NULL
		($4)::number, 	-- $4: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($5)::number 	-- $5: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHOpenEndLoanStreamInterestCredit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHOpenEndLoanStreamInterestCredit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHOpenEndLoanStreamInterestCredit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHOpenEndLoanStreamInterestCredit_HIST;
SELECT * FROM STG.WINCHK_ACHOpenEndLoanStreamInterestCredit_HIST;
[STATUS=tbd]
*/

-- // TABLE 57: ACHPending
COPY INTO ARES.STG.SRC_ACHPending_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PENDING_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: LOCATION INT NOT NULL
		($5)::int, 	-- $5: RISREPT_KEY INT NOT NULL
		($6)::number, 	-- $6: RI_BALANCE NUMBER(19,4) NOT NULL
		($7)::number, 	-- $7: ACH_AMOUNT NUMBER(19,4) NOT NULL
		($8)::int, 	-- $8: LOAN_KEY INT NULL
		($9)::int, 	-- $9: CASHED_CHECK_KEY INT NULL
		($10)::int, 	-- $10: PTP_DETAIL_KEY INT NULL
		to_timestamp_ntz($11), 	-- $11: PROJ_SEND_DATE TIMESTAMP_LTZ NOT NULL
		($12)::int, 	-- $12: PROCESS_CONFIG_INSTANCE_KEY INT NULL
		($13)::boolean, 	-- $13: IS_MARKED_ACH_BLOCK BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: IS_MARKED_STOP_PAYMENT BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: IS_DIRECT_DEPOSIT BOOLEAN NOT NULL
		($16)::boolean, 	-- $16: IS_PAY_INFO_COMPLETE BOOLEAN NOT NULL
		($17)::int, 	-- $17: RI_AGE INT NULL
		($18)::varchar, 	-- $18: AUDIT_CODE VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($21)::boolean, 	-- $21: IS_MANUAL_ACH BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: HAS_CC BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: IS_AD_ASTRA BOOLEAN NOT NULL
		($24)::date, 	-- $24: CALC_PAY_DATE DATE NULL
		($25)::varchar, 	-- $25: STATEMENT_ID VARCHAR(8000) NOT NULL
		($26)::int, 	-- $26: BP_STEP_DATA_KEY INT NOT NULL
		($27)::boolean, 	-- $27: IS_RETRY_PAYMENT BOOLEAN NULL
		($28)::int, 	-- $28: PRESENTMENT_REQUEST_KEY INT NOT NULL
		($29)::int 	-- $29: TRANSACTION_PROCESSOR_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHPending/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHPending_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHPending_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHPending_HIST;
SELECT * FROM STG.WINCHK_ACHPending_HIST;
[STATUS=tbd]
*/

-- // TABLE 58: ACHProcessingQueue
COPY INTO ARES.STG.SRC_ACHProcessingQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PROCESSING_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOCATION INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::number, 	-- $4: ACH_AMOUNT NUMBER(19,4) NOT NULL
		($5)::date, 	-- $5: DUE_DATE DATE NOT NULL
		($6)::smallint, 	-- $6: ACH_ATTEMPT SMALLINT NOT NULL
		to_timestamp_ntz($7), 	-- $7: MANUAL_SEND_DATE TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: MANUAL_TELLER CHAR(8000) NULL
		($9)::varchar, 	-- $9: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($11)::boolean, 	-- $11: IS_SCHEDULED_PAYMENT BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: IS_AD_ASTRA BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: IS_ACH_PAID BOOLEAN NOT NULL
		($14)::int, 	-- $14: JOB_ID INT NULL
		($15)::smallint, 	-- $15: ACH_REASON_CODE smallint NULL
		($16)::varchar, 	-- $16: STATEMENT_ID VARCHAR(8000) NULL
		($17)::number, 	-- $17: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($21)::varchar, 	-- $21: GRAD_NUMBER VARCHAR(8000) NULL
		($22)::int, 	-- $22: ACH_PROCESSING_TYPE_KEY INT NOT NULL
		($23)::int, 	-- $23: ACH_SENT_PARENT_KEY INT NULL
		($24)::int, 	-- $24: RUN_MASTER_KEY INT NOT NULL
		($25)::int, 	-- $25: SCHED_ROLLOVER_KEY INT NULL
		($26)::number, 	-- $26: LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($27)::boolean, 	-- $27: IS_RETRY_PAYMENT BOOLEAN NULL
		($28)::boolean, 	-- $28: IS_RCC_PAYMENT BOOLEAN NULL
		($29)::number, 	-- $29: INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
		($30)::int, 	-- $30: PRESENTMENT_REQUEST_KEY INT NULL
		($31)::date, 	-- $31: CREDIT_START_DATE DATE NULL
		($32)::int, 	-- $32: QUEUE_LOAN_PAYMENT_KEY INT NULL
		($33)::boolean, 	-- $33: IS_DAY_AFTER_DUE_PAYMENT BOOLEAN NOT NULL
		($34)::int 	-- $34: TRANSACTION_PROCESSOR_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHProcessingQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHProcessingQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHProcessingQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHProcessingQueue_HIST;
SELECT * FROM STG.WINCHK_ACHProcessingQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 59: ACHProcessingType
COPY INTO ARES.STG.SRC_ACHProcessingType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PROCESSING_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ACH_PROCESSING_TYPE_DESC VARCHAR(8000) NOT NULL
		($3)::char 	-- $3: FILE_TYPE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHProcessingType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHProcessingType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHProcessingType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHProcessingType_HIST;
SELECT * FROM STG.WINCHK_ACHProcessingType_HIST;
[STATUS=tbd]
*/

-- // TABLE 60: ACHQueue
COPY INTO ARES.STG.SRC_ACHQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_QUEUE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::date, 	-- $3: DATE_TO_SEND DATE NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NOT NULL
		($6)::number, 	-- $6: AMOUNT NUMBER(19,4) NOT NULL
		($7)::varchar, 	-- $7: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($9)::smallint, 	-- $9: ACH_REASON_CODE smallint NOT NULL
		($10)::boolean, 	-- $10: IS_CREDIT BOOLEAN NOT NULL
		($11)::number, 	-- $11: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($12)::int, 	-- $12: LOAN_PAYMENT_KEY INT NULL
		($13)::smallint 	-- $13: LOCATION smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHQueue_HIST;
SELECT * FROM STG.WINCHK_ACHQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 61: ACHReason
COPY INTO ARES.STG.SRC_ACHReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CODE smallint NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: TYPE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHReason_HIST;
SELECT * FROM STG.WINCHK_ACHReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 62: AchRecvItem
COPY INTO ARES.STG.SRC_AchRecvItem_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_RECV_ITEM_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: ACH_HISTORY_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_PAYMENT_KEY INT NOT NULL
		($5)::int, 	-- $5: ACH_RECV_KEY INT NULL
		($6)::int 	-- $6: ACH_RETURN_CODE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AchRecvItem/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AchRecvItem_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AchRecvItem_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AchRecvItem_HIST;
SELECT * FROM STG.WINCHK_AchRecvItem_HIST;
[STATUS=tbd]
*/

-- // TABLE 63: ACHRequest
COPY INTO ARES.STG.SRC_ACHRequest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_REQUEST_KEY INT NOT NULL
		($2)::int, 	-- $2: RISREPT_KEY INT NOT NULL
		($3)::date, 	-- $3: SEND_DATE DATE NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::int 	-- $6: PRESENTMENT_REQUEST_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHRequest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHRequest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHRequest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHRequest_HIST;
SELECT * FROM STG.WINCHK_ACHRequest_HIST;
[STATUS=tbd]
*/

-- // TABLE 64: ACHSentParent
COPY INTO ARES.STG.SRC_ACHSentParent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_SENT_PARENT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ACH_FILE_NAME_SENT VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: ACH_FILE_NAME_ACK VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: ACH_FILE_REC_CNT INT NOT NULL
		($5)::number, 	-- $5: ACH_FILE_TOTAL_AMT NUMBER(19,4) NOT NULL
		($6)::datetime, 	-- $6: ACH_SENT_DATE datetime NOT NULL
		($7)::char, 	-- $7: FILE_TYPE CHAR(8000) NOT NULL
		($8)::boolean, 	-- $8: SCHEDULED_PAYMENTS BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_AD_ASTRA BOOLEAN NULL
		($10)::boolean, 	-- $10: IS_DAY_AFTER_DUE_SENT BOOLEAN NULL
		($11)::datetime 	-- $11: EXPECTED_RESULTS datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/ACHSentParent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ACHSentParent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ACHSentParent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ACHSentParent_HIST;
SELECT * FROM STG.WINCHK_ACHSentParent_HIST;
[STATUS=tbd]
*/

-- // TABLE 65: AchUseLegacyScheduledAchCollectionsAmtLogic
COPY INTO ARES.STG.SRC_AchUseLegacyScheduledAchCollectionsAmtLogic_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int 	-- $1: ACH_HISTORY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AchUseLegacyScheduledAchCollectionsAmtLogic/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AchUseLegacyScheduledAchCollectionsAmtLogic_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AchUseLegacyScheduledAchCollectionsAmtLogic_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AchUseLegacyScheduledAchCollectionsAmtLogic_HIST;
SELECT * FROM STG.WINCHK_AchUseLegacyScheduledAchCollectionsAmtLogic_HIST;
[STATUS=tbd]
*/

-- // TABLE 66: AdAstraWebInventory
COPY INTO ARES.STG.SRC_AdAstraWebInventory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RISREPT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: REFERENCE VARCHAR(8000) NULL
		($3)::char, 	-- $3: SSN CHAR(8000) NULL
		($4)::date, 	-- $4: DOB DATE NULL
		($5)::varchar, 	-- $5: FIRSTNAME VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: LASTNAME VARCHAR(8000) NULL
		($7)::number, 	-- $7: RI_BALANCE NUMBER(10,4) NOT NULL
		($8)::boolean, 	-- $8: IS_ELIGIBLE BOOLEAN NOT NULL
		($9)::int 	-- $9: RIS_AUDIT_ID INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AdAstraWebInventory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AdAstraWebInventory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AdAstraWebInventory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AdAstraWebInventory_HIST;
SELECT * FROM STG.WINCHK_AdAstraWebInventory_HIST;
[STATUS=tbd]
*/

-- // TABLE 67: AddressFormat
COPY INTO ARES.STG.SRC_AddressFormat_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: AddressFormatKey CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AddressFormat/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AddressFormat_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AddressFormat_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AddressFormat_HIST;
SELECT * FROM STG.WINCHK_AddressFormat_HIST;
[STATUS=tbd]
*/

-- // TABLE 68: AddressRemovedReason
COPY INTO ARES.STG.SRC_AddressRemovedReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ADDRESS_REMOVED_REASON_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AddressRemovedReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AddressRemovedReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AddressRemovedReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AddressRemovedReason_HIST;
SELECT * FROM STG.WINCHK_AddressRemovedReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 69: AddressStatus
COPY INTO ARES.STG.SRC_AddressStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ADDRESS_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AddressStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AddressStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AddressStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AddressStatus_HIST;
SELECT * FROM STG.WINCHK_AddressStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 70: AddressSuffix
COPY INTO ARES.STG.SRC_AddressSuffix_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ADDRESS_SUFFIX_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::int 	-- $5: DISPLAY_ORDER INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AddressSuffix/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AddressSuffix_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AddressSuffix_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AddressSuffix_HIST;
SELECT * FROM STG.WINCHK_AddressSuffix_HIST;
[STATUS=tbd]
*/

-- // TABLE 71: AddressSuite
COPY INTO ARES.STG.SRC_AddressSuite_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ADDRESS_SUITE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AddressSuite/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AddressSuite_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AddressSuite_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AddressSuite_HIST;
SELECT * FROM STG.WINCHK_AddressSuite_HIST;
[STATUS=tbd]
*/

-- // TABLE 72: AddressType
COPY INTO ARES.STG.SRC_AddressType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ADDRESS_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AddressType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AddressType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AddressType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AddressType_HIST;
SELECT * FROM STG.WINCHK_AddressType_HIST;
[STATUS=tbd]
*/

-- // TABLE 73: AdjustmentAmountType
COPY INTO ARES.STG.SRC_AdjustmentAmountType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ADJUSTMENT_AMOUNT_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AdjustmentAmountType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AdjustmentAmountType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AdjustmentAmountType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AdjustmentAmountType_HIST;
SELECT * FROM STG.WINCHK_AdjustmentAmountType_HIST;
[STATUS=tbd]
*/

-- // TABLE 74: AgentAction
COPY INTO ARES.STG.SRC_AgentAction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AGENT_ACTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: LONG_DESCR VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SHORT_DESCR VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: COLLECTOR_ONLY BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: LEGAL_ONLY BOOLEAN NOT NULL
		($6)::char, 	-- $6: SECURITY CHAR(8000) NOT NULL
		($7)::smallint, 	-- $7: PHONE_TYPE_CODE SMALLINT NULL
		($8)::smallint, 	-- $8: ADDRESS_TYPE_CODE SMALLINT NULL
		($9)::boolean 	-- $9: USE_ON_ADASTRA_RI BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AgentAction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AgentAction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AgentAction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AgentAction_HIST;
SELECT * FROM STG.WINCHK_AgentAction_HIST;
[STATUS=tbd]
*/

-- // TABLE 75: AgentResult
COPY INTO ARES.STG.SRC_AgentResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AGENT_RESULT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: LONG_DESCR VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SHORT_DESCR VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: RESULT_LEVEL SMALLINT NOT NULL
		($5)::smallint 	-- $5: SCREEN_POP SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AgentResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AgentResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AgentResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AgentResult_HIST;
SELECT * FROM STG.WINCHK_AgentResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 76: AMLAdditionalParty
COPY INTO ARES.STG.SRC_AMLAdditionalParty_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AML_ADDITIONAL_PARTY_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NULL
		($5)::varchar, 	-- $5: ENTITY_NAME VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: FIRST_NAME VARCHAR(8000) NULL
		($7)::char, 	-- $7: MID_INITIAL CHAR(8000) NULL
		($8)::varchar, 	-- $8: LAST_NAME VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: PHONE_NUMBER VARCHAR(8000) NULL
		($10)::date, 	-- $10: DOB DATE NULL
		($11)::int, 	-- $11: AML_OCCUPATION_KEY INT NULL
		($12)::char, 	-- $12: ADDRESS_FORMAT CHAR(8000) NULL
		($13)::varchar, 	-- $13: ADDR_NUM VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: ADDR_PRE_DIR VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: ADDR_STREET VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: ADDR_SUFFIX VARCHAR(8000) NULL
		($17)::varchar, 	-- $17: ADDR_POST_DIR VARCHAR(8000) NULL
		($18)::varchar, 	-- $18: ADDR_SUITE VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: ADDR_SUITE_NUM VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: CITY VARCHAR(8000) NULL
		($21)::char, 	-- $21: STATE CHAR(8000) NULL
		($22)::varchar, 	-- $22: ZIPCODE VARCHAR(8000) NULL
		($23)::varchar, 	-- $23: COUNTY VARCHAR(8000) NULL
		($24)::char, 	-- $24: COUNTRY CHAR(8000) NULL
		($25)::varchar, 	-- $25: FLAT_NUM VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: BUILDING_NUM VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: BUILDING_NAME VARCHAR(8000) NULL
		($28)::char, 	-- $28: ID_TYPE CHAR(8000) NULL
		($29)::varchar, 	-- $29: ID_NUMBER VARCHAR(8000) NULL
		($30)::char, 	-- $30: ID_STATE CHAR(8000) NULL
		($31)::int, 	-- $31: COUNTRY_KEY INT NULL
		($32)::varchar, 	-- $32: TAX_ID VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: PURPOSE VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: RELATIONSHIP VARCHAR(8000) NULL
		($35)::boolean, 	-- $35: IS_ENTITY BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: IS_REGISTERED_CHARITY BOOLEAN NOT NULL
		($37)::varchar, 	-- $37: INCORPORATION_NUMBER VARCHAR(8000) NULL
		($38)::varchar, 	-- $38: INCORPORATION_PLACE VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: BUSINESS_TYPE VARCHAR(8000) NULL
		($40)::varchar, 	-- $40: ADDRESS_CSZ VARCHAR(8000) NULL
		($41)::varchar, 	-- $41: ADDRESS_LINE VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($43)::varchar, 	-- $43: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($44)::varchar 	-- $44: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLAdditionalParty/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLAdditionalParty_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLAdditionalParty_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLAdditionalParty_HIST;
SELECT * FROM STG.WINCHK_AMLAdditionalParty_HIST;
[STATUS=tbd]
*/

-- // TABLE 77: AMLFileLog
COPY INTO ARES.STG.SRC_AMLFileLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AML_LOG_ID INT NOT NULL
		($2)::int, 	-- $2: SEQUENCE_NUMBER INT NOT NULL
		($3)::varchar, 	-- $3: STREAM VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: STEP VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: FILE_NAME VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: NUMBER_OF_RECORDS INT NULL
		($7)::datetime, 	-- $7: DATE_ENTERED datetime NOT NULL
		($8)::char 	-- $8: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLFileLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLFileLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLFileLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLFileLog_HIST;
SELECT * FROM STG.WINCHK_AMLFileLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 78: AMLForeignAddress
COPY INTO ARES.STG.SRC_AMLForeignAddress_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AML_FOREIGN_ADDRESS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NULL
		($3)::varchar, 	-- $3: ADDRESS1 VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: ADDRESS2 VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: ADDRESS3 VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: COUNTRY_KEY INT NOT NULL
		($7)::varchar, 	-- $7: PHONE_NUMBER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char 	-- $9: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLForeignAddress/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLForeignAddress_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLForeignAddress_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLForeignAddress_HIST;
SELECT * FROM STG.WINCHK_AMLForeignAddress_HIST;
[STATUS=tbd]
*/

-- // TABLE 79: AMLOccupation
COPY INTO ARES.STG.SRC_AMLOccupation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AML_OCCUPATION_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NULL
		($4)::varchar, 	-- $4: OCCUPATION VARCHAR(8000) NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NULL
		($7)::int 	-- $7: OCCUPATION_REASON INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLOccupation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLOccupation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLOccupation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLOccupation_HIST;
SELECT * FROM STG.WINCHK_AMLOccupation_HIST;
[STATUS=tbd]
*/

-- // TABLE 80: AMLOccupationReason
COPY INTO ARES.STG.SRC_AMLOccupationReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AMLOccupationReasonKey INT NOT NULL
		($2)::varchar, 	-- $2: Name VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Description VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLOccupationReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLOccupationReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLOccupationReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLOccupationReason_HIST;
SELECT * FROM STG.WINCHK_AMLOccupationReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 81: AMLThresholdRule
COPY INTO ARES.STG.SRC_AMLThresholdRule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AML_THRESHOLD_RULE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NULL
		($3)::boolean, 	-- $3: IS_ENABLED BOOLEAN NOT NULL
		($4)::number, 	-- $4: MIN_DOLLAR_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: MAX_DOLLAR_AMT NUMBER(10,4) NOT NULL
		($6)::int, 	-- $6: THRESHOLD_TYPE INT NOT NULL
		($7)::boolean, 	-- $7: IS_AGGREGATED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: INCLUDE_FEES BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: REQ_AML_PRIMARY BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: REQ_AML_SECONDARY BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: REQ_AML_CTR BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: EXPIRED_ACCEPTED BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: INQUIRE_OCCUPATION BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: PROMPT_OTHER_PARTY BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: PROMPT_PURPOSE BOOLEAN NOT NULL
		($16)::boolean, 	-- $16: REQUIRE_CUSTOMER BOOLEAN NOT NULL
		to_timestamp_ntz($17), 	-- $17: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($18)::char, 	-- $18: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($19), 	-- $19: DATE_UPDATED TIMESTAMP_LTZ NULL
		($20)::char, 	-- $20: UPDATED_BY CHAR(8000) NULL
		($21)::boolean, 	-- $21: PROMPT_OCCUPATION_EVERYDAY BOOLEAN NOT NULL
		($22)::boolean 	-- $22: PROMPT_OCCUPATION_EVERYTRANS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLThresholdRule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLThresholdRule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLThresholdRule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLThresholdRule_HIST;
SELECT * FROM STG.WINCHK_AMLThresholdRule_HIST;
[STATUS=tbd]
*/

-- // TABLE 82: AMLThresholdRuleTransXref
COPY INTO ARES.STG.SRC_AMLThresholdRuleTransXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AML_THRESHOLD_RULE_TRANS_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: AML_THRESHOLD_RULE_KEY INT NOT NULL
		($3)::int, 	-- $3: FCRM_AML_TRANS_CODE_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLThresholdRuleTransXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLThresholdRuleTransXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLThresholdRuleTransXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLThresholdRuleTransXref_HIST;
SELECT * FROM STG.WINCHK_AMLThresholdRuleTransXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 83: AMLThresholdType
COPY INTO ARES.STG.SRC_AMLThresholdType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AMLThresholdTypeKey INT NOT NULL
		($2)::varchar, 	-- $2: Name VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Description VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AMLThresholdType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AMLThresholdType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AMLThresholdType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AMLThresholdType_HIST;
SELECT * FROM STG.WINCHK_AMLThresholdType_HIST;
[STATUS=tbd]
*/

-- // TABLE 84: ApiApplication
COPY INTO ARES.STG.SRC_ApiApplication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: API_APPLICATION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: TOKEN VARCHAR(36) NOT NULL
		($4)::varchar, 	-- $4: SECRET VARCHAR(8000) NOT NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ApiApplication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ApiApplication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ApiApplication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ApiApplication_HIST;
SELECT * FROM STG.WINCHK_ApiApplication_HIST;
[STATUS=tbd]
*/

-- // TABLE 85: ApplyDueType
COPY INTO ARES.STG.SRC_ApplyDueType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: APPLY_DUE_TYPE_KEY SMALLINT NOT NULL
		($2)::char, 	-- $2: ENUM_CODE CHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ApplyDueType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ApplyDueType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ApplyDueType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ApplyDueType_HIST;
SELECT * FROM STG.WINCHK_ApplyDueType_HIST;
[STATUS=tbd]
*/

-- // TABLE 86: ApplyPaymentOrder
COPY INTO ARES.STG.SRC_ApplyPaymentOrder_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: APPLY_PAYMENT_ORDER_KEY SMALLINT NOT NULL
		($2)::char, 	-- $2: ENUM_CODE CHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ApplyPaymentOrder/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ApplyPaymentOrder_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ApplyPaymentOrder_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ApplyPaymentOrder_HIST;
SELECT * FROM STG.WINCHK_ApplyPaymentOrder_HIST;
[STATUS=tbd]
*/

-- // TABLE 87: AreaCode
COPY INTO ARES.STG.SRC_AreaCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AREA_CODE INT NOT NULL
		($2)::char 	-- $2: STATE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AreaCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AreaCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AreaCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AreaCode_HIST;
SELECT * FROM STG.WINCHK_AreaCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 88: AspectAddOnMetricId
COPY INTO ARES.STG.SRC_AspectAddOnMetricId_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ASPECT_ADD_ON_METRIC_ID_KEY INT NOT NULL
		($2)::int, 	-- $2: ADD_ON_METRIC_ID INT NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::varchar 	-- $5: EXPORT_FORMAT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AspectAddOnMetricId/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AspectAddOnMetricId_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AspectAddOnMetricId_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AspectAddOnMetricId_HIST;
SELECT * FROM STG.WINCHK_AspectAddOnMetricId_HIST;
[STATUS=tbd]
*/

-- // TABLE 89: AspectAddOnMetricIdDimensionIdXref
COPY INTO ARES.STG.SRC_AspectAddOnMetricIdDimensionIdXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ASPECT_ADD_ON_METRIC_ID_DIMENSION_ID_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: ASPECT_EXPORT_JOB_ADD_ON_METRIC_ID_KEY INT NOT NULL
		($3)::int, 	-- $3: ASPECT_DIMENSION_ID_KEY INT NOT NULL
		($4)::varchar 	-- $4: FIELDNAME_FOR_DIMENSION_ID_VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AspectAddOnMetricIdDimensionIdXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AspectAddOnMetricIdDimensionIdXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AspectAddOnMetricIdDimensionIdXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AspectAddOnMetricIdDimensionIdXref_HIST;
SELECT * FROM STG.WINCHK_AspectAddOnMetricIdDimensionIdXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 90: AspectDimensionId
COPY INTO ARES.STG.SRC_AspectDimensionId_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ASPECT_DIMENSION_ID_KEY INT NOT NULL
		($2)::int, 	-- $2: DIMENSION_ID INT NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::varchar 	-- $5: EXPORT_FORMAT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AspectDimensionId/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AspectDimensionId_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AspectDimensionId_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AspectDimensionId_HIST;
SELECT * FROM STG.WINCHK_AspectDimensionId_HIST;
[STATUS=tbd]
*/

-- // TABLE 91: AspectExportJob
COPY INTO ARES.STG.SRC_AspectExportJob_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ASPECT_EXPORT_JOB_KEY INT NOT NULL
		($2)::varchar, 	-- $2: JOB_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AspectExportJob/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AspectExportJob_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AspectExportJob_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AspectExportJob_HIST;
SELECT * FROM STG.WINCHK_AspectExportJob_HIST;
[STATUS=tbd]
*/

-- // TABLE 92: AspectExportJobAddOnMetricIdXref
COPY INTO ARES.STG.SRC_AspectExportJobAddOnMetricIdXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ASPECT_EXPORT_JOB_ADD_ON_METRIC_ID_KEY INT NOT NULL
		($2)::int, 	-- $2: ASPECT_EXPORT_JOB_KEY INT NOT NULL
		($3)::int, 	-- $3: ASPECT_ADD_ON_METRIC_ID_KEY INT NOT NULL
		($4)::varchar, 	-- $4: SOURCE_SPROC VARCHAR(8000) NOT NULL
		($5)::varchar 	-- $5: FIELDNAME_FOR_METRIC_ID_VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AspectExportJobAddOnMetricIdXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AspectExportJobAddOnMetricIdXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AspectExportJobAddOnMetricIdXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AspectExportJobAddOnMetricIdXref_HIST;
SELECT * FROM STG.WINCHK_AspectExportJobAddOnMetricIdXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 93: Attorney
COPY INTO ARES.STG.SRC_Attorney_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ATTORNEY_KEY smallint NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: ATTORNEY_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: CONTACT_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: CONTACT_EMAIL VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: CITY VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: STATE CHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: ZIPCODE VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: FAX_NUMBER VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: FTP_ADDRESS VARCHAR(8000) NOT NULL
		($12)::smallint, 	-- $12: COMMISSION_PCT smallint NOT NULL
		($13)::boolean, 	-- $13: IS_ACTIVE BOOLEAN NOT NULL
		($14)::varchar, 	-- $14: ADDRESS1 VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: COUNTY VARCHAR(8000) NOT NULL
		($16)::char, 	-- $16: COUNTRY CHAR(8000) NOT NULL
		($17)::char, 	-- $17: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: ADDR_STREET VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: FLAT_NUM VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: BUILDING_NUM VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: BUILDING_NAME VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: ADDRESS_CSZ VARCHAR(8000) NULL
		($24)::varchar, 	-- $24: ADDRESS_LINE VARCHAR(8000) NULL
		($25)::varchar, 	-- $25: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($27)::varchar 	-- $27: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/Attorney/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Attorney_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Attorney_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Attorney_HIST;
SELECT * FROM STG.WINCHK_Attorney_HIST;
[STATUS=tbd]
*/

-- // TABLE 94: AttorneyType
COPY INTO ARES.STG.SRC_AttorneyType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ATTORNEY_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AttorneyType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AttorneyType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AttorneyType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AttorneyType_HIST;
SELECT * FROM STG.WINCHK_AttorneyType_HIST;
[STATUS=tbd]
*/

-- // TABLE 95: AttorneyTypeXRef
COPY INTO ARES.STG.SRC_AttorneyTypeXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ATTORNEY_KEY smallint NOT NULL
		($2)::smallint 	-- $2: ATTORNEY_TYPE_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AttorneyTypeXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AttorneyTypeXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AttorneyTypeXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AttorneyTypeXRef_HIST;
SELECT * FROM STG.WINCHK_AttorneyTypeXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 96: AuthorizedVisitorContact
COPY INTO ARES.STG.SRC_AuthorizedVisitorContact_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTHORIZED_VISITOR_CONTACT_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::varchar, 	-- $3: FIRST_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: LAST_NAME VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: INTERPERSONAL_RELATIONSHIP_TYPE_KEY INT NULL
		($6)::date, 	-- $6: DOB DATE NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::char 	-- $8: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AuthorizedVisitorContact/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AuthorizedVisitorContact_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AuthorizedVisitorContact_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AuthorizedVisitorContact_HIST;
SELECT * FROM STG.WINCHK_AuthorizedVisitorContact_HIST;
[STATUS=tbd]
*/

-- // TABLE 97: AutoReport
COPY INTO ARES.STG.SRC_AutoReport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE_ENTERED DATE NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NULL
		($4)::varchar, 	-- $4: REPORT_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: DESCRIPTION VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OUTFILE VARCHAR(8000) NOT NULL
		($7)::text, 	-- $7: REPORT_SQL text NOT NULL
		($8)::boolean, 	-- $8: RUN_MON BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: RUN_TUE BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: RUN_WED BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: RUN_THU BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: RUN_FRI BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: RUN_SAT BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: RUN_SUN BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: RUN_EOM BOOLEAN NOT NULL
		($16)::boolean, 	-- $16: RUN_EOQ BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: RUN_EOY BOOLEAN NOT NULL
		($18)::smallint, 	-- $18: RUN_DOM SMALLINT NOT NULL
		($19)::boolean, 	-- $19: OUTPUT_XLS BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: OUTPUT_PDF BOOLEAN NOT NULL
		($21)::varchar, 	-- $21: SQL_FILE_LOCATION VARCHAR(8000) NOT NULL
		($22)::boolean, 	-- $22: ATTACH_FILE_TO_EMAIL BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: OUTPUT_CSV BOOLEAN NOT NULL
		($24)::varchar, 	-- $24: EMAIL_SUBJECT VARCHAR(8000) NOT NULL
		($25)::date, 	-- $25: LAST_UPDATED DATE NULL
		($26)::char, 	-- $26: LAST_UPDATED_BY CHAR(8000) NULL
		($27)::boolean, 	-- $27: DELETED BOOLEAN NULL
		($28)::boolean, 	-- $28: OUTPUT_XLSX BOOLEAN NOT NULL
		to_timestamp_ntz($29), 	-- $29: START_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($30), 	-- $30: END_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($31), 	-- $31: LAST_RUN_DATE TIMESTAMP_LTZ NULL
		($32)::char 	-- $32: OWNER_ID CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReport_HIST;
SELECT * FROM STG.WINCHK_AutoReport_HIST;
[STATUS=tbd]
*/

-- // TABLE 98: AutoReportEditHistory
COPY INTO ARES.STG.SRC_AutoReportEditHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_EDIT_HISTORY_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ACTION CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: TABLE_NAME VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: TABLE_KEY INT NOT NULL
		($7)::varchar, 	-- $7: FIELD_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: OLD_VALUE VARCHAR(8000) NULL
		($9)::varchar 	-- $9: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReportEditHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReportEditHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReportEditHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReportEditHistory_HIST;
SELECT * FROM STG.WINCHK_AutoReportEditHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 99: AutoReportEmail
COPY INTO ARES.STG.SRC_AutoReportEmail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_EMAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: AUTO_REPORT_KEY INT NOT NULL
		($3)::varchar, 	-- $3: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($4)::smallint 	-- $4: EMAIL_TYPE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReportEmail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReportEmail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReportEmail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReportEmail_HIST;
SELECT * FROM STG.WINCHK_AutoReportEmail_HIST;
[STATUS=tbd]
*/

-- // TABLE 100: AutoReportParameter
COPY INTO ARES.STG.SRC_AutoReportParameter_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_PARAMETER_KEY INT NOT NULL
		($2)::int, 	-- $2: AUTO_REPORT_KEY INT NOT NULL
		($3)::varchar, 	-- $3: PARAMETER_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: PARAMETER_VALUE VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($6)::smallint 	-- $6: EMAIL_TYPE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReportParameter/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReportParameter_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReportParameter_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReportParameter_HIST;
SELECT * FROM STG.WINCHK_AutoReportParameter_HIST;
[STATUS=tbd]
*/

-- // TABLE 101: AutoReportRunSchedule
COPY INTO ARES.STG.SRC_AutoReportRunSchedule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_RUN_SCHEDULE_KEY INT NOT NULL
		($2)::int, 	-- $2: RUN_TIME INT NOT NULL
		($3)::boolean, 	-- $3: SUN BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: MON BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: TUES BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: WED BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: THURS BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: FRI BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: SAT BOOLEAN NOT NULL
		($10)::smallint, 	-- $10: MONTHLY_DAY smallint NOT NULL
		to_timestamp_ntz($11), 	-- $11: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12), 	-- $12: END_DATE TIMESTAMP_LTZ NULL
		($13)::varchar, 	-- $13: JOB_NAME VARCHAR(8000) NULL
		to_timestamp_ntz($14), 	-- $14: START_TIME TIMESTAMP_LTZ NULL
		($15)::boolean, 	-- $15: HOURLY BOOLEAN NULL
		($16)::int, 	-- $16: EVERY_X_MINUTES INT NULL
		to_timestamp_ntz($17), 	-- $17: END_TIME TIMESTAMP_LTZ NULL
		($18)::varchar 	-- $18: TIME_ZONE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReportRunSchedule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReportRunSchedule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReportRunSchedule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReportRunSchedule_HIST;
SELECT * FROM STG.WINCHK_AutoReportRunSchedule_HIST;
[STATUS=tbd]
*/

-- // TABLE 102: AutoReportSchedule
COPY INTO ARES.STG.SRC_AutoReportSchedule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_SCHEDULE_KEY INT NOT NULL
		($2)::int, 	-- $2: AUTO_REPORT_KEY INT NOT NULL
		($3)::int 	-- $3: AUTO_REPORT_RUN_SCHEDULE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReportSchedule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReportSchedule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReportSchedule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReportSchedule_HIST;
SELECT * FROM STG.WINCHK_AutoReportSchedule_HIST;
[STATUS=tbd]
*/

-- // TABLE 103: AutoReportTab
COPY INTO ARES.STG.SRC_AutoReportTab_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: AUTO_REPORT_TAB_KEY INT NOT NULL
		($2)::int, 	-- $2: AUTO_REPORT_KEY INT NOT NULL
		($3)::smallint, 	-- $3: RESULT_NUM SMALLINT NOT NULL
		($4)::varchar, 	-- $4: TAB_NAME VARCHAR(8000) NOT NULL
		($5)::boolean 	-- $5: CONSIDER_FOR_EMAIL BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/AutoReportTab/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*AutoReportTab_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_AutoReportTab_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_AutoReportTab_HIST;
SELECT * FROM STG.WINCHK_AutoReportTab_HIST;
[STATUS=tbd]
*/

-- // TABLE 104: BalSheet_TransDetail
COPY INTO ARES.STG.SRC_BalSheet_TransDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BALSHEET_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::smallint 	-- $3: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BalSheet_TransDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BalSheet_TransDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BalSheet_TransDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BalSheet_TransDetail_HIST;
SELECT * FROM STG.WINCHK_BalSheet_TransDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 105: BalSheet2
COPY INTO ARES.STG.SRC_BalSheet2_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BALSHEET_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::date, 	-- $5: BUSINESS_DATE DATE NOT NULL
		($6)::boolean, 	-- $6: EXPORTED BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: TRECS_EXPORT BOOLEAN NULL
		($8)::boolean, 	-- $8: ADASTRA_EXPORTED BOOLEAN NULL
		($9)::date 	-- $9: DATA_WAREHOUSE_EXPORTED DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/BalSheet2/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BalSheet2_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BalSheet2_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BalSheet2_HIST;
SELECT * FROM STG.WINCHK_BalSheet2_HIST;
[STATUS=tbd]
*/

-- // TABLE 106: BalSheetColumns2
COPY INTO ARES.STG.SRC_BalSheetColumns2_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BSC_KEY INT NOT NULL
		($2)::int, 	-- $2: BALSHEET_KEY INT NOT NULL
		($3)::int, 	-- $3: GL_ACCT INT NOT NULL
		($4)::smallint, 	-- $4: ACCT_TYPE SMALLINT NOT NULL
		($5)::number, 	-- $5: DB_AMOUNT NUMBER(19,4) NOT NULL
		($6)::number, 	-- $6: CR_AMOUNT NUMBER(19,4) NOT NULL
		($7)::varchar 	-- $7: ACCT_TYPE_DESC VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/BalSheetColumns2/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BalSheetColumns2_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BalSheetColumns2_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BalSheetColumns2_HIST;
SELECT * FROM STG.WINCHK_BalSheetColumns2_HIST;
[STATUS=tbd]
*/

-- // TABLE 107: Bank
COPY INTO ARES.STG.SRC_Bank_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: BRANCH VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: AREACODE VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: PHONE VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: RIPHONE VARCHAR(8000) NULL
		($7)::boolean, 	-- $7: MainBank BOOLEAN NOT NULL
		($8)::varchar, 	-- $8: Verify_Phone VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: bankphone VARCHAR(8000) NULL
		($10)::smallint, 	-- $10: BANK_GROUP SMALLINT NULL
		($11)::varchar, 	-- $11: BANK_REPORT_NOTE VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: BUSINESS_OPENS_AT VARCHAR(8000) NOT NULL
		($13)::int, 	-- $13: BANK_PARENT_KEY INT NULL
		($14)::datetime, 	-- $14: DATE_ENTERED datetime NULL
		($15)::char, 	-- $15: ENTERED_BY CHAR(8000) NULL
		($16)::datetime, 	-- $16: FED_UPDATE_DATE datetime NULL
		($17)::boolean, 	-- $17: AUTOMATED_MERCHANT_LINE BOOLEAN NOT NULL
		($18)::varchar, 	-- $18: ADDRESS1 VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: CITY VARCHAR(8000) NOT NULL
		($20)::char, 	-- $20: STATE CHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: ZIPCODE VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: COUNTY VARCHAR(8000) NOT NULL
		($23)::char, 	-- $23: COUNTRY CHAR(8000) NOT NULL
		($24)::smallint, 	-- $24: BANK_FUNDING_METHOD SMALLINT NOT NULL
		($25)::char, 	-- $25: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: ADDR_STREET VARCHAR(8000) NOT NULL
		($27)::varchar, 	-- $27: FLAT_NUM VARCHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: BUILDING_NUM VARCHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: BUILDING_NAME VARCHAR(8000) NOT NULL
		($30)::boolean, 	-- $30: IS_GOVT BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: OPERATED_MERCHANT BOOLEAN NOT NULL
		($32)::varchar, 	-- $32: ADDRESS_CSZ VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: ADDRESS_LINE VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($35)::varchar, 	-- $35: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($36)::varchar 	-- $36: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/Bank/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Bank_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Bank_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Bank_HIST;
SELECT * FROM STG.WINCHK_Bank_HIST;
[STATUS=tbd]
*/

-- // TABLE 108: BankAccount
COPY INTO ARES.STG.SRC_BankAccount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANK_ACCOUNT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($4)::bigint 	-- $4: BANK_ACCOUNT_NUMBER_NUMERIC BIGINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankAccount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankAccount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankAccount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankAccount_HIST;
SELECT * FROM STG.WINCHK_BankAccount_HIST;
[STATUS=tbd]
*/

-- // TABLE 109: BankClassification
COPY INTO ARES.STG.SRC_BankClassification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANK_CLASSIFICATION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: BANK_CLASSIFICATION_TYPE_KEY INT NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankClassification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankClassification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankClassification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankClassification_HIST;
SELECT * FROM STG.WINCHK_BankClassification_HIST;
[STATUS=tbd]
*/

-- // TABLE 110: BankClassificationType
COPY INTO ARES.STG.SRC_BankClassificationType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANK_CLASSIFICATION_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankClassificationType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankClassificationType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankClassificationType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankClassificationType_HIST;
SELECT * FROM STG.WINCHK_BankClassificationType_HIST;
[STATUS=tbd]
*/

-- // TABLE 111: BankClosed
COPY INTO ARES.STG.SRC_BankClosed_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANK_CLOSED_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE DATE NOT NULL
		($3)::int, 	-- $3: HOLIDAY_KEY INT NULL
		($4)::char 	-- $4: STATE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankClosed/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankClosed_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankClosed_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankClosed_HIST;
SELECT * FROM STG.WINCHK_BankClosed_HIST;
[STATUS=tbd]
*/

-- // TABLE 112: BankParent
COPY INTO ARES.STG.SRC_BankParent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANK_PARENT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BANK_PARENT_NAME VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: ALLOWS_MIDDAY_PROCESSING BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankParent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankParent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankParent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankParent_HIST;
SELECT * FROM STG.WINCHK_BankParent_HIST;
[STATUS=tbd]
*/

-- // TABLE 113: BankruptcyTrustee
COPY INTO ARES.STG.SRC_BankruptcyTrustee_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANKRUPTCY_TRUSTEE_KEY INT NOT NULL
		($2)::int, 	-- $2: RISREPT_KEY INT NOT NULL
		($3)::smallint, 	-- $3: ATTORNEY_KEY smallint NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: CLAIM_NUMBER VARCHAR(8000) NOT NULL
		($7)::int, 	-- $7: CLAIM_TYPE INT NOT NULL
		($8)::date 	-- $8: DATE_FILED DATE NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankruptcyTrustee/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankruptcyTrustee_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankruptcyTrustee_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankruptcyTrustee_HIST;
SELECT * FROM STG.WINCHK_BankruptcyTrustee_HIST;
[STATUS=tbd]
*/

-- // TABLE 114: BankruptcyTrusteeClaimType
COPY INTO ARES.STG.SRC_BankruptcyTrusteeClaimType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANKRUPTCY_TRUSTEE_CLAIM_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankruptcyTrusteeClaimType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankruptcyTrusteeClaimType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankruptcyTrusteeClaimType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankruptcyTrusteeClaimType_HIST;
SELECT * FROM STG.WINCHK_BankruptcyTrusteeClaimType_HIST;
[STATUS=tbd]
*/

-- // TABLE 115: BankStatus
COPY INTO ARES.STG.SRC_BankStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BANK_STATUS_KEY INT NOT NULL
		($2)::varchar 	-- $2: STATUS VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BankStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BankStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BankStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BankStatus_HIST;
SELECT * FROM STG.WINCHK_BankStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 116: BatchExecution
COPY INTO ARES.STG.SRC_BatchExecution_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BATCH_EXECUTION_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($3), 	-- $3: END_TIME TIMESTAMP_LTZ NULL
		($4)::varchar 	-- $4: COMMAND_LINE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/BatchExecution/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BatchExecution_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BatchExecution_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BatchExecution_HIST;
SELECT * FROM STG.WINCHK_BatchExecution_HIST;
[STATUS=tbd]
*/

-- // TABLE 117: BillerOCRRegion
COPY INTO ARES.STG.SRC_BillerOCRRegion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BILLER_OCRREGION_KEY INT NOT NULL
		($2)::int, 	-- $2: BILLPAY_BILLER_KEY INT NOT NULL
		($3)::int, 	-- $3: OCRREGION_KEY INT NOT NULL
		($4)::int, 	-- $4: SCANLINELENGTH INT NOT NULL
		($5)::smallint, 	-- $5: ACCOUNT_NUM_START SMALLINT NULL
		($6)::smallint, 	-- $6: ACCOUNT_NUM_LENGTH SMALLINT NULL
		($7)::smallint, 	-- $7: AMOUNT_START SMALLINT NULL
		($8)::smallint, 	-- $8: AMOUNT_LENGTH SMALLINT NULL
		($9)::boolean 	-- $9: TRIM_ACCOUNT_NUM_LEADING_ZEROS BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/BillerOCRRegion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BillerOCRRegion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BillerOCRRegion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BillerOCRRegion_HIST;
SELECT * FROM STG.WINCHK_BillerOCRRegion_HIST;
[STATUS=tbd]
*/

-- // TABLE 118: BillPayBiller
COPY INTO ARES.STG.SRC_BillPayBiller_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BILLPAY_BILLER_KEY INT NOT NULL
		($2)::smallint, 	-- $2: VENDOR_ID SMALLINT NOT NULL
		($3)::varchar, 	-- $3: DISPLAYED_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: BILLER_CODE VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: BILLER_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: BILLER_PHONE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: RAW_IMPORTED_DATA VARCHAR(8000) NOT NULL
		($8)::number, 	-- $8: MAX_ALLOWED_PAYMENT NUMBER(10,4) NOT NULL
		($9)::smallint, 	-- $9: STATUS SMALLINT NOT NULL
		to_timestamp_ntz($10), 	-- $10: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($11)::char, 	-- $11: TELLER CHAR(8000) NOT NULL
		($12)::decimal, 	-- $12: BILLER_FEE DECIMAL(38,0) NULL
		($13)::boolean 	-- $13: USE_BILLER_FEE BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/BillPayBiller/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BillPayBiller_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BillPayBiller_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BillPayBiller_HIST;
SELECT * FROM STG.WINCHK_BillPayBiller_HIST;
[STATUS=tbd]
*/

-- // TABLE 119: BillPayBillerStatus
COPY INTO ARES.STG.SRC_BillPayBillerStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: BILLPAY_BILLER_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BillPayBillerStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BillPayBillerStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BillPayBillerStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BillPayBillerStatus_HIST;
SELECT * FROM STG.WINCHK_BillPayBillerStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 120: BillPayVendor
COPY INTO ARES.STG.SRC_BillPayVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BILLPAY_VENDOR_KEY INT NOT NULL
		($2)::varchar, 	-- $2: VENDOR_NAME VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: VENDOR_ID SMALLINT NOT NULL
		($4)::varchar, 	-- $4: PHONE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_DELETED TIMESTAMP_LTZ NULL
		($8)::char 	-- $8: DELETED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/BillPayVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BillPayVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BillPayVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BillPayVendor_HIST;
SELECT * FROM STG.WINCHK_BillPayVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 121: BlockReason
COPY INTO ARES.STG.SRC_BlockReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BLOCK_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: REASON_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/BlockReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BlockReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BlockReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BlockReason_HIST;
SELECT * FROM STG.WINCHK_BlockReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 122: BooleanQuestion
COPY INTO ARES.STG.SRC_BooleanQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BOOLEAN_QUESTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BooleanQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BooleanQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BooleanQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BooleanQuestion_HIST;
SELECT * FROM STG.WINCHK_BooleanQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 123: BooleanQuestionCompany
COPY INTO ARES.STG.SRC_BooleanQuestionCompany_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BOOLEAN_QUESTION_COMPANY_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: BOOLEAN_QUESTION_KEY INT NOT NULL
		($4)::int 	-- $4: BOOLEAN_QUESTION_PROCESS_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BooleanQuestionCompany/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BooleanQuestionCompany_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BooleanQuestionCompany_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BooleanQuestionCompany_HIST;
SELECT * FROM STG.WINCHK_BooleanQuestionCompany_HIST;
[STATUS=tbd]
*/

-- // TABLE 124: BooleanQuestionProcessType
COPY INTO ARES.STG.SRC_BooleanQuestionProcessType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BOOLEAN_QUESTION_PROCESS_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BooleanQuestionProcessType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BooleanQuestionProcessType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BooleanQuestionProcessType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BooleanQuestionProcessType_HIST;
SELECT * FROM STG.WINCHK_BooleanQuestionProcessType_HIST;
[STATUS=tbd]
*/

-- // TABLE 125: BooleanQuestionResponse
COPY INTO ARES.STG.SRC_BooleanQuestionResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BOOLEAN_QUESTION_RESPONSE_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: ENTERED_DATE TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::int, 	-- $5: BOOLEAN_QUESTION_KEY INT NOT NULL
		($6)::boolean 	-- $6: RESPONSE BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/BooleanQuestionResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BooleanQuestionResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BooleanQuestionResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BooleanQuestionResponse_HIST;
SELECT * FROM STG.WINCHK_BooleanQuestionResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 126: BooleanQuestionResponseRefinanceLoanApplication
COPY INTO ARES.STG.SRC_BooleanQuestionResponseRefinanceLoanApplication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REFINANCE_LOAN_APPLICATION_KEY INT NOT NULL
		($2)::int 	-- $2: BOOLEAN_QUESTION_RESPONSE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BooleanQuestionResponseRefinanceLoanApplication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BooleanQuestionResponseRefinanceLoanApplication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BooleanQuestionResponseRefinanceLoanApplication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BooleanQuestionResponseRefinanceLoanApplication_HIST;
SELECT * FROM STG.WINCHK_BooleanQuestionResponseRefinanceLoanApplication_HIST;
[STATUS=tbd]
*/

-- // TABLE 127: BumpUpReason
COPY INTO ARES.STG.SRC_BumpUpReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: BUMP_UP_REASON_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BumpUpReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BumpUpReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BumpUpReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BumpUpReason_HIST;
SELECT * FROM STG.WINCHK_BumpUpReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 128: BumpUpTierType
COPY INTO ARES.STG.SRC_BumpUpTierType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: BUMP_UP_TIER_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BumpUpTierType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BumpUpTierType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BumpUpTierType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BumpUpTierType_HIST;
SELECT * FROM STG.WINCHK_BumpUpTierType_HIST;
[STATUS=tbd]
*/

-- // TABLE 129: BusinessEntity
COPY INTO ARES.STG.SRC_BusinessEntity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BUSINESS_ENTITY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NULL
		($3)::boolean, 	-- $3: IS_THIRD_PARTY BOOLEAN NOT NULL
		($4)::int 	-- $4: CONTAINER_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BusinessEntity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BusinessEntity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BusinessEntity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BusinessEntity_HIST;
SELECT * FROM STG.WINCHK_BusinessEntity_HIST;
[STATUS=tbd]
*/

-- // TABLE 130: BusinessLegalType
COPY INTO ARES.STG.SRC_BusinessLegalType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: BUSINESS_LEGAL_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: BUSINESS_LEGAL_TYPE_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BusinessLegalType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BusinessLegalType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BusinessLegalType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BusinessLegalType_HIST;
SELECT * FROM STG.WINCHK_BusinessLegalType_HIST;
[STATUS=tbd]
*/

-- // TABLE 131: BusinessLoan
COPY INTO ARES.STG.SRC_BusinessLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BUSINESS_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_BUSINESS_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::varchar, 	-- $4: BUSINESS_NAME VARCHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: BUSINESS_TYPE_CODE SMALLINT NOT NULL
		($6)::smallint, 	-- $6: LEGAL_TYPE_CODE SMALLINT NOT NULL
		($7)::varchar, 	-- $7: TAX_ID_NUM VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: BUSINESS_PHONE_NUM VARCHAR(8000) NOT NULL
		($9)::date, 	-- $9: BUSINESS_START_DATE DATE NULL
		($10)::smallint, 	-- $10: NUM_EMPLOYEES smallint NOT NULL
		($11)::number, 	-- $11: VER_MONTHLY_NET_INC NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: VER_BANK_DEPOSITS NUMBER(10,4) NOT NULL
		($13)::varchar, 	-- $13: LOAN_PURPOSE VARCHAR(8000) NOT NULL
		($14)::boolean, 	-- $14: USE_HOME_ADDRESS BOOLEAN NOT NULL
		($15)::varchar, 	-- $15: ADDR_NUM VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: ADDR_STREET VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: ADDR_SUITE VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: CITY VARCHAR(8000) NOT NULL
		($23)::char, 	-- $23: STATE CHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: ZIPCODE VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: COUNTY VARCHAR(8000) NOT NULL
		($26)::char, 	-- $26: COUNTRY CHAR(8000) NOT NULL
		($27)::char, 	-- $27: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: FLAT_NUM VARCHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: BUILDING_NUM VARCHAR(8000) NOT NULL
		($30)::varchar, 	-- $30: BUILDING_NAME VARCHAR(8000) NOT NULL
		($31)::varchar, 	-- $31: ADDRESS_CSZ VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: ADDRESS_LINE VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($35)::varchar 	-- $35: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/BusinessLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BusinessLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BusinessLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BusinessLoan_HIST;
SELECT * FROM STG.WINCHK_BusinessLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 132: BusinessType
COPY INTO ARES.STG.SRC_BusinessType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: BUSINESS_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: BUSINESS_TYPE_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/BusinessType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*BusinessType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_BusinessType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_BusinessType_HIST;
SELECT * FROM STG.WINCHK_BusinessType_HIST;
[STATUS=tbd]
*/

-- // TABLE 133: CABLender
COPY INTO ARES.STG.SRC_CABLender_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CAB_LENDER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CAB_LENDER_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CONTACT_LAST_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CONTACT_FIRST_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ADDR_NUM VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: ADDR_STREET VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: ADDR_SUITE VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: FLAT_NUM VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: BUILDING_NUM VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: BUILDING_NAME VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: CITY VARCHAR(8000) NOT NULL
		($18)::char, 	-- $18: STATE CHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: ZIPCODE VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: COUNTY VARCHAR(8000) NOT NULL
		($21)::char, 	-- $21: COUNTRY CHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: CERTIFICATE_ID VARCHAR(8000) NOT NULL
		to_timestamp_ntz($23), 	-- $23: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($24)::char, 	-- $24: ENTERED_BY CHAR(8000) NOT NULL
		($25)::datetime, 	-- $25: LAST_UPDATED datetime NULL
		($26)::char, 	-- $26: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($27)::boolean, 	-- $27: IS_DELETED BOOLEAN NOT NULL
		($28)::varchar, 	-- $28: ADDRESS_CSZ VARCHAR(8000) NULL
		($29)::varchar, 	-- $29: ADDRESS_LINE VARCHAR(8000) NULL
		($30)::varchar, 	-- $30: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($32)::varchar 	-- $32: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CABLender/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CABLender_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CABLender_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CABLender_HIST;
SELECT * FROM STG.WINCHK_CABLender_HIST;
[STATUS=tbd]
*/

-- // TABLE 134: CallCampaign
COPY INTO ARES.STG.SRC_CallCampaign_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7), 	-- $7: END_DATE TIMESTAMP_LTZ NOT NULL
		($8)::int, 	-- $8: PRIORITY INT NOT NULL
		($9)::boolean, 	-- $9: PAUSED BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: NOTE VARCHAR(8000) NULL
		($11)::boolean, 	-- $11: REAL_TIME BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14) 	-- $14: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaign/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaign_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaign_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaign_HIST;
SELECT * FROM STG.WINCHK_CallCampaign_HIST;
[STATUS=tbd]
*/

-- // TABLE 135: CallCampaignAppointment
COPY INTO ARES.STG.SRC_CallCampaignAppointment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_APPOINTMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: APPOINTMENT_DATE TIMESTAMP_LTZ NOT NULL
		($4)::smallint 	-- $4: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignAppointment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignAppointment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignAppointment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignAppointment_HIST;
SELECT * FROM STG.WINCHK_CallCampaignAppointment_HIST;
[STATUS=tbd]
*/

-- // TABLE 136: CallCampaignDoNotCall
COPY INTO ARES.STG.SRC_CallCampaignDoNotCall_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_DO_NOT_CALL_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: PHONE_NUMBER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4) 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignDoNotCall/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignDoNotCall_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignDoNotCall_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignDoNotCall_HIST;
SELECT * FROM STG.WINCHK_CallCampaignDoNotCall_HIST;
[STATUS=tbd]
*/

-- // TABLE 137: CallCampaignHistory
COPY INTO ARES.STG.SRC_CallCampaignHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7), 	-- $7: END_DATE TIMESTAMP_LTZ NOT NULL
		($8)::int, 	-- $8: PRIORITY INT NOT NULL
		($9)::boolean, 	-- $9: PAUSED BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: NOTE VARCHAR(8000) NULL
		($11)::boolean, 	-- $11: REAL_TIME BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14) 	-- $14: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignHistory_HIST;
SELECT * FROM STG.WINCHK_CallCampaignHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 138: CallCampaignQueue
COPY INTO ARES.STG.SRC_CallCampaignQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: CALL_CAMPAIGN_KEY INT NOT NULL
		($3)::int, 	-- $3: CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NULL
		($4)::int, 	-- $4: VISITOR_KEY INT NULL
		($5)::varchar, 	-- $5: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NULL
		($7)::varchar, 	-- $7: FIRST_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: LAST_NAME VARCHAR(8000) NOT NULL
		($9)::int, 	-- $9: CALL_CAMPAIGN_QUEUE_STATUS_KEY INT NOT NULL
		($10)::smallint, 	-- $10: CAMPAIGN_LOCATION smallint NOT NULL
		($11)::smallint, 	-- $11: TARGET_LOCATION smallint NOT NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NULL
		($13)::char, 	-- $13: LOCKED_BY_TELLER CHAR(8000) NULL
		to_timestamp_ntz($14), 	-- $14: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($15), 	-- $15: CALL_AFTER TIMESTAMP_LTZ NULL
		to_timestamp_ntz($16), 	-- $16: EXPIRE_DATE TIMESTAMP_LTZ NOT NULL
		($17)::varchar 	-- $17: MARKETING_DETAILS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignQueue_HIST;
SELECT * FROM STG.WINCHK_CallCampaignQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 139: CallCampaignQueueActivity
COPY INTO ARES.STG.SRC_CallCampaignQueueActivity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NOT NULL
		($2)::int, 	-- $2: CALL_CAMPAIGN_KEY INT NOT NULL
		($3)::int, 	-- $3: ORIG_CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NULL
		($4)::int, 	-- $4: VISITOR_KEY INT NULL
		($5)::varchar, 	-- $5: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NULL
		($7)::varchar, 	-- $7: FIRST_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: LAST_NAME VARCHAR(8000) NOT NULL
		($9)::int, 	-- $9: CALL_CAMPAIGN_QUEUE_STATUS_KEY INT NOT NULL
		($10)::smallint, 	-- $10: CAMPAIGN_LOCATION smallint NOT NULL
		($11)::smallint, 	-- $11: TARGET_LOCATION smallint NOT NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14), 	-- $14: CALL_AFTER TIMESTAMP_LTZ NULL
		to_timestamp_ntz($15), 	-- $15: EXPIRE_DATE TIMESTAMP_LTZ NOT NULL
		($16)::varchar, 	-- $16: NOTE VARCHAR(8000) NULL
		($17)::int, 	-- $17: CALL_CAMPAIGN_QUEUE_STATUS_REASON_KEY INT NOT NULL
		($18)::varchar 	-- $18: MARKETING_DETAILS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignQueueActivity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignQueueActivity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignQueueActivity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignQueueActivity_HIST;
SELECT * FROM STG.WINCHK_CallCampaignQueueActivity_HIST;
[STATUS=tbd]
*/

-- // TABLE 140: CallCampaignQueueStatus
COPY INTO ARES.STG.SRC_CallCampaignQueueStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_QUEUE_STATUS_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignQueueStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignQueueStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignQueueStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignQueueStatus_HIST;
SELECT * FROM STG.WINCHK_CallCampaignQueueStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 141: CallCampaignQueueStatusReason
COPY INTO ARES.STG.SRC_CallCampaignQueueStatusReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_QUEUE_STATUS_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::smallint, 	-- $4: DISPLAY_ORDER smallint NOT NULL
		($5)::boolean 	-- $5: CALL_BACK_REQUIRED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CallCampaignQueueStatusReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CallCampaignQueueStatusReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CallCampaignQueueStatusReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CallCampaignQueueStatusReason_HIST;
SELECT * FROM STG.WINCHK_CallCampaignQueueStatusReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 142: CapsCCTXRef
COPY INTO ARES.STG.SRC_CapsCCTXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: CAPS_HOLD_KEY INT NOT NULL
		($3)::boolean, 	-- $3: APPROVED BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: POSTED BOOLEAN NOT NULL
		($5)::number 	-- $5: AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CapsCCTXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CapsCCTXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CapsCCTXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CapsCCTXRef_HIST;
SELECT * FROM STG.WINCHK_CapsCCTXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 143: CapsHold
COPY INTO ARES.STG.SRC_CapsHold_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CAPS_HOLD_KEY INT NOT NULL
		($2)::int, 	-- $2: CAPS_RUN_KEY INT NOT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::int, 	-- $5: CASHED_CHECK_KEY INT NULL
		($6)::int, 	-- $6: CUSTOMER_KEY INT NOT NULL
		($7)::int, 	-- $7: ISSUER_KEY INT NOT NULL
		($8)::int, 	-- $8: PTP_HEADER_KEY INT NOT NULL
		($9)::int, 	-- $9: PTP_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($10), 	-- $10: RETURN_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($11), 	-- $11: DUE_DATE TIMESTAMP_LTZ NULL
		($12)::number, 	-- $12: AMT_TO_COLLECT NUMBER(10,4) NOT NULL
		($13)::char, 	-- $13: DEPOSIT_METHOD CHAR(8000) NOT NULL
		($14)::int, 	-- $14: DEPOSIT_ORDER INT NOT NULL
		($15)::varchar, 	-- $15: BILLING_ADDRESS VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: BILLING_CITY VARCHAR(8000) NOT NULL
		($17)::char, 	-- $17: BILLING_STATE CHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: BILLING_ZIPCODE VARCHAR(8000) NOT NULL
		($19)::smallint, 	-- $19: LOCATION smallint NOT NULL
		($20)::int, 	-- $20: RIS_AUDIT_ID INT NULL
		($21)::int, 	-- $21: CREDITCARD_KEY INT NULL
		($22)::varchar, 	-- $22: NAMEONCARD VARCHAR(8000) NOT NULL
		($23)::smallint, 	-- $23: EXPMONTH SMALLINT NOT NULL
		($24)::int, 	-- $24: EXPYEAR INT NOT NULL
		($25)::smallint, 	-- $25: CARD_BRAND SMALLINT NOT NULL
		($26)::smallint, 	-- $26: CARD_TYPE SMALLINT NOT NULL
		($27)::char, 	-- $27: TELLER CHAR(8000) NOT NULL
		($28)::char, 	-- $28: LOAN_TYPE CHAR(8000) NOT NULL
		($29)::char, 	-- $29: PRODUCT_TYPE CHAR(8000) NOT NULL
		($30)::boolean, 	-- $30: IS_AD_ASTRA BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: SELECTED BOOLEAN NOT NULL
		($32)::boolean, 	-- $32: PROCESSED BOOLEAN NOT NULL
		($33)::boolean, 	-- $33: APPROVED BOOLEAN NOT NULL
		($34)::boolean, 	-- $34: POSTED BOOLEAN NOT NULL
		($35)::varchar, 	-- $35: APP_ERR_CODE VARCHAR(8000) NOT NULL
		($36)::smallint, 	-- $36: CAPS_SKIP_REASON_KEY SMALLINT NOT NULL
		($37)::int, 	-- $37: RI_AGE INT NOT NULL
		to_timestamp_ntz($38), 	-- $38: LAST_DCARD_ATTEMPT_DATE TIMESTAMP_LTZ NULL
		($39)::int, 	-- $39: DCARD_CONSECUTIVE_DAYS INT NULL
		($40)::int, 	-- $40: LAST_CCTRANS_KEY INT NULL
		($41)::number, 	-- $41: AMT_COLLECTED NUMBER(10,4) NULL
		($42)::boolean, 	-- $42: EXCLUDE_FROM_CAP BOOLEAN NOT NULL
		($43)::number, 	-- $43: TOT_FEE_AMT NUMBER(10,4) NOT NULL
		($44)::varchar, 	-- $44: CAPS_ATTEMPT_ID VARCHAR(8000) NULL
		($45)::date, 	-- $45: CALC_PAY_DATE DATE NULL
		($46)::int, 	-- $46: CARD_TOKEN INT NOT NULL
		($47)::int, 	-- $47: CARD_NUMBER_TOKEN INT NOT NULL
		($48)::int, 	-- $48: BIN INT NOT NULL
		($49)::smallint, 	-- $49: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($50)::boolean, 	-- $50: USE_DUE_CYCLE BOOLEAN NOT NULL
		($51)::int 	-- $51: PRESENTMENT_REQUEST_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CapsHold/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CapsHold_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CapsHold_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CapsHold_HIST;
SELECT * FROM STG.WINCHK_CapsHold_HIST;
[STATUS=tbd]
*/

-- // TABLE 144: CapsRun
COPY INTO ARES.STG.SRC_CapsRun_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CAPS_RUN_KEY INT NOT NULL
		($2)::datetime, 	-- $2: START_TIME datetime NULL
		($3)::datetime, 	-- $3: FINISH_TIME datetime NULL
		($4)::smallint, 	-- $4: CAPS_RUN_STATUS_KEY SMALLINT NOT NULL
		($5)::int, 	-- $5: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($6)::int 	-- $6: PREV_CAPS_RUN_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CapsRun/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CapsRun_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CapsRun_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CapsRun_HIST;
SELECT * FROM STG.WINCHK_CapsRun_HIST;
[STATUS=tbd]
*/

-- // TABLE 145: CapsRunStatus
COPY INTO ARES.STG.SRC_CapsRunStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CAPS_RUN_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: RUN_STATUS_DESC VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CapsRunStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CapsRunStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CapsRunStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CapsRunStatus_HIST;
SELECT * FROM STG.WINCHK_CapsRunStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 146: CapsSkipReason
COPY INTO ARES.STG.SRC_CapsSkipReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CAPS_SKIP_REASON_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: SKIP_DESC VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CapsSkipReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CapsSkipReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CapsSkipReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CapsSkipReason_HIST;
SELECT * FROM STG.WINCHK_CapsSkipReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 147: CapsUpdates
COPY INTO ARES.STG.SRC_CapsUpdates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CAPS_UPDATES_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SQL VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: PROCESSED BOOLEAN NOT NULL
		($4)::int, 	-- $4: CAPS_HOLD_KEY INT NOT NULL
		($5)::int, 	-- $5: CAPS_RUN_KEY INT NOT NULL
		($6)::varchar 	-- $6: UPDATE_TABLE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CapsUpdates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CapsUpdates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CapsUpdates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CapsUpdates_HIST;
SELECT * FROM STG.WINCHK_CapsUpdates_HIST;
[STATUS=tbd]
*/

-- // TABLE 148: CardBatchSettle
COPY INTO ARES.STG.SRC_CardBatchSettle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_BATCH_SETTLE_KEY INT NOT NULL
		($2)::int, 	-- $2: EOD_VAULT_COUNT_KEY INT NULL
		($3)::varchar, 	-- $3: REQUEST_DATA VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: RESPONSE_DATA VARCHAR(8000) NULL
		($5)::boolean, 	-- $5: ACCEPTED BOOLEAN NOT NULL
		($6)::datetime, 	-- $6: START_TIME datetime NULL
		($7)::datetime, 	-- $7: END_TIME datetime NULL
		($8)::datetime, 	-- $8: DATE_ENTERED datetime NOT NULL
		($9)::smallint, 	-- $9: LOCATION smallint NOT NULL
		($10)::datetime 	-- $10: END_BATCH_DATE_TIME datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardBatchSettle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardBatchSettle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardBatchSettle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardBatchSettle_HIST;
SELECT * FROM STG.WINCHK_CardBatchSettle_HIST;
[STATUS=tbd]
*/

-- // TABLE 149: CardCoolingOff
COPY INTO ARES.STG.SRC_CardCoolingOff_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_COOLING_OFF_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: CARD_GOVERNOR_HISTORY_KEY INT NULL
		($5)::int, 	-- $5: CARD_NUMBER_TOKEN INT NOT NULL
		($6)::int, 	-- $6: BIN INT NOT NULL
		($7)::smallint 	-- $7: CARD_NUMBER_LAST_FOUR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardCoolingOff/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardCoolingOff_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardCoolingOff_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardCoolingOff_HIST;
SELECT * FROM STG.WINCHK_CardCoolingOff_HIST;
[STATUS=tbd]
*/

-- // TABLE 150: CardFundingRequestType
COPY INTO ARES.STG.SRC_CardFundingRequestType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CARD_FUNDING_REQUEST_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: REQUEST_TYPE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardFundingRequestType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardFundingRequestType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardFundingRequestType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardFundingRequestType_HIST;
SELECT * FROM STG.WINCHK_CardFundingRequestType_HIST;
[STATUS=tbd]
*/

-- // TABLE 151: CardFundingStatusCode
COPY INTO ARES.STG.SRC_CardFundingStatusCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CARD_FUNDING_STATUS_CODE_KEY smallint NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::varchar, 	-- $3: STATUS_CODE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: STATUS_TEXT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: STATUS_DESCRIPTION VARCHAR(8000) NULL
		($6)::boolean, 	-- $6: IS_ERROR BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_SUCCESSFUL BOOLEAN NOT NULL
		($8)::smallint 	-- $8: CARD_FUNDING_VENDOR_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardFundingStatusCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardFundingStatusCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardFundingStatusCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardFundingStatusCode_HIST;
SELECT * FROM STG.WINCHK_CardFundingStatusCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 152: CardFundingTransaction
COPY INTO ARES.STG.SRC_CardFundingTransaction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_FUNDING_TRANSACTION_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::smallint, 	-- $3: CARD_FUNDING_REQUEST_TYPE_KEY SMALLINT NOT NULL
		($4)::int, 	-- $4: LOAN_FUNDING_KEY INT NULL
		($5)::int, 	-- $5: CREDIT_CARD_KEY INT NOT NULL
		($6)::number, 	-- $6: AMOUNT NUMBER(10,4) NOT NULL
		($7)::boolean, 	-- $7: CAN_FUND_CARD BOOLEAN NULL
		($8)::smallint, 	-- $8: CARD_FUNDING_STATUS_CODE_KEY smallint NULL
		($9)::bigint, 	-- $9: ERROR_LOG_KEY BIGINT NULL
		($10)::boolean, 	-- $10: IS_ERROR BOOLEAN NULL
		($11)::boolean, 	-- $11: IS_FUNDING_SUCCESSFUL BOOLEAN NULL
		($12)::varchar, 	-- $12: BILLER_ID VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: VENDOR_TRANSACTION_ID VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: VENDOR_REQUEST VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: VENDOR_RESPONSE VARCHAR(8000) NULL
		($16)::smallint 	-- $16: CARD_FUNDING_VENDOR_KEY SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardFundingTransaction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardFundingTransaction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardFundingTransaction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardFundingTransaction_HIST;
SELECT * FROM STG.WINCHK_CardFundingTransaction_HIST;
[STATUS=tbd]
*/

-- // TABLE 153: CardFundingVendor
COPY INTO ARES.STG.SRC_CardFundingVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CARD_FUNDING_VENDOR_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: VENDOR_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardFundingVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardFundingVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardFundingVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardFundingVendor_HIST;
SELECT * FROM STG.WINCHK_CardFundingVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 154: CardGovernorActionType
COPY INTO ARES.STG.SRC_CardGovernorActionType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_GOVERNOR_ACTION_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: CODE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardGovernorActionType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardGovernorActionType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardGovernorActionType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardGovernorActionType_HIST;
SELECT * FROM STG.WINCHK_CardGovernorActionType_HIST;
[STATUS=tbd]
*/

-- // TABLE 155: CardGovernorHistory
COPY INTO ARES.STG.SRC_CardGovernorHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_GOVERNOR_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_KEY INT NOT NULL
		($3)::int, 	-- $3: CARD_GOVERNOR_ACTION_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::int, 	-- $7: CARD_NUMBER_TOKEN INT NOT NULL
		($8)::int, 	-- $8: BIN INT NOT NULL
		($9)::smallint 	-- $9: CARD_NUMBER_LAST_FOUR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardGovernorHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardGovernorHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardGovernorHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardGovernorHistory_HIST;
SELECT * FROM STG.WINCHK_CardGovernorHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 156: CardGovernorOverrideHistory
COPY INTO ARES.STG.SRC_CardGovernorOverrideHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_GOVERNOR_OVERRIDE_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::boolean, 	-- $3: RESPONSE BOOLEAN NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::int, 	-- $6: CARD_GOVERNOR_VALIDATION_KEY INT NOT NULL
		($7)::int, 	-- $7: CARD_NUMBER_TOKEN INT NULL
		($8)::int, 	-- $8: BIN INT NULL
		($9)::smallint 	-- $9: CARD_NUMBER_LAST_FOUR smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardGovernorOverrideHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardGovernorOverrideHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardGovernorOverrideHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardGovernorOverrideHistory_HIST;
SELECT * FROM STG.WINCHK_CardGovernorOverrideHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 157: CardGovernorValidation
COPY INTO ARES.STG.SRC_CardGovernorValidation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_GOVERNOR_VALIDATION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: MESSAGE VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: EXPECTED_RESPONSE BOOLEAN NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::boolean, 	-- $6: IS_DELETED BOOLEAN NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($8) 	-- $8: UPDATED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardGovernorValidation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardGovernorValidation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardGovernorValidation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardGovernorValidation_HIST;
SELECT * FROM STG.WINCHK_CardGovernorValidation_HIST;
[STATUS=tbd]
*/

-- // TABLE 158: CardGovernorValidationLocation
COPY INTO ARES.STG.SRC_CardGovernorValidationLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_GOVERNOR_VALIDATION_LOCATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CARD_GOVERNOR_VALIDATION_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: IS_ENABLED BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_CUSTOMER BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_CARD BOOLEAN NOT NULL
		($7)::char, 	-- $7: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char, 	-- $9: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($10) 	-- $10: UPDATED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardGovernorValidationLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardGovernorValidationLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardGovernorValidationLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardGovernorValidationLocation_HIST;
SELECT * FROM STG.WINCHK_CardGovernorValidationLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 159: CardResponseType
COPY INTO ARES.STG.SRC_CardResponseType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CARD_RESPONSE_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardResponseType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardResponseType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardResponseType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardResponseType_HIST;
SELECT * FROM STG.WINCHK_CardResponseType_HIST;
[STATUS=tbd]
*/

-- // TABLE 160: CardReview
COPY INTO ARES.STG.SRC_CardReview_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CARD_REVIEW_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: CLEARED_BY CHAR(8000) NULL
		to_timestamp_ntz($6), 	-- $6: CLEARED_DATE TIMESTAMP_LTZ NULL
		($7)::int, 	-- $7: CARD_GOVERNOR_HISTORY_KEY INT NULL
		($8)::int, 	-- $8: CARD_NUMBER_TOKEN INT NOT NULL
		($9)::int, 	-- $9: BIN INT NOT NULL
		($10)::int 	-- $10: CARD_NUMBER_LAST_FOUR INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardReview/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardReview_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardReview_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardReview_HIST;
SELECT * FROM STG.WINCHK_CardReview_HIST;
[STATUS=tbd]
*/

-- // TABLE 161: CardType
COPY INTO ARES.STG.SRC_CardType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CardTypeKey SMALLINT NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CardType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CardType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CardType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CardType_HIST;
SELECT * FROM STG.WINCHK_CardType_HIST;
[STATUS=tbd]
*/

-- // TABLE 162: CashedCheck
COPY INTO ARES.STG.SRC_CashedCheck_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CASHED_CHECK_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: ISSUER_KEY INT NULL
		($5)::int, 	-- $5: TRANS_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: TELLER CHAR(8000) NOT NULL
		($8)::char, 	-- $8: CHECK_TYPE CHAR(8000) NOT NULL
		($9)::number, 	-- $9: CHECK_AMOUNT NUMBER(10,4) NOT NULL
		($10)::varchar, 	-- $10: CHECK_NO VARCHAR(8000) NOT NULL
		to_timestamp_ntz($11), 	-- $11: CHECK_DATE TIMESTAMP_LTZ NOT NULL
		($12)::float, 	-- $12: CC_RATE FLOAT NOT NULL
		($13)::number, 	-- $13: CC_TOT_FEE NUMBER(10,4) NOT NULL
		($14)::boolean, 	-- $14: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($15), 	-- $15: REVERSED_DATE TIMESTAMP_LTZ NULL
		($16)::boolean, 	-- $16: BOUNCED BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: CC_MONEY_ORDER BOOLEAN NULL
		($18)::int, 	-- $18: DRAWERZ_KEY INT NULL
		($19)::boolean, 	-- $19: CC_FREE BOOLEAN NULL
		($20)::numeric, 	-- $20: CC_ORIG_RATE NUMERIC NULL
		($21)::smallint, 	-- $21: SRC_APPROVAL SMALLINT NOT NULL
		($22)::number, 	-- $22: CC_PCT_FEE_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: CC_FLAT_FEE_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: CC_DISCOUNT_AMT NUMBER(10,4) NOT NULL
		($25)::boolean, 	-- $25: CC_IS_POST_DATED BOOLEAN NOT NULL
		($26)::int, 	-- $26: DWDOCID INT NOT NULL
		($27)::int, 	-- $27: CURRENCY_KEY INT NOT NULL
		($28)::int, 	-- $28: IMAGE_CASH_LETTER_BUNDLE_KEY INT NULL
		($29)::boolean, 	-- $29: ELECTRONIC_CASHED_CHECK BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: IS_SHREDDED BOOLEAN NOT NULL
		($31)::varchar 	-- $31: NOTES VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CashedCheck/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CashedCheck_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CashedCheck_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CashedCheck_HIST;
SELECT * FROM STG.WINCHK_CashedCheck_HIST;
[STATUS=tbd]
*/

-- // TABLE 163: CashedCheckImage
COPY INTO ARES.STG.SRC_CashedCheckImage_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CASHED_CHECK_IMAGE_KEY INT NOT NULL
		($2)::int, 	-- $2: CASHED_CHECK_KEY INT NOT NULL
		($3)::variant, 	-- $3: DATA VARIANT NOT NULL
		($4)::smallint, 	-- $4: IMAGE_TYPE smallint NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: DATE_TO_DELETE TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CashedCheckImage/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CashedCheckImage_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CashedCheckImage_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CashedCheckImage_HIST;
SELECT * FROM STG.WINCHK_CashedCheckImage_HIST;
[STATUS=tbd]
*/

-- // TABLE 164: CashedCheckMICR
COPY INTO ARES.STG.SRC_CashedCheckMICR_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CASHED_CHECK_MICR_KEY INT NOT NULL
		($2)::int, 	-- $2: CASHED_CHECK_KEY INT NOT NULL
		($3)::varchar, 	-- $3: MICRDATA VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: AUX_ON_US VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: TRANSIT_NUMBER VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: EXTERNAL_PROCESSING_CODE CHAR(8000) NOT NULL
		($7)::char, 	-- $7: CHECKSUM_DIGIT CHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: ON_US VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: MICR_AMOUNT VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: DEPOSIT_BANK_CONTROL_DATA VARCHAR(8000) NOT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($12)::char 	-- $12: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CashedCheckMICR/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CashedCheckMICR_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CashedCheckMICR_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CashedCheckMICR_HIST;
SELECT * FROM STG.WINCHK_CashedCheckMICR_HIST;
[STATUS=tbd]
*/

-- // TABLE 165: CashedCheckPayment
COPY INTO ARES.STG.SRC_CashedCheckPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CASHED_CHECK_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CASHED_CHECK_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::varchar, 	-- $7: NOTE VARCHAR(8000) NOT NULL
		($8)::number, 	-- $8: PAID_AMT NUMBER(10,4) NOT NULL
		($9)::boolean, 	-- $9: REVERSED BOOLEAN NOT NULL
		($10)::datetime, 	-- $10: REVERSED_DATE datetime NULL
		($11)::int, 	-- $11: PAYMENT_METHOD INT NOT NULL
		($12)::smallint 	-- $12: TRANS_CODE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CashedCheckPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CashedCheckPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CashedCheckPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CashedCheckPayment_HIST;
SELECT * FROM STG.WINCHK_CashedCheckPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 166: CashedCheckPaymentRefund
COPY INTO ARES.STG.SRC_CashedCheckPaymentRefund_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CASHED_CHECK_PAYMENT_REFUND_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: REFUNDED_CASHED_CHECK_PAYMENT_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: LOCATION smallint NOT NULL
		($7)::boolean, 	-- $7: REVERSED BOOLEAN NOT NULL
		($8)::int 	-- $8: REVERSE_TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CashedCheckPaymentRefund/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CashedCheckPaymentRefund_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CashedCheckPaymentRefund_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CashedCheckPaymentRefund_HIST;
SELECT * FROM STG.WINCHK_CashedCheckPaymentRefund_HIST;
[STATUS=tbd]
*/

-- // TABLE 167: CC_Status
COPY INTO ARES.STG.SRC_CC_Status_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CC_STATUS_KEY smallint NOT NULL
		($2)::smallint, 	-- $2: STATUS_CODE smallint NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CC_Status/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CC_Status_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CC_Status_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CC_Status_HIST;
SELECT * FROM STG.WINCHK_CC_Status_HIST;
[STATUS=tbd]
*/

-- // TABLE 168: CCardResponses
COPY INTO ARES.STG.SRC_CCardResponses_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CCARD_RESPONSE_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::smallint, 	-- $6: RESPONSE SMALLINT NOT NULL
		($7)::boolean 	-- $7: IS_NEW BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CCardResponses/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CCardResponses_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CCardResponses_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CCardResponses_HIST;
SELECT * FROM STG.WINCHK_CCardResponses_HIST;
[STATUS=tbd]
*/

-- // TABLE 169: Certificate
COPY INTO ARES.STG.SRC_Certificate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CERTIFICATE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::variant, 	-- $3: DATA VARIANT NULL
		($4)::varchar, 	-- $4: PASSWORD VARCHAR(8000) NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED_UTC TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: DATE_EXPIRES_UTC TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Certificate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Certificate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Certificate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Certificate_HIST;
SELECT * FROM STG.WINCHK_Certificate_HIST;
[STATUS=tbd]
*/

-- // TABLE 170: CFPB_AssumedBadAuths
COPY INTO ARES.STG.SRC_CFPB_AssumedBadAuths_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Customer_Key INT NOT NULL
		($2)::int, 	-- $2: docuware_document_key INT NULL
		to_timestamp_ntz($3), 	-- $3: date_entered TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: CREDIT_CARD_KEY INT NULL
		($5)::int, 	-- $5: loan_key INT NULL
		($6)::smallint, 	-- $6: location smallint NOT NULL
		($7)::char, 	-- $7: teller CHAR(8000) NOT NULL
		($8)::int, 	-- $8: auth INT NOT NULL
		($9)::boolean 	-- $9: is_internet BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_AssumedBadAuths/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_AssumedBadAuths_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_AssumedBadAuths_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_AssumedBadAuths_HIST;
SELECT * FROM STG.WINCHK_CFPB_AssumedBadAuths_HIST;
[STATUS=tbd]
*/

-- // TABLE 171: CFPB_AssumedBadCardAuths
COPY INTO ARES.STG.SRC_CFPB_AssumedBadCardAuths_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Customer_Key INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_DOCUMENT_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: CREDIT_CARD_KEY INT NOT NULL
		($5)::smallint, 	-- $5: location smallint NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::int, 	-- $7: auth INT NOT NULL
		($8)::boolean 	-- $8: IS_INTERNET BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_AssumedBadCardAuths/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_AssumedBadCardAuths_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_AssumedBadCardAuths_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_AssumedBadCardAuths_HIST;
SELECT * FROM STG.WINCHK_CFPB_AssumedBadCardAuths_HIST;
[STATUS=tbd]
*/

-- // TABLE 172: CFPB_AssumedBadLoanAuths
COPY INTO ARES.STG.SRC_CFPB_AssumedBadLoanAuths_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: customer_key INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_DOCUMENT_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: loan_key INT NOT NULL
		($5)::smallint, 	-- $5: location smallint NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::int, 	-- $7: auth INT NOT NULL
		($8)::boolean 	-- $8: IS_INTERNET BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_AssumedBadLoanAuths/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_AssumedBadLoanAuths_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_AssumedBadLoanAuths_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_AssumedBadLoanAuths_HIST;
SELECT * FROM STG.WINCHK_CFPB_AssumedBadLoanAuths_HIST;
[STATUS=tbd]
*/

-- // TABLE 173: CFPB_AuthorizationGroups
COPY INTO ARES.STG.SRC_CFPB_AuthorizationGroups_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GroupNo INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::varchar, 	-- $3: FIRSTNAME VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: LASTNAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: EMAIL_ADDR VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: ADDRESS_LINE_3 VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: ADDRESS_CSZ VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: APT_LINE VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: CITY VARCHAR(8000) NULL
		($12)::char, 	-- $12: STATE CHAR(8000) NULL
		($13)::varchar, 	-- $13: ZIPCODE VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: HOME VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: CELL VARCHAR(8000) NULL
		($16)::int, 	-- $16: LOAN_KEY INT NULL
		to_timestamp_ntz($17), 	-- $17: LOAN_DATE TIMESTAMP_LTZ NULL
		($18)::smallint, 	-- $18: LOCATION smallint NULL
		($19)::char, 	-- $19: PRODUCT_TYPE CHAR(8000) NULL
		($20)::char, 	-- $20: LOAN_TYPE CHAR(8000) NULL
		($21)::char, 	-- $21: LOAN_STATUS CHAR(8000) NULL
		($22)::varchar, 	-- $22: LOAN_STATUS_DESCRIPTION VARCHAR(8000) NULL
		($23)::varchar, 	-- $23: DEFAULTED VARCHAR(8000) NOT NULL
		($24)::boolean, 	-- $24: IS_INTERNET BOOLEAN NULL
		($25)::varchar, 	-- $25: CARDS_ON_FILE VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: CARD1 VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: CARD1EXP VARCHAR(8000) NULL
		($28)::varchar, 	-- $28: CARD2 VARCHAR(8000) NULL
		($29)::varchar, 	-- $29: CARD2EXP VARCHAR(8000) NULL
		($30)::varchar, 	-- $30: CARD3 VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: CARD3EXP VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: CARD4 VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: CARD4EXP VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: CARD5 VARCHAR(8000) NULL
		($35)::varchar 	-- $35: CARD5EXP VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_AuthorizationGroups/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_AuthorizationGroups_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_AuthorizationGroups_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_AuthorizationGroups_HIST;
SELECT * FROM STG.WINCHK_CFPB_AuthorizationGroups_HIST;
[STATUS=tbd]
*/

-- // TABLE 174: CFPB_BadAuths
COPY INTO ARES.STG.SRC_CFPB_BadAuths_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: customer_key INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_DOCUMENT_KEY INT NULL
		($3)::datetime, 	-- $3: date_entered datetime NOT NULL
		($4)::int, 	-- $4: loan_key INT NOT NULL
		($5)::smallint, 	-- $5: location smallint NOT NULL
		($6)::char, 	-- $6: teller CHAR(8000) NOT NULL
		($7)::int, 	-- $7: AUTH INT NOT NULL
		($8)::boolean 	-- $8: IS_INTERNET BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_BadAuths/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_BadAuths_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_BadAuths_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_BadAuths_HIST;
SELECT * FROM STG.WINCHK_CFPB_BadAuths_HIST;
[STATUS=tbd]
*/

-- // TABLE 175: CFPB_BadLoans
COPY INTO ARES.STG.SRC_CFPB_BadLoans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: customer_key INT NOT NULL
		($2)::int, 	-- $2: loan_key INT NOT NULL
		to_timestamp_ntz($3) 	-- $3: date_entered TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_BadLoans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_BadLoans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_BadLoans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_BadLoans_HIST;
SELECT * FROM STG.WINCHK_CFPB_BadLoans_HIST;
[STATUS=tbd]
*/

-- // TABLE 176: CFPB_LatestAuths
COPY INTO ARES.STG.SRC_CFPB_LatestAuths_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: customer_key INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($3)::datetime, 	-- $3: date_entered datetime NOT NULL
		($4)::int, 	-- $4: loan_key INT NOT NULL
		($5)::smallint, 	-- $5: location smallint NOT NULL
		($6)::char, 	-- $6: teller CHAR(8000) NOT NULL
		($7)::int 	-- $7: AUTH INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CFPB_LatestAuths/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CFPB_LatestAuths_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CFPB_LatestAuths_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CFPB_LatestAuths_HIST;
SELECT * FROM STG.WINCHK_CFPB_LatestAuths_HIST;
[STATUS=tbd]
*/

-- // TABLE 177: CH029414LoanBankCardUpdateFromTransLogSnapshot
COPY INTO ARES.STG.SRC_CH029414LoanBankCardUpdateFromTransLogSnapshot_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_BANK_CARD_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CARD_NUMBER_TOKEN INT NOT NULL
		($4)::int, 	-- $4: DOCUWARE_DOCUMENT_KEY INT NULL
		($5)::boolean, 	-- $5: HAS_PROVISIONAL_APPROVAL BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7), 	-- $7: END_DATE TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: ENTERED_BY CHAR(8000) NOT NULL
		($9)::char, 	-- $9: ENDED_BY CHAR(8000) NULL
		($10)::boolean, 	-- $10: IS_SCHEDULE_PRIMARY_CARD BOOLEAN NOT NULL
		($11)::datetime 	-- $11: SCRIPT_RUN_DATE datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CH029414LoanBankCardUpdateFromTransLogSnapshot/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CH029414LoanBankCardUpdateFromTransLogSnapshot_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CH029414LoanBankCardUpdateFromTransLogSnapshot_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CH029414LoanBankCardUpdateFromTransLogSnapshot_HIST;
SELECT * FROM STG.WINCHK_CH029414LoanBankCardUpdateFromTransLogSnapshot_HIST;
[STATUS=tbd]
*/

-- // TABLE 178: Channel
COPY INTO ARES.STG.SRC_Channel_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CHANNEL_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Channel/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Channel_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Channel_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Channel_HIST;
SELECT * FROM STG.WINCHK_Channel_HIST;
[STATUS=tbd]
*/

-- // TABLE 179: ChannelPaymentCommunicationLimit
COPY INTO ARES.STG.SRC_ChannelPaymentCommunicationLimit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CHANNEL_PAYMENT_COMMUNICATION_LIMIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CHANNEL_KEY INT NOT NULL
		($3)::int, 	-- $3: NOTIFICATION_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: MIN_DAY_COUNT INT NOT NULL
		($5)::int 	-- $5: MAX_DAY_COUNT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ChannelPaymentCommunicationLimit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ChannelPaymentCommunicationLimit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ChannelPaymentCommunicationLimit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ChannelPaymentCommunicationLimit_HIST;
SELECT * FROM STG.WINCHK_ChannelPaymentCommunicationLimit_HIST;
[STATUS=tbd]
*/

-- // TABLE 180: CheckImageType
COPY INTO ARES.STG.SRC_CheckImageType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CHECK_IMAGE_TYPE_KEY smallint NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CheckImageType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CheckImageType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CheckImageType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CheckImageType_HIST;
SELECT * FROM STG.WINCHK_CheckImageType_HIST;
[STATUS=tbd]
*/

-- // TABLE 181: CheckPaymentType
COPY INTO ARES.STG.SRC_CheckPaymentType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CHECK_PAYMENT_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: TYPE_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CheckPaymentType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CheckPaymentType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CheckPaymentType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CheckPaymentType_HIST;
SELECT * FROM STG.WINCHK_CheckPaymentType_HIST;
[STATUS=tbd]
*/

-- // TABLE 182: CheckReturn
COPY INTO ARES.STG.SRC_CheckReturn_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CHECK_RETURN_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: CR_GL_ACCT INT NOT NULL
		($4)::smallint 	-- $4: CR_REASON_CODE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CheckReturn/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CheckReturn_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CheckReturn_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CheckReturn_HIST;
SELECT * FROM STG.WINCHK_CheckReturn_HIST;
[STATUS=tbd]
*/

-- // TABLE 183: CheckType
COPY INTO ARES.STG.SRC_CheckType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CHECK_TYPE_KEY INT NOT NULL
		($2)::char, 	-- $2: CHECK_TYPE_CODE CHAR(8000) NOT NULL
		($3)::char 	-- $3: CHECK_TYPE_DESC CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CheckType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CheckType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CheckType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CheckType_HIST;
SELECT * FROM STG.WINCHK_CheckType_HIST;
[STATUS=tbd]
*/

-- // TABLE 184: chk_type
COPY INTO ARES.STG.SRC_chk_type_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: chk_code CHAR(8000) NOT NULL
		($2)::char 	-- $2: chk_type CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/chk_type/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*chk_type_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_chk_type_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_chk_type_HIST;
SELECT * FROM STG.WINCHK_chk_type_HIST;
[STATUS=tbd]
*/

-- // TABLE 185: ClientApplication
COPY INTO ARES.STG.SRC_ClientApplication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CLIENT_APPLICATION_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NULL
		($4)::boolean 	-- $4: IS_INTERACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ClientApplication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ClientApplication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ClientApplication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ClientApplication_HIST;
SELECT * FROM STG.WINCHK_ClientApplication_HIST;
[STATUS=tbd]
*/

-- // TABLE 186: ClrDataType
COPY INTO ARES.STG.SRC_ClrDataType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CLR_DATA_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ClrDataType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ClrDataType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ClrDataType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ClrDataType_HIST;
SELECT * FROM STG.WINCHK_ClrDataType_HIST;
[STATUS=tbd]
*/

-- // TABLE 187: CollBonusDetail
COPY INTO ARES.STG.SRC_CollBonusDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: tellerid CHAR(8000) NULL
		($2)::int, 	-- $2: location INT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NULL
		to_timestamp_ntz($4), 	-- $4: rdate TIMESTAMP_LTZ NULL
		to_timestamp_ntz($5), 	-- $5: pdate TIMESTAMP_LTZ NULL
		to_timestamp_ntz($6), 	-- $6: cdate TIMESTAMP_LTZ NULL
		($7)::smallint, 	-- $7: timeframe SMALLINT NULL
		($8)::decimal, 	-- $8: creditamt DECIMAL(38,0) NULL
		($9)::smallint, 	-- $9: product SMALLINT NULL
		($10)::smallint, 	-- $10: paytype SMALLINT NULL
		($11)::boolean, 	-- $11: fec_bec BOOLEAN NULL
		($12)::int, 	-- $12: riage INT NULL
		($13)::smallint, 	-- $13: task SMALLINT NULL
		($14)::varchar, 	-- $14: reference VARCHAR(8000) NULL
		($15)::int 	-- $15: COLL_BONUS_DETAIL_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollBonusDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollBonusDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollBonusDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollBonusDetail_HIST;
SELECT * FROM STG.WINCHK_CollBonusDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 188: CollBonusPTP
COPY INTO ARES.STG.SRC_CollBonusPTP_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_DETAIL_KEY INT NULL
		($2)::int, 	-- $2: RISREPT_KEY INT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NULL
		($4)::char, 	-- $4: PRODUCT_TYPE CHAR(8000) NULL
		($5)::char, 	-- $5: LOAN_TYPE CHAR(8000) NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NULL
		($8)::number, 	-- $8: AMOUNT NUMBER(10,4) NULL
		($9)::smallint, 	-- $9: PTP_TYPE SMALLINT NULL
		($10)::smallint, 	-- $10: LOCATION smallint NULL
		($11)::int 	-- $11: COLL_BONUS_PTP_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollBonusPTP/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollBonusPTP_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollBonusPTP_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollBonusPTP_HIST;
SELECT * FROM STG.WINCHK_CollBonusPTP_HIST;
[STATUS=tbd]
*/

-- // TABLE 189: CollBonusTasks
COPY INTO ARES.STG.SRC_CollBonusTasks_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: tellerid CHAR(8000) NULL
		($2)::smallint, 	-- $2: product SMALLINT NULL
		to_timestamp_ntz($3), 	-- $3: tdate TIMESTAMP_LTZ NULL
		($4)::smallint, 	-- $4: task SMALLINT NULL
		($5)::int, 	-- $5: riage INT NULL
		($6)::int 	-- $6: COLL_BONUS_TASKS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollBonusTasks/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollBonusTasks_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollBonusTasks_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollBonusTasks_HIST;
SELECT * FROM STG.WINCHK_CollBonusTasks_HIST;
[STATUS=tbd]
*/

-- // TABLE 190: CollectionAction
COPY INTO ARES.STG.SRC_CollectionAction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_ACTION_KEY INT NOT NULL
		($2)::int, 	-- $2: RISREPT_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: NOTE VARCHAR(8000) NULL
		($7)::int, 	-- $7: AGENT_ACTION_KEY INT NOT NULL
		($8)::int, 	-- $8: AGENT_RESULT_KEY1 INT NOT NULL
		($9)::int, 	-- $9: AGENT_RESULT_KEY2 INT NULL
		($10)::int, 	-- $10: COLLECTION_MOVEMENT_KEY INT NULL
		($11)::int, 	-- $11: TASK_ACTION_RESULT_KEY INT NULL
		($12)::int, 	-- $12: CUSTOMER_PHONE_NUMBER_KEY INT NULL
		($13)::boolean 	-- $13: IS_AD_ASTRA BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAction_HIST;
SELECT * FROM STG.WINCHK_CollectionAction_HIST;
[STATUS=tbd]
*/

-- // TABLE 191: CollectionAgency
COPY INTO ARES.STG.SRC_CollectionAgency_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGENCY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: AGENCY_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: AGENCY_CODE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: ADDRESS1 VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: CITY VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: STATE CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ZIPCODE VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: PHONE VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: PHONE_EXT VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: CONTACT_NAME VARCHAR(8000) NOT NULL
		($11)::boolean, 	-- $11: IS_ACTIVE BOOLEAN NOT NULL
		($12)::smallint, 	-- $12: MAX_DAYS_PCT_RANGE1 smallint NOT NULL
		($13)::smallint, 	-- $13: MAX_DAYS_PCT_RANGE2 smallint NOT NULL
		($14)::decimal, 	-- $14: PCT_RANGE1 DECIMAL(38,0) NOT NULL
		($15)::decimal, 	-- $15: PCT_RANGE2 DECIMAL(38,0) NOT NULL
		($16)::varchar, 	-- $16: EMAIL VARCHAR(8000) NULL
		($17)::boolean 	-- $17: IS_DMC BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgency/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgency_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgency_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgency_HIST;
SELECT * FROM STG.WINCHK_CollectionAgency_HIST;
[STATUS=tbd]
*/

-- // TABLE 192: CollectionAgencyPct
COPY INTO ARES.STG.SRC_CollectionAgencyPct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGENCY_PCT_KEY INT NOT NULL
		($2)::int, 	-- $2: COLLECTION_AGENCY_KEY INT NOT NULL
		($3)::smallint, 	-- $3: ASSIGNMENT_NUMBER SMALLINT NOT NULL
		($4)::decimal, 	-- $4: PCT DECIMAL(38,0) NOT NULL
		($5)::date, 	-- $5: START_DATE DATE NOT NULL
		($6)::boolean 	-- $6: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgencyPct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgencyPct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgencyPct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgencyPct_HIST;
SELECT * FROM STG.WINCHK_CollectionAgencyPct_HIST;
[STATUS=tbd]
*/

-- // TABLE 193: CollectionAgingConfig
COPY INTO ARES.STG.SRC_CollectionAgingConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGING_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: INITIAL_SPAN_DAYS SMALLINT NOT NULL
		($3)::smallint, 	-- $3: SUBSEQUENT_SPAN_DAYS SMALLINT NOT NULL
		($4)::smallint, 	-- $4: MAX_DAYS_INDEX smallint NOT NULL
		($5)::varchar 	-- $5: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgingConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgingConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgingConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgingConfig_HIST;
SELECT * FROM STG.WINCHK_CollectionAgingConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 194: CollectionAgingConfigDays
COPY INTO ARES.STG.SRC_CollectionAgingConfigDays_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGING_CONFIG_DAYS_KEY INT NOT NULL
		($2)::int, 	-- $2: COLLECTION_AGING_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: AGING_INDEX smallint NOT NULL
		($4)::smallint, 	-- $4: AGING_DAYS_FROM smallint NOT NULL
		($5)::smallint, 	-- $5: AGING_DAYS_TO smallint NOT NULL
		($6)::date, 	-- $6: AGING_DATE_FROM DATE NOT NULL
		($7)::date 	-- $7: AGING_DATE_TO DATE NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgingConfigDays/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgingConfigDays_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgingConfigDays_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgingConfigDays_HIST;
SELECT * FROM STG.WINCHK_CollectionAgingConfigDays_HIST;
[STATUS=tbd]
*/

-- // TABLE 195: CollectionAgingConfigDaysBackfill
COPY INTO ARES.STG.SRC_CollectionAgingConfigDaysBackfill_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGING_CONFIG_DAYS_BACKFILL_KEY INT NOT NULL
		($2)::date, 	-- $2: AS_OF_DATE DATE NOT NULL
		($3)::smallint, 	-- $3: INITIAL_SPAN_DAYS SMALLINT NOT NULL
		($4)::smallint, 	-- $4: SUBSEQUENT_SPAN_DAYS SMALLINT NOT NULL
		($5)::smallint, 	-- $5: MAX_DAYS_INDEX smallint NOT NULL
		($6)::varchar, 	-- $6: DESCRIPTION VARCHAR(8000) NOT NULL
		($7)::smallint, 	-- $7: AGING_INDEX smallint NOT NULL
		($8)::smallint, 	-- $8: AGING_DAYS_FROM smallint NOT NULL
		($9)::smallint, 	-- $9: AGING_DAYS_TO smallint NOT NULL
		($10)::date, 	-- $10: AGING_DATE_FROM DATE NOT NULL
		($11)::date 	-- $11: AGING_DATE_TO DATE NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgingConfigDaysBackfill/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgingConfigDaysBackfill_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgingConfigDaysBackfill_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgingConfigDaysBackfill_HIST;
SELECT * FROM STG.WINCHK_CollectionAgingConfigDaysBackfill_HIST;
[STATUS=tbd]
*/

-- // TABLE 196: CollectionAgingItem
COPY INTO ARES.STG.SRC_CollectionAgingItem_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGING_CONFIG_DAYS_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number 	-- $3: AGING_PAST_DUE_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgingItem/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgingItem_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgingItem_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgingItem_HIST;
SELECT * FROM STG.WINCHK_CollectionAgingItem_HIST;
[STATUS=tbd]
*/

-- // TABLE 197: CollectionAgingItemBackfill
COPY INTO ARES.STG.SRC_CollectionAgingItemBackfill_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_AGING_CONFIG_DAYS_BACKFILL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number 	-- $3: AGING_PAST_DUE_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionAgingItemBackfill/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionAgingItemBackfill_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionAgingItemBackfill_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionAgingItemBackfill_HIST;
SELECT * FROM STG.WINCHK_CollectionAgingItemBackfill_HIST;
[STATUS=tbd]
*/

-- // TABLE 198: CollectionMovement
COPY INTO ARES.STG.SRC_CollectionMovement_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_MOVEMENT_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NOT NULL
		($4)::int, 	-- $4: AUDIT_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: FOLLOWUP_DATE TIMESTAMP_LTZ NULL
		($6)::int, 	-- $6: COLLECTION_AGENCY_KEY INT NULL
		($7)::smallint, 	-- $7: ASSIGNMENT_NUMBER SMALLINT NULL
		($8)::char, 	-- $8: CR_TELLER CHAR(8000) NULL
		($9)::int 	-- $9: REASON_FOR_ARREARS_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionMovement/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionMovement_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionMovement_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionMovement_HIST;
SELECT * FROM STG.WINCHK_CollectionMovement_HIST;
[STATUS=tbd]
*/

-- // TABLE 199: CollectionNote
COPY INTO ARES.STG.SRC_CollectionNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: RISREPT_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::varchar, 	-- $4: NOTE VARCHAR(8000) NOT NULL
		($5)::text, 	-- $5: RTF_NOTE text NOT NULL
		($6)::boolean, 	-- $6: IS_FLASH BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: DELETED_BY CHAR(8000) NULL
		($10)::int, 	-- $10: NEW_COLLECTION_NOTE_KEY INT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($12)::char, 	-- $12: ENTERED_BY CHAR(8000) NOT NULL
		($13)::int, 	-- $13: NOTE_TYPE_KEY INT NOT NULL
		($14)::date 	-- $14: FLASH_EXPIRATION_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionNote_HIST;
SELECT * FROM STG.WINCHK_CollectionNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 200: CollectionSettlement
COPY INTO ARES.STG.SRC_CollectionSettlement_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_SETTLEMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: RISREPT_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PAYMENT_KEY INT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::date, 	-- $6: DATE_PAID DATE NULL
		($7)::boolean, 	-- $7: IS_PENDING BOOLEAN NOT NULL
		($8)::date, 	-- $8: DATE_PENDING DATE NULL
		($9)::number, 	-- $9: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: SETTLEMENT_AMT NUMBER(10,4) NOT NULL
		($11)::int, 	-- $11: SETTLEMENT_REASON INT NOT NULL
		($12)::boolean, 	-- $12: IS_CANCELLED BOOLEAN NOT NULL
		($13)::date, 	-- $13: DATE_CANCELLED DATE NULL
		($14)::char 	-- $14: CANCELLED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionSettlement/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionSettlement_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionSettlement_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionSettlement_HIST;
SELECT * FROM STG.WINCHK_CollectionSettlement_HIST;
[STATUS=tbd]
*/

-- // TABLE 201: CollectionSettlementReason
COPY INTO ARES.STG.SRC_CollectionSettlementReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_SETTLEMENT_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionSettlementReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionSettlementReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionSettlementReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionSettlementReason_HIST;
SELECT * FROM STG.WINCHK_CollectionSettlementReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 202: CollectionStream
COPY INTO ARES.STG.SRC_CollectionStream_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COLLECTION_STREAM_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: ADD_TO_COLL_DATE TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: ADD_TO_COLL_TD_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: REM_FROM_COLL_DATE TIMESTAMP_LTZ NULL
		($6)::int, 	-- $6: REM_FROM_COLL_TD_KEY INT NULL
		($7)::date, 	-- $7: PRIOR_DUE_DATE DATE NOT NULL
		to_timestamp_ntz($8) 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CollectionStream/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CollectionStream_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CollectionStream_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CollectionStream_HIST;
SELECT * FROM STG.WINCHK_CollectionStream_HIST;
[STATUS=tbd]
*/

-- // TABLE 203: Communication
COPY INTO ARES.STG.SRC_Communication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_GROUP_KEY INT NOT NULL
		($3)::varchar, 	-- $3: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: ENTERED_DATE datetime NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NULL
		($8)::datetime 	-- $8: UPDATED_DATE datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/Communication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Communication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Communication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Communication_HIST;
SELECT * FROM STG.WINCHK_Communication_HIST;
[STATUS=tbd]
*/

-- // TABLE 204: CommunicationCommunicationEvent
COPY INTO ARES.STG.SRC_CommunicationCommunicationEvent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_COMMUNICATION_EVENT_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_KEY INT NOT NULL
		($3)::int 	-- $3: COMMUNICATION_EVENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationCommunicationEvent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationCommunicationEvent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationCommunicationEvent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationCommunicationEvent_HIST;
SELECT * FROM STG.WINCHK_CommunicationCommunicationEvent_HIST;
[STATUS=tbd]
*/

-- // TABLE 205: CommunicationConsentConfig
COPY INTO ARES.STG.SRC_CommunicationConsentConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_CONSENT_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: CHANNEL_KEY INT NOT NULL
		($3)::int, 	-- $3: COMMUNICATION_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: BUSINESS_ENTITY_KEY INT NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NULL
		($6)::datetime, 	-- $6: UPDATED_DATE datetime NULL
		($7)::int, 	-- $7: DOCUMENT_TYPE INT NULL
		($8)::boolean, 	-- $8: IS_CHANGEABLE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: QUEUE_FOR_THIRD_PARTY_PROCESSING BOOLEAN NOT NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationConsentConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationConsentConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationConsentConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationConsentConfig_HIST;
SELECT * FROM STG.WINCHK_CommunicationConsentConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 206: CommunicationConsentConfigCommunicationEvent
COPY INTO ARES.STG.SRC_CommunicationConsentConfigCommunicationEvent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_CONSENT_CONFIG_COMMUNICATION_EVENT_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_CONSENT_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: COMMUNICATION_EVENT_KEY INT NOT NULL
		($4)::boolean 	-- $4: CONSENT BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationConsentConfigCommunicationEvent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationConsentConfigCommunicationEvent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationConsentConfigCommunicationEvent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationConsentConfigCommunicationEvent_HIST;
SELECT * FROM STG.WINCHK_CommunicationConsentConfigCommunicationEvent_HIST;
[STATUS=tbd]
*/

-- // TABLE 207: CommunicationConsentConfigHistory
COPY INTO ARES.STG.SRC_CommunicationConsentConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_CONSENT_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: CHANNEL_KEY INT NOT NULL
		($3)::int, 	-- $3: COMMUNICATION_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: BUSINESS_ENTITY_KEY INT NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NULL
		($6)::datetime, 	-- $6: UPDATED_DATE datetime NULL
		($7)::int, 	-- $7: DOCUMENT_TYPE INT NULL
		($8)::boolean, 	-- $8: IS_CHANGEABLE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: QUEUE_FOR_THIRD_PARTY_PROCESSING BOOLEAN NOT NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationConsentConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationConsentConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationConsentConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationConsentConfigHistory_HIST;
SELECT * FROM STG.WINCHK_CommunicationConsentConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 208: CommunicationConsentThirdPartyQueue
COPY INTO ARES.STG.SRC_CommunicationConsentThirdPartyQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_CONSENT_THIRD_PARTY_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: BUSINESS_ENTITY_KEY INT NOT NULL
		($4)::int, 	-- $4: COMMUNICATION_TYPE_KEY INT NOT NULL
		($5)::int, 	-- $5: CHANNEL_KEY INT NOT NULL
		($6)::boolean 	-- $6: CONSENT_STATUS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationConsentThirdPartyQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationConsentThirdPartyQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationConsentThirdPartyQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationConsentThirdPartyQueue_HIST;
SELECT * FROM STG.WINCHK_CommunicationConsentThirdPartyQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 209: CommunicationEvent
COPY INTO ARES.STG.SRC_CommunicationEvent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_EVENT_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationEvent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationEvent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationEvent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationEvent_HIST;
SELECT * FROM STG.WINCHK_CommunicationEvent_HIST;
[STATUS=tbd]
*/

-- // TABLE 210: CommunicationEventQueue
COPY INTO ARES.STG.SRC_CommunicationEventQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_EVENT_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_EVENT_KEY INT NOT NULL
		($3)::int, 	-- $3: CHANNEL_KEY INT NULL
		($4)::int, 	-- $4: LOAN_APPLICATION_KEY INT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NULL
		($6)::int, 	-- $6: TRANS_DETAIL_KEY INT NULL
		($7)::int, 	-- $7: VISITOR_KEY INT NOT NULL
		to_timestamp_ntz($8), 	-- $8: CREATED_DATE TIMESTAMP_LTZ NOT NULL
		($9)::date, 	-- $9: SEND_DATE DATE NOT NULL
		to_timestamp_ntz($10), 	-- $10: PROCESSED_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($11), 	-- $11: CANCELLED_DATE TIMESTAMP_LTZ NULL
		($12)::char, 	-- $12: CANCELLED_BY CHAR(8000) NULL
		($13)::bigint, 	-- $13: SENT_MESSAGE_KEY BIGINT NULL
		($14)::int 	-- $14: LETTER_NOTIFICATION_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationEventQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationEventQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationEventQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationEventQueue_HIST;
SELECT * FROM STG.WINCHK_CommunicationEventQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 211: CommunicationEventQueueValue
COPY INTO ARES.STG.SRC_CommunicationEventQueueValue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_EVENT_QUEUE_VALUE_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_EVENT_QUEUE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: KEY VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationEventQueueValue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationEventQueueValue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationEventQueueValue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationEventQueueValue_HIST;
SELECT * FROM STG.WINCHK_CommunicationEventQueueValue_HIST;
[STATUS=tbd]
*/

-- // TABLE 212: CommunicationGroup
COPY INTO ARES.STG.SRC_CommunicationGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_GROUP_KEY INT NOT NULL
		($2)::int, 	-- $2: BUSINESS_ENTITY_KEY INT NOT NULL
		($3)::int, 	-- $3: COMMUNICATION_TYPE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: DESCRIPTION VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: USER_HELP_MESSAGE VARCHAR(8000) NULL
		($7)::varchar 	-- $7: DISPLAY_GROUP_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationGroup_HIST;
SELECT * FROM STG.WINCHK_CommunicationGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 213: CommunicationGroupChannel
COPY INTO ARES.STG.SRC_CommunicationGroupChannel_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_GROUP_CHANNEL_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_GROUP_KEY INT NOT NULL
		($3)::int, 	-- $3: CHANNEL_KEY INT NOT NULL
		($4)::boolean, 	-- $4: DEFAULT_PREFERENCE BOOLEAN NOT NULL
		($5)::boolean 	-- $5: IS_CHANGEABLE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationGroupChannel/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationGroupChannel_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationGroupChannel_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationGroupChannel_HIST;
SELECT * FROM STG.WINCHK_CommunicationGroupChannel_HIST;
[STATUS=tbd]
*/

-- // TABLE 214: CommunicationGroupChannelVisibility
COPY INTO ARES.STG.SRC_CommunicationGroupChannelVisibility_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_GROUP_CHANNEL_KEY INT NOT NULL
		($2)::smallint 	-- $2: TELLER_TYPE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationGroupChannelVisibility/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationGroupChannelVisibility_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationGroupChannelVisibility_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationGroupChannelVisibility_HIST;
SELECT * FROM STG.WINCHK_CommunicationGroupChannelVisibility_HIST;
[STATUS=tbd]
*/

-- // TABLE 215: CommunicationLocation
COPY INTO ARES.STG.SRC_CommunicationLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_LOCATION_KEY INT NOT NULL
		($2)::int, 	-- $2: COMMUNICATION_KEY INT NOT NULL
		($3)::smallint 	-- $3: LOCATION_KEY smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationLocation_HIST;
SELECT * FROM STG.WINCHK_CommunicationLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 216: CommunicationPreferenceOverride
COPY INTO ARES.STG.SRC_CommunicationPreferenceOverride_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_GROUP_CHANNEL_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::boolean 	-- $3: OVERRIDE_PREFERENCE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationPreferenceOverride/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationPreferenceOverride_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationPreferenceOverride_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationPreferenceOverride_HIST;
SELECT * FROM STG.WINCHK_CommunicationPreferenceOverride_HIST;
[STATUS=tbd]
*/

-- // TABLE 217: CommunicationType
COPY INTO ARES.STG.SRC_CommunicationType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMMUNICATION_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CommunicationType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CommunicationType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CommunicationType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CommunicationType_HIST;
SELECT * FROM STG.WINCHK_CommunicationType_HIST;
[STATUS=tbd]
*/

-- // TABLE 218: Company
COPY INTO ARES.STG.SRC_Company_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_LOCATION_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: GL_ACCT_LOCATION_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: LOANS_PRIMARY_BANK_GL_ACCT INT NOT NULL
		($4)::int, 	-- $4: CASHED_CHECKS_PRIMARY_BANK_GL_ACCT INT NOT NULL
		($5)::int, 	-- $5: AD_ASTRA_CENTRAL_TRUST_GL_ACCT INT NOT NULL
		($6)::int, 	-- $6: CANADA_PAD_BANK_CLEARING_GL_ACCT INT NOT NULL
		($7)::int, 	-- $7: CANADA_BAD_DEBT_GL_ACCT INT NOT NULL
		($8)::int, 	-- $8: CANADA_USD_CASHED_CHECKS_GL_ACCT INT NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Company/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Company_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Company_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Company_HIST;
SELECT * FROM STG.WINCHK_Company_HIST;
[STATUS=tbd]
*/

-- // TABLE 219: CompanyBankAccount
COPY INTO ARES.STG.SRC_CompanyBankAccount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMPANY_BANK_ACCOUNT_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyBankAccount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyBankAccount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyBankAccount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyBankAccount_HIST;
SELECT * FROM STG.WINCHK_CompanyBankAccount_HIST;
[STATUS=tbd]
*/

-- // TABLE 220: CompanyBankAccountGLAcct
COPY INTO ARES.STG.SRC_CompanyBankAccountGLAcct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMPANY_BANK_ACCOUNT_GL_ACCT_KEY INT NOT NULL
		($2)::int, 	-- $2: COMPANY_BANK_ACCOUNT_KEY INT NOT NULL
		($3)::int, 	-- $3: PAYMENT_METHOD_KEY INT NOT NULL
		($4)::int, 	-- $4: TRANSACTION_DIRECTION_KEY INT NOT NULL
		($5)::int 	-- $5: GL_ACCT_NUM INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyBankAccountGLAcct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyBankAccountGLAcct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyBankAccountGLAcct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyBankAccountGLAcct_HIST;
SELECT * FROM STG.WINCHK_CompanyBankAccountGLAcct_HIST;
[STATUS=tbd]
*/

-- // TABLE 221: CompanyCredential
COPY INTO ARES.STG.SRC_CompanyCredential_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMPANY_CREDENTIAL_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: COMPANY_CREDENTIAL_TYPE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: ENVIRONMENT_NAME VARCHAR(8000) NOT NULL
		($5)::varchar 	-- $5: VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyCredential/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyCredential_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyCredential_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyCredential_HIST;
SELECT * FROM STG.WINCHK_CompanyCredential_HIST;
[STATUS=tbd]
*/

-- // TABLE 222: CompanyCredentialType
COPY INTO ARES.STG.SRC_CompanyCredentialType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMPANY_CREDENTIAL_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_PROTECTED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyCredentialType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyCredentialType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyCredentialType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyCredentialType_HIST;
SELECT * FROM STG.WINCHK_CompanyCredentialType_HIST;
[STATUS=tbd]
*/

-- // TABLE 223: CompanyDetail
COPY INTO ARES.STG.SRC_CompanyDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::varchar, 	-- $2: ADDRESS VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CROSS_STREETS VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DIRECTIONS VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: NEWS_FLASH VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: FAX VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ALTERNATE_HOURS VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: STORE_EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($9)::decimal, 	-- $9: SCORED_LOAN_APP_SUCCESSFUL_LOAN_PCT DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyDetail_HIST;
SELECT * FROM STG.WINCHK_CompanyDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 224: CompanyDetailHistory
COPY INTO ARES.STG.SRC_CompanyDetailHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::varchar, 	-- $2: ADDRESS VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CROSS_STREETS VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DIRECTIONS VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: NEWS_FLASH VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: FAX VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ALTERNATE_HOURS VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: STORE_EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($9)::decimal, 	-- $9: SCORED_LOAN_APP_SUCCESSFUL_LOAN_PCT DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyDetailHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyDetailHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyDetailHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyDetailHistory_HIST;
SELECT * FROM STG.WINCHK_CompanyDetailHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 225: CompanyDocument
COPY INTO ARES.STG.SRC_CompanyDocument_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::varchar 	-- $2: CUSTOMER_REGISTRATION_DOCUMENT_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyDocument/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyDocument_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyDocument_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyDocument_HIST;
SELECT * FROM STG.WINCHK_CompanyDocument_HIST;
[STATUS=tbd]
*/

-- // TABLE 226: CompanyExpenseType
COPY INTO ARES.STG.SRC_CompanyExpenseType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMPANY_EXPENSE_TYPE_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int 	-- $3: EXPENSE_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyExpenseType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyExpenseType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyExpenseType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyExpenseType_HIST;
SELECT * FROM STG.WINCHK_CompanyExpenseType_HIST;
[STATUS=tbd]
*/

-- // TABLE 227: CompanyHistory
COPY INTO ARES.STG.SRC_CompanyHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_BASE_SEGMENT_TRACE_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: EXECUTION_ORDER INT NOT NULL
		($4)::varchar, 	-- $4: EXECUTION_HASH VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: MEMBER_NAME VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: LINE_NUMBER INT NOT NULL
		($7)::date, 	-- $7: DATE_FIRST_DELINQUENCY DATE NULL
		($8)::char, 	-- $8: ACCOUNT_STATUS CHAR(8000) NULL
		($9)::char 	-- $9: PAYMENT_RATING CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CompanyHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CompanyHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CompanyHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CompanyHistory_HIST;
SELECT * FROM STG.WINCHK_CompanyHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 228: ComponentOneReportLog
COPY INTO ARES.STG.SRC_ComponentOneReportLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COMPONENT_ONE_REPORT_LOG_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: TELLER_ID_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::varchar, 	-- $5: FILEPATH VARCHAR(8000) NOT NULL
		($6)::varchar 	-- $6: REPORT_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ComponentOneReportLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ComponentOneReportLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ComponentOneReportLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ComponentOneReportLog_HIST;
SELECT * FROM STG.WINCHK_ComponentOneReportLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 229: ConfigurableQuestion
COPY INTO ARES.STG.SRC_ConfigurableQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($2)::int, 	-- $2: RESPONSE_CLR_DATA_TYPE_KEY INT NOT NULL
		($3)::int, 	-- $3: CONFIGURABLE_QUESTION_CATEGORY_KEY INT NOT NULL
		($4)::varchar, 	-- $4: QUESTION_TEXT VARCHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: ALLOW_MULTIPLE_RESPONSES BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: QUESTION_HELP_TEXT VARCHAR(8000) NOT NULL
		($7)::int 	-- $7: RESPONSE_MAX_LENGTH INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ConfigurableQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ConfigurableQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ConfigurableQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ConfigurableQuestion_HIST;
SELECT * FROM STG.WINCHK_ConfigurableQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 230: ConfigurableQuestionAllowableResponse
COPY INTO ARES.STG.SRC_ConfigurableQuestionAllowableResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CONFIGURABLE_QUESTION_ALLOWABLE_RESPONSE_KEY INT NOT NULL
		($2)::int, 	-- $2: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($3)::varchar, 	-- $3: RESPONSE VARCHAR(8000) NOT NULL
		($4)::int 	-- $4: DISPLAY_ORDER INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ConfigurableQuestionAllowableResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ConfigurableQuestionAllowableResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ConfigurableQuestionAllowableResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ConfigurableQuestionAllowableResponse_HIST;
SELECT * FROM STG.WINCHK_ConfigurableQuestionAllowableResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 231: ConfigurableQuestionCategory
COPY INTO ARES.STG.SRC_ConfigurableQuestionCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CONFIGURABLE_QUESTION_CATEGORY_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ConfigurableQuestionCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ConfigurableQuestionCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ConfigurableQuestionCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ConfigurableQuestionCategory_HIST;
SELECT * FROM STG.WINCHK_ConfigurableQuestionCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 232: ConfigurableQuestionNumericRange
COPY INTO ARES.STG.SRC_ConfigurableQuestionNumericRange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CONFIGURABLE_QUESTION_NUMERIC_RANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($3)::decimal, 	-- $3: MIN_VALUE DECIMAL(38,0) NULL
		($4)::decimal, 	-- $4: MAX_VALUE DECIMAL(38,0) NULL
		($5)::boolean 	-- $5: IS_POSITIVE_RESPONSE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ConfigurableQuestionNumericRange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ConfigurableQuestionNumericRange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ConfigurableQuestionNumericRange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ConfigurableQuestionNumericRange_HIST;
SELECT * FROM STG.WINCHK_ConfigurableQuestionNumericRange_HIST;
[STATUS=tbd]
*/

-- // TABLE 233: ConfigurableQuestionSet
COPY INTO ARES.STG.SRC_ConfigurableQuestionSet_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CONFIGURABLE_QUESTION_SET_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ConfigurableQuestionSet/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ConfigurableQuestionSet_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ConfigurableQuestionSet_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ConfigurableQuestionSet_HIST;
SELECT * FROM STG.WINCHK_ConfigurableQuestionSet_HIST;
[STATUS=tbd]
*/

-- // TABLE 234: ConfigurableQuestionSetConfigurableQuestion
COPY INTO ARES.STG.SRC_ConfigurableQuestionSetConfigurableQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CONFIGURABLE_QUESTION_SET_KEY INT NOT NULL
		($2)::int, 	-- $2: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($3)::boolean, 	-- $3: IS_RESPONSE_REQUIRED BOOLEAN NOT NULL
		($4)::smallint 	-- $4: DISPLAY_ORDER SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ConfigurableQuestionSetConfigurableQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ConfigurableQuestionSetConfigurableQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ConfigurableQuestionSetConfigurableQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ConfigurableQuestionSetConfigurableQuestion_HIST;
SELECT * FROM STG.WINCHK_ConfigurableQuestionSetConfigurableQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 235: Country
COPY INTO ARES.STG.SRC_Country_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COUNTRY_KEY INT NOT NULL
		($2)::char, 	-- $2: COUNTRY_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: CURRENCY_KEY INT NULL
		($5)::boolean, 	-- $5: IS_ENABLED BOOLEAN NOT NULL
		($6)::char, 	-- $6: ISO_2_CHAR_COUNTRY_CODE CHAR(8000) NOT NULL
		($7)::smallint 	-- $7: CALLING_CODE smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/Country/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Country_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Country_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Country_HIST;
SELECT * FROM STG.WINCHK_Country_HIST;
[STATUS=tbd]
*/

-- // TABLE 236: CourtesyPayout
COPY INTO ARES.STG.SRC_CourtesyPayout_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: COURTESY_PAYOUT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::number, 	-- $5: COURTESY_PAYOUT_AMT NUMBER(10,4) NOT NULL
		($6)::char, 	-- $6: COURTESY_PAYOUT_TYPE CHAR(8000) NOT NULL
		($7)::int, 	-- $7: SERVICE_TRANS_KEY INT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::smallint, 	-- $10: LOCATION smallint NOT NULL
		($11)::varchar, 	-- $11: NOTE VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: RTF_NOTE VARCHAR(8000) NOT NULL
		($13)::int 	-- $13: CASHED_CHECK_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CourtesyPayout/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CourtesyPayout_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CourtesyPayout_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CourtesyPayout_HIST;
SELECT * FROM STG.WINCHK_CourtesyPayout_HIST;
[STATUS=tbd]
*/

-- // TABLE 237: CourtesyPayoutType
COPY INTO ARES.STG.SRC_CourtesyPayoutType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: COURTESY_PAYOUT_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: ENUM_CODE CHAR(8000) NOT NULL
		($4)::varchar 	-- $4: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CourtesyPayoutType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CourtesyPayoutType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CourtesyPayoutType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CourtesyPayoutType_HIST;
SELECT * FROM STG.WINCHK_CourtesyPayoutType_HIST;
[STATUS=tbd]
*/

-- // TABLE 238: CpiuDetail
COPY INTO ARES.STG.SRC_CpiuDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CPIU_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: CPIU_MASTER_KEY INT NOT NULL
		($3)::varchar, 	-- $3: AGENCY_REFERENCE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: REFERENCE VARCHAR(8000) NULL
		($5)::int, 	-- $5: RISREPT_KEY INT NULL
		($6)::int, 	-- $6: CUSTOMER_KEY INT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NULL
		($8)::varchar, 	-- $8: NOTE VARCHAR(8000) NULL
		($9)::number, 	-- $9: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($10)::date, 	-- $10: PAYMENT_DATE DATE NOT NULL
		($11)::varchar, 	-- $11: CHECK_NO VARCHAR(8000) NULL
		($12)::boolean, 	-- $12: POSTED BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: POSTED_DATETIME TIMESTAMP_LTZ NULL
		($14)::char, 	-- $14: POSTED_TELLER CHAR(8000) NULL
		($15)::int, 	-- $15: TRANS_DETAIL_KEY INT NULL
		($16)::varchar, 	-- $16: ERROR_MSG VARCHAR(8000) NULL
		($17)::boolean, 	-- $17: IS_PIF BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: IS_SIF BOOLEAN NOT NULL
		($19)::varchar, 	-- $19: CLIENT_NAME VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: CLIENT_ADDRESS VARCHAR(8000) NULL
		($21)::varchar, 	-- $21: CLIENT_POSTCODE VARCHAR(8000) NULL
		($22)::date, 	-- $22: CLIENT_DOB DATE NULL
		($23)::boolean, 	-- $23: DO_NOT_POST BOOLEAN NOT NULL
		to_timestamp_ntz($24), 	-- $24: DO_NOT_POST_DATETIME TIMESTAMP_LTZ NULL
		($25)::char 	-- $25: DO_NOT_POST_TELLER CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CpiuDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CpiuDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CpiuDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CpiuDetail_HIST;
SELECT * FROM STG.WINCHK_CpiuDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 239: CpiuExceptionReport
COPY INTO ARES.STG.SRC_CpiuExceptionReport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CPIU_EXCEPTION_REPORT_KEY INT NOT NULL
		($2)::int, 	-- $2: CPIU_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATETIME_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::varchar, 	-- $4: MESSAGE VARCHAR(8000) NOT NULL
		($5)::smallint 	-- $5: EXCEPTION_TYPE smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CpiuExceptionReport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CpiuExceptionReport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CpiuExceptionReport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CpiuExceptionReport_HIST;
SELECT * FROM STG.WINCHK_CpiuExceptionReport_HIST;
[STATUS=tbd]
*/

-- // TABLE 240: CpiuMaster
COPY INTO ARES.STG.SRC_CpiuMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CPIU_MASTER_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: IMPORTED_DATETIME TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: FILE_NAME VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: COLLECTION_AGENCY_KEY INT NOT NULL
		($6)::boolean, 	-- $6: FINISHED BOOLEAN NOT NULL
		($7)::char, 	-- $7: FINISHED_BY CHAR(8000) NULL
		to_timestamp_ntz($8), 	-- $8: FINISHED_DATETIME TIMESTAMP_LTZ NULL
		($9)::boolean, 	-- $9: LOCKED BOOLEAN NOT NULL
		($10)::char, 	-- $10: LOCKED_BY CHAR(8000) NULL
		to_timestamp_ntz($11) 	-- $11: LOCKED_DATETIME TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/CpiuMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CpiuMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CpiuMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CpiuMaster_HIST;
SELECT * FROM STG.WINCHK_CpiuMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 241: CreditCardAttempts
COPY INTO ARES.STG.SRC_CreditCardAttempts_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_TRANS_KEY INT NOT NULL
		($2)::boolean, 	-- $2: PAID BOOLEAN NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::smallint, 	-- $4: TRANS_TYPE SMALLINT NOT NULL
		($5)::boolean, 	-- $5: IS_RECURRING BOOLEAN NOT NULL
		($6)::int, 	-- $6: CARD_NUMBER_TOKEN INT NOT NULL
		($7)::int, 	-- $7: BIN INT NOT NULL
		($8)::smallint 	-- $8: CARD_NUMBER_LAST_FOUR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardAttempts/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardAttempts_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardAttempts_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardAttempts_HIST;
SELECT * FROM STG.WINCHK_CreditCardAttempts_HIST;
[STATUS=tbd]
*/

-- // TABLE 242: CreditCardBlock
COPY INTO ARES.STG.SRC_CreditCardBlock_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_BLOCK_KEY INT NOT NULL
		($2)::int, 	-- $2: BLOCK_REASON_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NULL
		($4)::smallint, 	-- $4: CREDIT_CARD_RESULT_CODE_KEY smallint NULL
		($5)::int, 	-- $5: COUNT_AT_BLOCK INT NOT NULL
		($6)::int, 	-- $6: CARD_NUMBER_TOKEN INT NOT NULL
		($7)::int, 	-- $7: BIN INT NOT NULL
		($8)::smallint, 	-- $8: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($9)::int 	-- $9: TELLER_ID_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardBlock/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardBlock_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardBlock_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardBlock_HIST;
SELECT * FROM STG.WINCHK_CreditCardBlock_HIST;
[STATUS=tbd]
*/

-- // TABLE 243: CreditCardBrand
COPY INTO ARES.STG.SRC_CreditCardBrand_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_CARD_BRAND_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: BRAND_NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: BRAND_DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardBrand/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardBrand_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardBrand_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardBrand_HIST;
SELECT * FROM STG.WINCHK_CreditCardBrand_HIST;
[STATUS=tbd]
*/

-- // TABLE 244: CreditCardResultCode
COPY INTO ARES.STG.SRC_CreditCardResultCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_CARD_RESULT_CODE_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: RESULT_CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: RESULT_TEXT VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: MARK_CARD_INVALID BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: BLOCK_CARD BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_APPROVED BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_SYSTEM_ERROR BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: MARK_CARD_EXPIRED BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: CAN_SECURE_INTERNET_LOAN BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: CAN_SECURE_STORE_LOAN BOOLEAN NOT NULL
		($11)::datetime, 	-- $11: DATE_ENTERED datetime NOT NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NOT NULL
		($13)::datetime, 	-- $13: DATE_UPDATED datetime NULL
		($14)::char, 	-- $14: UPDATED_BY CHAR(8000) NULL
		($15)::boolean, 	-- $15: IS_AV_APPROVED BOOLEAN NOT NULL
		($16)::smallint, 	-- $16: CREDIT_CARD_VENDOR_KEY SMALLINT NULL
		($17)::varchar, 	-- $17: RESULT_DESCRIPTION VARCHAR(8000) NULL
		($18)::smallint, 	-- $18: RESULT_CODE_TYPE_ID SMALLINT NULL
		($19)::boolean, 	-- $19: MARK_CREDIT_CARD BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: CHARGE_NSF_FEE BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: INCREMENT_NSF_COUNT BOOLEAN NOT NULL
		($22)::boolean 	-- $22: RESET_NSF_COUNT BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardResultCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardResultCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardResultCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardResultCode_HIST;
SELECT * FROM STG.WINCHK_CreditCardResultCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 245: CreditCardResultCodeEdit
COPY INTO ARES.STG.SRC_CreditCardResultCodeEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_RESULT_CODE_EDIT_KEY INT NOT NULL
		($2)::smallint, 	-- $2: CREDIT_CARD_RESULT_CODE_KEY smallint NOT NULL
		($3)::varchar, 	-- $3: FIELD_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: OLD_VALUE VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: NEW_VALUE VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($7) 	-- $7: LAST_MODIFIED_DATE TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardResultCodeEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardResultCodeEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardResultCodeEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardResultCodeEdit_HIST;
SELECT * FROM STG.WINCHK_CreditCardResultCodeEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 246: CreditCardResultCodeType
COPY INTO ARES.STG.SRC_CreditCardResultCodeType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: RESULT_CODE_TYPE_ID SMALLINT NOT NULL
		($2)::varchar 	-- $2: RESULT_CODE_TYPE_DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardResultCodeType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardResultCodeType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardResultCodeType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardResultCodeType_HIST;
SELECT * FROM STG.WINCHK_CreditCardResultCodeType_HIST;
[STATUS=tbd]
*/

-- // TABLE 247: CreditCards
COPY INTO ARES.STG.SRC_CreditCards_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CreditCard_Key INT NOT NULL
		($2)::int, 	-- $2: Customer_Key INT NOT NULL
		($3)::varchar, 	-- $3: NameOnCard VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: ExpMonth SMALLINT NOT NULL
		($5)::int, 	-- $5: ExpYear INT NOT NULL
		($6)::smallint, 	-- $6: LOCATION smallint NOT NULL
		($7)::char, 	-- $7: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: LASTUPDATE TIMESTAMP_LTZ NULL
		($9)::boolean, 	-- $9: CC_STATUS BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: DELETED BOOLEAN NOT NULL
		($11)::varchar, 	-- $11: LastResult VARCHAR(8000) NULL
		($12)::boolean, 	-- $12: Expired BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: CvvInvalid BOOLEAN NOT NULL
		to_timestamp_ntz($14), 	-- $14: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($15)::char, 	-- $15: ENTERED_BY CHAR(8000) NOT NULL
		($16)::boolean, 	-- $16: PINLESS_ELIGIBLE BOOLEAN NOT NULL
		($17)::date, 	-- $17: RICC_EFF_DATE DATE NULL
		($18)::smallint, 	-- $18: CARD_BRAND SMALLINT NOT NULL
		($19)::smallint, 	-- $19: CARD_TYPE SMALLINT NOT NULL
		($20)::varchar, 	-- $20: BILLING_ADDRESS1 VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: BILLING_CITY VARCHAR(8000) NOT NULL
		($22)::char, 	-- $22: BILLING_STATE CHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: BILLING_ZIPCODE VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: BILLING_COUNTY VARCHAR(8000) NOT NULL
		($25)::char, 	-- $25: BILLING_COUNTRY CHAR(8000) NOT NULL
		to_timestamp_ntz($26), 	-- $26: DATE_DELETED TIMESTAMP_LTZ NULL
		($27)::char, 	-- $27: DELETED_BY CHAR(8000) NULL
		($28)::char, 	-- $28: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: BILLING_ADDR_STREET VARCHAR(8000) NOT NULL
		($30)::varchar, 	-- $30: BILLING_FLAT_NUM VARCHAR(8000) NOT NULL
		($31)::varchar, 	-- $31: BILLING_BUILDING_NUM VARCHAR(8000) NOT NULL
		($32)::varchar, 	-- $32: BILLING_BUILDING_NAME VARCHAR(8000) NOT NULL
		($33)::varchar, 	-- $33: ALIAS_ID VARCHAR(8000) NULL
		($34)::boolean, 	-- $34: MAESTRO_SWITCH BOOLEAN NOT NULL
		($35)::boolean, 	-- $35: ELECTRON BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: PROCESSOR_FLAGGED_CREDIT BOOLEAN NOT NULL
		($37)::int, 	-- $37: CARD_TOKEN INT NOT NULL
		($38)::int, 	-- $38: CARD_NUMBER_TOKEN INT NOT NULL
		($39)::int, 	-- $39: BIN INT NOT NULL
		($40)::smallint, 	-- $40: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($41)::varchar, 	-- $41: BILLING_ADDRESS_CSZ VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: BILLING_ADDRESS_LINE VARCHAR(8000) NULL
		($43)::varchar, 	-- $43: BILLING_ADDRESS_LINE_1 VARCHAR(8000) NULL
		($44)::varchar, 	-- $44: BILLING_ADDRESS_LINE_2 VARCHAR(8000) NULL
		($45)::varchar 	-- $45: BILLING_ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCards/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCards_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCards_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCards_HIST;
SELECT * FROM STG.WINCHK_CreditCards_HIST;
[STATUS=tbd]
*/

-- // TABLE 248: CreditCardsEdit
COPY INTO ARES.STG.SRC_CreditCardsEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDITCARDSEDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDITCARD_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::varchar, 	-- $7: FIELD_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: OLD_VALUE VARCHAR(8000) NOT NULL
		($9)::varchar 	-- $9: NEW_VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardsEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardsEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardsEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardsEdit_HIST;
SELECT * FROM STG.WINCHK_CreditCardsEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 249: CreditCardTrans
COPY INTO ARES.STG.SRC_CreditCardTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::char, 	-- $5: REQ_FILE_TYPE CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: EXP_MONTH SMALLINT NULL
		($7)::smallint, 	-- $7: EXP_YEAR smallint NULL
		($8)::varchar, 	-- $8: CCARD_NAME VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: VENDOR_TRACKER_DATA VARCHAR(8000) NULL
		($10)::number, 	-- $10: CHARGE_AMT NUMBER(10,4) NOT NULL
		($11)::int, 	-- $11: REFUND_TRANS_DETAIL_KEY INT NULL
		($12)::int, 	-- $12: TRANS_DETAIL_KEY INT NULL
		($13)::boolean, 	-- $13: SUCCESS_FLAG BOOLEAN NULL
		($14)::varchar, 	-- $14: ERROR_MSG VARCHAR(8000) NULL
		($15)::int, 	-- $15: TRANS_POS_KEY INT NULL
		($16)::int, 	-- $16: RISREPT_KEY INT NULL
		($17)::varchar, 	-- $17: AUTH_CODE VARCHAR(8000) NULL
		($18)::int, 	-- $18: RITA_SEQUENCE_NUM INT NULL
		($19)::varchar, 	-- $19: RESULT_CODE VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: DECLINE_CODE VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: AVS_CODE VARCHAR(8000) NOT NULL
		($22)::char, 	-- $22: CVV_CODE CHAR(8000) NOT NULL
		($23)::number, 	-- $23: FEE_CHARGED_AMT NUMBER(10,4) NULL
		($24)::int, 	-- $24: LOAN_KEY INT NULL
		($25)::varchar, 	-- $25: VENDOR_RESPONSE VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: EPDQ_TRANS_ID VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: VENDOR_POST VARCHAR(8000) NULL
		($28)::smallint, 	-- $28: CREDIT_CARD_RESULT_CODE_KEY smallint NULL
		($29)::smallint, 	-- $29: CREDIT_CARD_VENDOR_KEY SMALLINT NULL
		($30)::int, 	-- $30: CARD_TOKEN INT NULL
		($31)::int, 	-- $31: CARD_NUMBER_TOKEN INT NULL
		($32)::int, 	-- $32: BIN INT NULL
		($33)::smallint, 	-- $33: CARD_NUMBER_LAST_FOUR smallint NULL
		($34)::varchar, 	-- $34: PSI_GATE_PAYMENT_TYPE VARCHAR(8000) NULL
		($35)::datetime, 	-- $35: DATE_ENTERED datetime NOT NULL
		($36)::bigint, 	-- $36: RITA_TROUTD BIGINT NULL
		($37)::int, 	-- $37: BATCH_EXECUTION_KEY INT NULL
		($38)::varchar 	-- $38: TRANSACTION_PROCESSOR_CONFIGS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardTrans_HIST;
SELECT * FROM STG.WINCHK_CreditCardTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 250: CreditCardTransRepostPayment
COPY INTO ARES.STG.SRC_CreditCardTransRepostPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: REPOST_TRANS_DETAIL_KEY INT NULL
		($4)::varchar, 	-- $4: REPOST_NOTE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardTransRepostPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardTransRepostPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardTransRepostPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardTransRepostPayment_HIST;
SELECT * FROM STG.WINCHK_CreditCardTransRepostPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 251: CreditCardVendor
COPY INTO ARES.STG.SRC_CreditCardVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_CARD_VENDOR_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: CC_VENDOR_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditCardVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditCardVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditCardVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditCardVendor_HIST;
SELECT * FROM STG.WINCHK_CreditCardVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 252: CreditLimitBumpUp
COPY INTO ARES.STG.SRC_CreditLimitBumpUp_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_LIMIT_BUMP_UP_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_BUMP_UP_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		($5)::int, 	-- $5: LAST_LOAN_KEY_FOR_BUMPUP INT NULL
		($6)::int, 	-- $6: LAST_LOAN_PAYMENT_KEY_FOR_BUMPUP INT NULL
		($7)::int, 	-- $7: LOAN_PRODUCT_KEY INT NULL
		($8)::char, 	-- $8: PRODUCT_TYPE CHAR(8000) NULL
		($9)::boolean, 	-- $9: BUMP_UP_APPROVED BOOLEAN NOT NULL
		($10)::number, 	-- $10: SCORING_APPROVAL_AMOUNT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: PREVIOUS_APPROVAL_AMOUNT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: NEW_APPROVAL_AMOUNT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: INCOME_AMOUNT NUMBER(10,4) NOT NULL
		($14)::decimal, 	-- $14: FINAL_SCORE DECIMAL(38,0) NOT NULL
		($15)::decimal, 	-- $15: SCORING_BUMP_MAX_PCT_OF_INCOME DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($16), 	-- $16: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($17)::char 	-- $17: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditLimitBumpUp/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditLimitBumpUp_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditLimitBumpUp_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditLimitBumpUp_HIST;
SELECT * FROM STG.WINCHK_CreditLimitBumpUp_HIST;
[STATUS=tbd]
*/

-- // TABLE 253: CreditLimitBumpUpReason
COPY INTO ARES.STG.SRC_CreditLimitBumpUpReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_LIMIT_BUMP_UP_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_LIMIT_BUMP_UP_KEY INT NOT NULL
		($3)::smallint 	-- $3: BUMP_UP_REASON_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditLimitBumpUpReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditLimitBumpUpReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditLimitBumpUpReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditLimitBumpUpReason_HIST;
SELECT * FROM STG.WINCHK_CreditLimitBumpUpReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 254: CreditLimitOffer
COPY INTO ARES.STG.SRC_CreditLimitOffer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_LIMIT_OFFER_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::number 	-- $4: CREDIT_LIMIT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditLimitOffer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditLimitOffer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditLimitOffer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditLimitOffer_HIST;
SELECT * FROM STG.WINCHK_CreditLimitOffer_HIST;
[STATUS=tbd]
*/

-- // TABLE 255: CreditLimitOfferAudit
COPY INTO ARES.STG.SRC_CreditLimitOfferAudit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_LIMIT_OFFER_AUDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number, 	-- $3: OFFER_CREDIT_LIMIT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::int, 	-- $6: CREDIT_LIMIT_OFFER_KEY INT NOT NULL
		($7)::boolean, 	-- $7: IS_ACCEPTED BOOLEAN NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ACCEPTED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: TELLER_ACCEPTED CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditLimitOfferAudit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditLimitOfferAudit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditLimitOfferAudit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditLimitOfferAudit_HIST;
SELECT * FROM STG.WINCHK_CreditLimitOfferAudit_HIST;
[STATUS=tbd]
*/

-- // TABLE 256: CreditLimitOfferDecline
COPY INTO ARES.STG.SRC_CreditLimitOfferDecline_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_LIMIT_OFFER_DECLINE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::number 	-- $5: CREDIT_LIMIT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditLimitOfferDecline/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditLimitOfferDecline_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditLimitOfferDecline_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditLimitOfferDecline_HIST;
SELECT * FROM STG.WINCHK_CreditLimitOfferDecline_HIST;
[STATUS=tbd]
*/

-- // TABLE 257: CreditReportingActivity
COPY INTO ARES.STG.SRC_CreditReportingActivity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ACTIVITY VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: CREDIT_REPORTING_STATUS_KEY INT NOT NULL
		($4)::boolean, 	-- $4: IS_DAILY_REPORTING_REQUIRED BOOLEAN NOT NULL
		($5)::smallint, 	-- $5: DAILY_REPORTING_DELAY_DAYS smallint NOT NULL
		($6)::boolean, 	-- $6: IS_ACTIVE BOOLEAN NOT NULL
		($7)::varchar, 	-- $7: ECOA_CODE VARCHAR(8000) NOT NULL
		($8)::boolean, 	-- $8: IS_SYSTEM_ACTIVITY BOOLEAN NOT NULL
		($9)::smallint, 	-- $9: MAX_REPORTING_DAYS smallint NOT NULL
		($10)::int 	-- $10: DISPUTE_ORDER INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingActivity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingActivity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingActivity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingActivity_HIST;
SELECT * FROM STG.WINCHK_CreditReportingActivity_HIST;
[STATUS=tbd]
*/

-- // TABLE 258: CreditReportingBaseSegment
COPY INTO ARES.STG.SRC_CreditReportingBaseSegment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_RUN_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::char, 	-- $7: REPORTING_INDICATOR CHAR(8000) NOT NULL
		($8)::boolean, 	-- $8: IS_EXPORTED BOOLEAN NOT NULL
		($9)::int, 	-- $9: ROLLOVER_LOAN_KEY INT NULL
		($10)::varchar, 	-- $10: IDENTIFICATION_NUMBER VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: CYCLE_IDENTIFIER VARCHAR(8000) NULL
		($12)::int, 	-- $12: CONSUMER_ACCOUNT_NUMBER INT NOT NULL
		($13)::char, 	-- $13: PORTFOLIO_TYPE CHAR(8000) NOT NULL
		($14)::char, 	-- $14: ACCOUNT_TYPE CHAR(8000) NOT NULL
		($15)::date, 	-- $15: DATE_OPENED DATE NOT NULL
		($16)::int, 	-- $16: CREDIT_LIMIT INT NOT NULL
		($17)::int, 	-- $17: ORIGINAL_LOAN_AMOUNT INT NOT NULL
		($18)::smallint, 	-- $18: TERMS_DURATION smallint NOT NULL
		($19)::char, 	-- $19: TERMS_FREQUENCY CHAR(8000) NOT NULL
		($20)::int, 	-- $20: SCHEDULED_PAYMENT_AMOUNT INT NOT NULL
		($21)::int, 	-- $21: ACTUAL_PAYMENT_AMOUNT INT NOT NULL
		($22)::char, 	-- $22: ACCOUNT_STATUS CHAR(8000) NOT NULL
		($23)::char, 	-- $23: PAYMENT_RATING CHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: PAYMENT_HISTORY_PROFILE VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: SPECIAL_COMMENT VARCHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: COMPLIANCE_CONDITION_CODE VARCHAR(8000) NOT NULL
		($27)::int, 	-- $27: CURRENT_BALANCE INT NOT NULL
		($28)::int, 	-- $28: AMOUNT_PAST_DUE INT NOT NULL
		($29)::int, 	-- $29: ORIGINAL_CHARGE_OFF_AMOUNT INT NOT NULL
		($30)::date, 	-- $30: DATE_OF_ACCOUNT_INFORMATION DATE NOT NULL
		($31)::date, 	-- $31: DATE_FIRST_DELINQUENCY DATE NULL
		($32)::date, 	-- $32: DATE_CLOSED DATE NULL
		($33)::date, 	-- $33: DATE_LAST_PAYMENT DATE NULL
		($34)::char, 	-- $34: INTEREST_TYPE_INDICATOR CHAR(8000) NOT NULL
		($35)::varchar, 	-- $35: SURNAME VARCHAR(8000) NOT NULL
		($36)::varchar, 	-- $36: FIRST_NAME VARCHAR(8000) NOT NULL
		($37)::varchar, 	-- $37: MIDDLE_NAME VARCHAR(8000) NOT NULL
		($38)::varchar, 	-- $38: GENERATION_CODE VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: SOCIAL_SECURITY_NUMBER VARCHAR(8000) NOT NULL
		($40)::date, 	-- $40: DATE_OF_BIRTH DATE NOT NULL
		($41)::varchar, 	-- $41: TELEPHONE_NUMBER VARCHAR(8000) NOT NULL
		($42)::char, 	-- $42: ECOA_CODE CHAR(8000) NOT NULL
		($43)::varchar, 	-- $43: CONSUMER_INFORMATION_INDICATOR VARCHAR(8000) NULL
		($44)::char, 	-- $44: COUNTRY_CODE CHAR(8000) NULL
		($45)::varchar, 	-- $45: ADDRESS_LINE_1 VARCHAR(8000) NOT NULL
		($46)::varchar, 	-- $46: ADDRESS_LINE_2 VARCHAR(8000) NOT NULL
		($47)::varchar, 	-- $47: CITY VARCHAR(8000) NOT NULL
		($48)::char, 	-- $48: STATE CHAR(8000) NOT NULL
		($49)::varchar, 	-- $49: POSTAL_CODE VARCHAR(8000) NOT NULL
		($50)::char, 	-- $50: ADDRESS_INDICATOR CHAR(8000) NOT NULL
		($51)::char, 	-- $51: RESIDENCE_CODE CHAR(8000) NOT NULL
		to_timestamp_ntz($52), 	-- $52: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($53) 	-- $53: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingBaseSegment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingBaseSegment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingBaseSegment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingBaseSegment_HIST;
SELECT * FROM STG.WINCHK_CreditReportingBaseSegment_HIST;
[STATUS=tbd]
*/

-- // TABLE 259: CreditReportingBaseSegmentHistory
COPY INTO ARES.STG.SRC_CreditReportingBaseSegmentHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_RUN_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NOT NULL
		($7)::char, 	-- $7: REPORTING_INDICATOR CHAR(8000) NOT NULL
		($8)::boolean, 	-- $8: IS_EXPORTED BOOLEAN NOT NULL
		($9)::int, 	-- $9: ROLLOVER_LOAN_KEY INT NULL
		($10)::varchar, 	-- $10: IDENTIFICATION_NUMBER VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: CYCLE_IDENTIFIER VARCHAR(8000) NULL
		($12)::int, 	-- $12: CONSUMER_ACCOUNT_NUMBER INT NOT NULL
		($13)::char, 	-- $13: PORTFOLIO_TYPE CHAR(8000) NOT NULL
		($14)::char, 	-- $14: ACCOUNT_TYPE CHAR(8000) NOT NULL
		($15)::date, 	-- $15: DATE_OPENED DATE NOT NULL
		($16)::int, 	-- $16: CREDIT_LIMIT INT NOT NULL
		($17)::int, 	-- $17: ORIGINAL_LOAN_AMOUNT INT NOT NULL
		($18)::smallint, 	-- $18: TERMS_DURATION smallint NOT NULL
		($19)::char, 	-- $19: TERMS_FREQUENCY CHAR(8000) NOT NULL
		($20)::int, 	-- $20: SCHEDULED_PAYMENT_AMOUNT INT NOT NULL
		($21)::int, 	-- $21: ACTUAL_PAYMENT_AMOUNT INT NOT NULL
		($22)::char, 	-- $22: ACCOUNT_STATUS CHAR(8000) NOT NULL
		($23)::char, 	-- $23: PAYMENT_RATING CHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: PAYMENT_HISTORY_PROFILE VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: SPECIAL_COMMENT VARCHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: COMPLIANCE_CONDITION_CODE VARCHAR(8000) NOT NULL
		($27)::int, 	-- $27: CURRENT_BALANCE INT NOT NULL
		($28)::int, 	-- $28: AMOUNT_PAST_DUE INT NOT NULL
		($29)::int, 	-- $29: ORIGINAL_CHARGE_OFF_AMOUNT INT NOT NULL
		($30)::date, 	-- $30: DATE_OF_ACCOUNT_INFORMATION DATE NOT NULL
		($31)::date, 	-- $31: DATE_FIRST_DELINQUENCY DATE NULL
		($32)::date, 	-- $32: DATE_CLOSED DATE NULL
		($33)::date, 	-- $33: DATE_LAST_PAYMENT DATE NULL
		($34)::char, 	-- $34: INTEREST_TYPE_INDICATOR CHAR(8000) NOT NULL
		($35)::varchar, 	-- $35: SURNAME VARCHAR(8000) NOT NULL
		($36)::varchar, 	-- $36: FIRST_NAME VARCHAR(8000) NOT NULL
		($37)::varchar, 	-- $37: MIDDLE_NAME VARCHAR(8000) NOT NULL
		($38)::varchar, 	-- $38: GENERATION_CODE VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: SOCIAL_SECURITY_NUMBER VARCHAR(8000) NOT NULL
		($40)::date, 	-- $40: DATE_OF_BIRTH DATE NOT NULL
		($41)::varchar, 	-- $41: TELEPHONE_NUMBER VARCHAR(8000) NOT NULL
		($42)::char, 	-- $42: ECOA_CODE CHAR(8000) NOT NULL
		($43)::varchar, 	-- $43: CONSUMER_INFORMATION_INDICATOR VARCHAR(8000) NULL
		($44)::char, 	-- $44: COUNTRY_CODE CHAR(8000) NULL
		($45)::varchar, 	-- $45: ADDRESS_LINE_1 VARCHAR(8000) NOT NULL
		($46)::varchar, 	-- $46: ADDRESS_LINE_2 VARCHAR(8000) NOT NULL
		($47)::varchar, 	-- $47: CITY VARCHAR(8000) NOT NULL
		($48)::char, 	-- $48: STATE CHAR(8000) NOT NULL
		($49)::varchar, 	-- $49: POSTAL_CODE VARCHAR(8000) NOT NULL
		($50)::char, 	-- $50: ADDRESS_INDICATOR CHAR(8000) NOT NULL
		($51)::char, 	-- $51: RESIDENCE_CODE CHAR(8000) NOT NULL
		to_timestamp_ntz($52), 	-- $52: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($53) 	-- $53: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingBaseSegmentHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingBaseSegmentHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingBaseSegmentHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingBaseSegmentHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingBaseSegmentHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 260: CreditReportingBaseSegmentTag
COPY INTO ARES.STG.SRC_CreditReportingBaseSegmentTag_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_BASE_SEGMENT_TAG_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($3)::varchar 	-- $3: TAG_TEXT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingBaseSegmentTag/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingBaseSegmentTag_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingBaseSegmentTag_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingBaseSegmentTag_HIST;
SELECT * FROM STG.WINCHK_CreditReportingBaseSegmentTag_HIST;
[STATUS=tbd]
*/

-- // TABLE 261: CreditReportingBaseSegmentTrace
COPY INTO ARES.STG.SRC_CreditReportingBaseSegmentTrace_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_BASE_SEGMENT_TRACE_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: EXECUTION_ORDER INT NOT NULL
		($4)::varchar, 	-- $4: EXECUTION_HASH VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: MEMBER_NAME VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: LINE_NUMBER INT NOT NULL
		($7)::date, 	-- $7: DATE_FIRST_DELINQUENCY DATE NULL
		($8)::char, 	-- $8: ACCOUNT_STATUS CHAR(8000) NULL
		($9)::char 	-- $9: PAYMENT_RATING CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingBaseSegmentTrace/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingBaseSegmentTrace_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingBaseSegmentTrace_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingBaseSegmentTrace_HIST;
SELECT * FROM STG.WINCHK_CreditReportingBaseSegmentTrace_HIST;
[STATUS=tbd]
*/

-- // TABLE 262: CreditReportingDisputeCode
COPY INTO ARES.STG.SRC_CreditReportingDisputeCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CREDIT_REPORTING_DISPUTE_CODE VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_MANUAL_PROCESS BOOLEAN NOT NULL
		($4)::boolean 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingDisputeCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingDisputeCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingDisputeCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingDisputeCode_HIST;
SELECT * FROM STG.WINCHK_CreditReportingDisputeCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 263: CreditReportingDisputeResponseCode
COPY INTO ARES.STG.SRC_CreditReportingDisputeResponseCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CREDIT_REPORTING_DISPUTE_RESPONSE_CODE VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingDisputeResponseCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingDisputeResponseCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingDisputeResponseCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingDisputeResponseCode_HIST;
SELECT * FROM STG.WINCHK_CreditReportingDisputeResponseCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 264: CreditReportingDisputeSource
COPY INTO ARES.STG.SRC_CreditReportingDisputeSource_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_REPORTING_DISPUTE_SOURCE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingDisputeSource/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingDisputeSource_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingDisputeSource_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingDisputeSource_HIST;
SELECT * FROM STG.WINCHK_CreditReportingDisputeSource_HIST;
[STATUS=tbd]
*/

-- // TABLE 265: CreditReportingL1Segment
COPY INTO ARES.STG.SRC_CreditReportingL1Segment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_L1_SEGMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($3)::char, 	-- $3: CHANGE_INDICATOR CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: NEW_CONSUMER_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingL1Segment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingL1Segment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingL1Segment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingL1Segment_HIST;
SELECT * FROM STG.WINCHK_CreditReportingL1Segment_HIST;
[STATUS=tbd]
*/

-- // TABLE 266: CreditReportingL1SegmentHistory
COPY INTO ARES.STG.SRC_CreditReportingL1SegmentHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_L1_SEGMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NOT NULL
		($3)::char, 	-- $3: CHANGE_INDICATOR CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: NEW_CONSUMER_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingL1SegmentHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingL1SegmentHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingL1SegmentHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingL1SegmentHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingL1SegmentHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 267: CreditReportingLoanActivity
COPY INTO ARES.STG.SRC_CreditReportingLoanActivity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_ACTIVITY_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($3)::int, 	-- $3: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: NOTE VARCHAR(8000) NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanActivity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanActivity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanActivity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanActivity_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanActivity_HIST;
[STATUS=tbd]
*/

-- // TABLE 268: CreditReportingLoanActivityHistory
COPY INTO ARES.STG.SRC_CreditReportingLoanActivityHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_ACTIVITY_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($3)::int, 	-- $3: CREDIT_REPORTING_BASE_SEGMENT_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: NOTE VARCHAR(8000) NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanActivityHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanActivityHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanActivityHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanActivityHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanActivityHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 269: CreditReportingLoanDispute
COPY INTO ARES.STG.SRC_CreditReportingLoanDispute_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_DISPUTE_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_LOAN_ACTIVITY_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CREDIT_REPORTING_DISPUTE_CODE_1 VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CREDIT_REPORTING_DISPUTE_CODE_2 VARCHAR(8000) NULL
		($5)::smallint, 	-- $5: CREDIT_REPORTING_DISPUTE_SOURCE_KEY SMALLINT NOT NULL
		($6)::varchar, 	-- $6: CREDIT_REPORTING_DISPUTE_RESPONSE_CODE VARCHAR(8000) NULL
		($7)::int, 	-- $7: LOAN_KEY INT NOT NULL
		($8)::date, 	-- $8: DATE_RECEIVED DATE NOT NULL
		($9)::date, 	-- $9: RESPONSE_DUE_DATE DATE NOT NULL
		($10)::date, 	-- $10: RESPONSE_DATE DATE NULL
		($11)::char, 	-- $11: RESPONDED_BY CHAR(8000) NULL
		($12)::int 	-- $12: RESPONSE_LOAN_ACTIVITY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanDispute/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanDispute_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanDispute_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanDispute_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanDispute_HIST;
[STATUS=tbd]
*/

-- // TABLE 270: CreditReportingLoanDisputeNote
COPY INTO ARES.STG.SRC_CreditReportingLoanDisputeNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_DISPUTE_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_LOAN_DISPUTE_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::varchar 	-- $5: NOTE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanDisputeNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanDisputeNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanDisputeNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanDisputeNote_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanDisputeNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 271: CreditReportingLoanDisputeRequest
COPY INTO ARES.STG.SRC_CreditReportingLoanDisputeRequest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_DISPUTE_REQUEST_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_LOAN_DISPUTE_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: SOURCE_ID INT NOT NULL
		($5)::varchar, 	-- $5: ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: CONTROL_NUMBER VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: SSN VARCHAR(8000) NULL
		($8)::date, 	-- $8: DATE_OF_BIRTH DATE NULL
		($9)::varchar, 	-- $9: SURNAME VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: DISPUTE_SOURCE VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: REQUEST_TYPE VARCHAR(8000) NOT NULL
		($12)::boolean 	-- $12: IS_PROCESSED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanDisputeRequest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanDisputeRequest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanDisputeRequest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanDisputeRequest_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanDisputeRequest_HIST;
[STATUS=tbd]
*/

-- // TABLE 272: CreditReportingLoanDisputeResponseDetail
COPY INTO ARES.STG.SRC_CreditReportingLoanDisputeResponseDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_DISPUTE_RESPONSE_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_LOAN_DISPUTE_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: SOURCE_ID INT NOT NULL
		($5)::varchar, 	-- $5: ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: CONTROL_NUMBER VARCHAR(8000) NOT NULL
		($7)::smallint, 	-- $7: RAW_DATA_TYPE_KEY SMALLINT NULL
		($8)::varchar 	-- $8: RESPONSE_DATA VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanDisputeResponseDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanDisputeResponseDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanDisputeResponseDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanDisputeResponseDetail_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanDisputeResponseDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 273: CreditReportingLoanProductLocation
COPY INTO ARES.STG.SRC_CreditReportingLoanProductLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_PRODUCT_LOCATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::date, 	-- $4: START_DATE DATE NULL
		($5)::date, 	-- $5: END_DATE DATE NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: FIRST_RUN_COMPLETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanProductLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanProductLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanProductLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanProductLocation_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanProductLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 274: CreditReportingLoanProductLocationHistory
COPY INTO ARES.STG.SRC_CreditReportingLoanProductLocationHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_LOAN_PRODUCT_LOCATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::date, 	-- $4: START_DATE DATE NULL
		($5)::date, 	-- $5: END_DATE DATE NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: FIRST_RUN_COMPLETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanProductLocationHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanProductLocationHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanProductLocationHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanProductLocationHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanProductLocationHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 275: CreditReportingLoanStatus
COPY INTO ARES.STG.SRC_CreditReportingLoanStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: STATUS_CHANGE_DATE TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: CREDIT_REPORTING_STATUS_KEY INT NOT NULL
		($4)::int, 	-- $4: CREDIT_REPORTING_LOAN_ACTIVITY_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanStatus_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 276: CreditReportingLoanStatusHistory
COPY INTO ARES.STG.SRC_CreditReportingLoanStatusHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: STATUS_CHANGE_DATE TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: CREDIT_REPORTING_STATUS_KEY INT NOT NULL
		($4)::int, 	-- $4: CREDIT_REPORTING_LOAN_ACTIVITY_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingLoanStatusHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingLoanStatusHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingLoanStatusHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingLoanStatusHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingLoanStatusHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 277: CreditReportingNaturalDisaster
COPY INTO ARES.STG.SRC_CreditReportingNaturalDisaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_REPORTING_NATURAL_DISASTER_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::date, 	-- $3: START_DATE DATE NOT NULL
		($4)::date, 	-- $4: END_DATE DATE NULL
		($5)::smallint 	-- $5: REPORTING_DAYS smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingNaturalDisaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingNaturalDisaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingNaturalDisaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingNaturalDisaster_HIST;
SELECT * FROM STG.WINCHK_CreditReportingNaturalDisaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 278: CreditReportingProcessingQueue
COPY INTO ARES.STG.SRC_CreditReportingProcessingQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_PROCESSING_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::date, 	-- $5: REPORT_ON_DATE DATE NOT NULL
		($6)::int, 	-- $6: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($7)::varchar, 	-- $7: NOTE VARCHAR(8000) NULL
		($8)::boolean, 	-- $8: IS_PROCESSED BOOLEAN NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingProcessingQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingProcessingQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingProcessingQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingProcessingQueue_HIST;
SELECT * FROM STG.WINCHK_CreditReportingProcessingQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 279: CreditReportingProcessingQueueHistory
COPY INTO ARES.STG.SRC_CreditReportingProcessingQueueHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_PROCESSING_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::date, 	-- $5: REPORT_ON_DATE DATE NOT NULL
		($6)::int, 	-- $6: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($7)::varchar, 	-- $7: NOTE VARCHAR(8000) NULL
		($8)::boolean, 	-- $8: IS_PROCESSED BOOLEAN NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingProcessingQueueHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingProcessingQueueHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingProcessingQueueHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingProcessingQueueHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingProcessingQueueHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 280: CreditReportingRarrActivityXRef
COPY INTO ARES.STG.SRC_CreditReportingRarrActivityXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($3)::smallint 	-- $3: CREDIT_REPORTING_NATURAL_DISASTER_KEY smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingRarrActivityXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingRarrActivityXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingRarrActivityXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingRarrActivityXRef_HIST;
SELECT * FROM STG.WINCHK_CreditReportingRarrActivityXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 281: CreditReportingRule
COPY INTO ARES.STG.SRC_CreditReportingRule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_RULE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: RULE_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NULL
		($4)::int, 	-- $4: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($5)::smallint, 	-- $5: CREDIT_REPORTING_RULE_TYPE_KEY SMALLINT NOT NULL
		to_timestamp_ntz($6), 	-- $6: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7) 	-- $7: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingRule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingRule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingRule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingRule_HIST;
SELECT * FROM STG.WINCHK_CreditReportingRule_HIST;
[STATUS=tbd]
*/

-- // TABLE 282: CreditReportingRuleHistory
COPY INTO ARES.STG.SRC_CreditReportingRuleHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_RULE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: RULE_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NULL
		($4)::int, 	-- $4: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($5)::smallint, 	-- $5: CREDIT_REPORTING_RULE_TYPE_KEY SMALLINT NOT NULL
		to_timestamp_ntz($6), 	-- $6: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7) 	-- $7: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingRuleHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingRuleHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingRuleHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingRuleHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingRuleHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 283: CreditReportingRuleType
COPY INTO ARES.STG.SRC_CreditReportingRuleType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_REPORTING_RULE_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingRuleType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingRuleType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingRuleType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingRuleType_HIST;
SELECT * FROM STG.WINCHK_CreditReportingRuleType_HIST;
[STATUS=tbd]
*/

-- // TABLE 284: CreditReportingRun
COPY INTO ARES.STG.SRC_CreditReportingRun_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_RUN_KEY INT NOT NULL
		($2)::smallint, 	-- $2: CREDIT_REPORTING_RUN_STATUS_KEY smallint NULL
		to_timestamp_ntz($3), 	-- $3: JOB_START TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4), 	-- $4: JOB_END TIMESTAMP_LTZ NULL
		($5)::int, 	-- $5: RECORD_COUNT INT NOT NULL
		($6)::varchar, 	-- $6: OUTPUT_FILE_NAME VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_MONTHLY_RUN BOOLEAN NOT NULL
		($8)::varchar 	-- $8: CODE_VERSION VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingRun/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingRun_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingRun_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingRun_HIST;
SELECT * FROM STG.WINCHK_CreditReportingRun_HIST;
[STATUS=tbd]
*/

-- // TABLE 285: CreditReportingRunStatus
COPY INTO ARES.STG.SRC_CreditReportingRunStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CREDIT_REPORTING_RUN_STATUS_KEY smallint NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingRunStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingRunStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingRunStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingRunStatus_HIST;
SELECT * FROM STG.WINCHK_CreditReportingRunStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 286: CreditReportingStatus
COPY INTO ARES.STG.SRC_CreditReportingStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_STATUS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_REPORTING_ENABLED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingStatus_HIST;
SELECT * FROM STG.WINCHK_CreditReportingStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 287: CreditReportingTarrActivityXref
COPY INTO ARES.STG.SRC_CreditReportingTarrActivityXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TASK_ACTION_RESULT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
		($3)::smallint 	-- $3: CREDIT_REPORTING_NATURAL_DISASTER_KEY smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingTarrActivityXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingTarrActivityXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingTarrActivityXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingTarrActivityXref_HIST;
SELECT * FROM STG.WINCHK_CreditReportingTarrActivityXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 288: CreditReportingTransCodeActivityXRef
COPY INTO ARES.STG.SRC_CreditReportingTransCodeActivityXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: TRANS_CODE_KEY SMALLINT NOT NULL
		($2)::int 	-- $2: CREDIT_REPORTING_ACTIVITY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingTransCodeActivityXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingTransCodeActivityXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingTransCodeActivityXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingTransCodeActivityXRef_HIST;
SELECT * FROM STG.WINCHK_CreditReportingTransCodeActivityXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 289: CreditReportingVendorConfig
COPY INTO ARES.STG.SRC_CreditReportingVendorConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_VENDOR_CONFIG_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: VENDOR_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: VENDOR_CONTACT_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: VENDOR_PHONE VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: ACCOUNT_NUMBER VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: TEST_URL VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: TEST_DESTINATION VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: TEST_LOGIN VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: TEST_PASSWORD VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: PROD_URL VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: PROD_DESTINATION VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: PROD_LOGIN VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: PROD_PASSWORD VARCHAR(8000) NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingVendorConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingVendorConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingVendorConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingVendorConfig_HIST;
SELECT * FROM STG.WINCHK_CreditReportingVendorConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 290: CreditReportingVendorConfigHistory
COPY INTO ARES.STG.SRC_CreditReportingVendorConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_REPORTING_VENDOR_CONFIG_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: VENDOR_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: VENDOR_CONTACT_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: VENDOR_PHONE VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: ACCOUNT_NUMBER VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: TEST_URL VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: TEST_DESTINATION VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: TEST_LOGIN VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: TEST_PASSWORD VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: PROD_URL VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: PROD_DESTINATION VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: PROD_LOGIN VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: PROD_PASSWORD VARCHAR(8000) NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditReportingVendorConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditReportingVendorConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditReportingVendorConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditReportingVendorConfigHistory_HIST;
SELECT * FROM STG.WINCHK_CreditReportingVendorConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 291: CreditRptPrint
COPY INTO ARES.STG.SRC_CreditRptPrint_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CRP_key INT NOT NULL
		($2)::int, 	-- $2: Credit_Rpt_Key INT NOT NULL
		($3)::int, 	-- $3: LineOrder INT NULL
		($4)::int, 	-- $4: PrintOrder INT NULL
		($5)::varchar 	-- $5: ReportLine VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditRptPrint/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditRptPrint_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditRptPrint_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditRptPrint_HIST;
SELECT * FROM STG.WINCHK_CreditRptPrint_HIST;
[STATUS=tbd]
*/

-- // TABLE 292: CreditVendor
COPY INTO ARES.STG.SRC_CreditVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_VENDOR_KEY INT NOT NULL
		($2)::datetime, 	-- $2: LAST_DATAX_RUN_TIME datetime NOT NULL
		($3)::datetime, 	-- $3: LAST_CLVERIFY_RUN_TIME datetime NOT NULL
		($4)::datetime, 	-- $4: LAST_VERITEC_MI_RUN_TIME datetime NOT NULL
		($5)::datetime, 	-- $5: LAST_VERITEC_OK_RUN_TIME datetime NOT NULL
		($6)::datetime, 	-- $6: LAST_VERITEC_ND_RUN_TIME datetime NOT NULL
		($7)::boolean, 	-- $7: DATAX_ACTIVE BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: CLVERIFY_ACTIVE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: VERITEC_MI_ACTIVE BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: VERITEC_OK_ACTIVE BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: VERITEC_ND_ACTIVE BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: GENTRY_ACTIVE BOOLEAN NOT NULL
		($13)::datetime, 	-- $13: LAST_GENTRY_RUN_TIME datetime NOT NULL
		($14)::datetime, 	-- $14: LAST_VERITEC_WA_RUN_TIME datetime NOT NULL
		($15)::boolean, 	-- $15: VERITEC_WA_ACTIVE BOOLEAN NOT NULL
		($16)::datetime, 	-- $16: LAST_FT_DAILY_RUN_TIME datetime NOT NULL
		($17)::datetime, 	-- $17: LAST_VERITEC_WI_RUN_TIME datetime NULL
		($18)::boolean, 	-- $18: VERITEC_WI_ACTIVE BOOLEAN NULL
		($19)::datetime, 	-- $19: LAST_VERITEC_IL_RUN_TIME datetime NULL
		($20)::boolean, 	-- $20: VERITEC_IL_ACTIVE BOOLEAN NULL
		($21)::boolean, 	-- $21: TELETRACKUK_ACTIVE BOOLEAN NULL
		($22)::datetime, 	-- $22: LAST_TELETRACKUK_RUN_TIME datetime NULL
		($23)::datetime, 	-- $23: LAST_CLARITY_RUN_TIME datetime NULL
		($24)::boolean, 	-- $24: CLARITY_ACTIVE BOOLEAN NULL
		($25)::boolean, 	-- $25: IS_DATAX_BM_REPORTING_ACTIVE BOOLEAN NOT NULL
		($26)::datetime, 	-- $26: LAST_VERITEC_AL_RUN_TIME datetime NULL
		($27)::boolean, 	-- $27: VERITEC_AL_ACTIVE BOOLEAN NULL
		($28)::boolean, 	-- $28: TELETRACK_US_IS_ACTIVE BOOLEAN NOT NULL
		($29)::datetime, 	-- $29: LAST_TELETRACK_US_RUN_TIME datetime NOT NULL
		($30)::varchar, 	-- $30: FT_UPLOAD_PASSWORD VARCHAR(8000) NOT NULL
		($31)::datetime, 	-- $31: LAST_VERITEC_NV_RUN_TIME datetime NOT NULL
		($32)::boolean, 	-- $32: VERITEC_NV_ACTIVE BOOLEAN NOT NULL
		($33)::varchar, 	-- $33: FT_STORE_ID1_USER VARCHAR(8000) NOT NULL
		($34)::varchar, 	-- $34: FT_STORE_ID1_PASSWORD VARCHAR(8000) NOT NULL
		($35)::varchar, 	-- $35: FT_STORE_ID2_USER VARCHAR(8000) NOT NULL
		($36)::varchar 	-- $36: FT_STORE_ID2_PASSWORD VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditVendor_HIST;
SELECT * FROM STG.WINCHK_CreditVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 293: CreditVendorApiHistory
COPY INTO ARES.STG.SRC_CreditVendorApiHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_VENDOR_API_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NULL
		($3)::int, 	-- $3: CREDIT_VENDOR_DATA_KEY INT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: CREDIT_VENDOR_NAME VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: API_REQUEST_DATA VARCHAR(8000) NULL
		($7)::varchar 	-- $7: API_RESPONSE_DATA VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditVendorApiHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditVendorApiHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditVendorApiHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditVendorApiHistory_HIST;
SELECT * FROM STG.WINCHK_CreditVendorApiHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 294: CreditVendorData
COPY INTO ARES.STG.SRC_CreditVendorData_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_VENDOR_DATA_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::smallint, 	-- $3: VERITEC_STATUS SMALLINT NOT NULL
		($4)::char, 	-- $4: DEF_STATE CHAR(8000) NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NOT NULL
		($6)::number, 	-- $6: TRANS_AMOUNT NUMBER(10,4) NOT NULL
		($7)::varchar, 	-- $7: CLVERIFY_PAYMENT_CODE VARCHAR(8000) NULL
		($8)::int, 	-- $8: CLVERIFY_PAYMENT_NUMBER INT NULL
		($9)::smallint, 	-- $9: CLVERIFY_STATUS SMALLINT NOT NULL
		($10)::smallint, 	-- $10: DATAX_STATUS SMALLINT NOT NULL
		($11)::int, 	-- $11: ORIGINAL_LOAN_KEY INT NOT NULL
		($12)::boolean, 	-- $12: IS_SENT_VERITEC BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: IS_SENT_DATAX BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: IS_SENT_CLVERIFY BOOLEAN NOT NULL
		($15)::varchar, 	-- $15: VENDOR_API_RESPONSE_DATA VARCHAR(8000) NULL
		($16)::boolean, 	-- $16: IS_SENT_GENTRY BOOLEAN NULL
		($17)::smallint, 	-- $17: DAYS_LATE smallint NULL
		($18)::int, 	-- $18: CUSTOMER_KEY INT NULL
		($19)::smallint, 	-- $19: CLARITY_STATUS SMALLINT NULL
		($20)::boolean, 	-- $20: IS_SENT_CLARITY BOOLEAN NULL
		($21)::varchar 	-- $21: VENDOR_API_REQUEST_DATA VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CreditVendorData/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CreditVendorData_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CreditVendorData_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CreditVendorData_HIST;
SELECT * FROM STG.WINCHK_CreditVendorData_HIST;
[STATUS=tbd]
*/

-- // TABLE 295: CuroHelp
COPY INTO ARES.STG.SRC_CuroHelp_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUROHELP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FORM_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CONTROL_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: HELP_TITLE VARCHAR(8000) NOT NULL
		($5)::text, 	-- $5: HELP_TEXT text NOT NULL
		($6)::varchar 	-- $6: TOOLTIP_TEXT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CuroHelp/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CuroHelp_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CuroHelp_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CuroHelp_HIST;
SELECT * FROM STG.WINCHK_CuroHelp_HIST;
[STATUS=tbd]
*/

-- // TABLE 296: Currency
COPY INTO ARES.STG.SRC_Currency_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CURRENCY_KEY INT NOT NULL
		($2)::char, 	-- $2: CURRENCY_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: CURRENCY_SYMBOL CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: BILL_DISPLAY VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: GROUPED_COIN_DISPLAY VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_ENABLED BOOLEAN NOT NULL
		($8)::int, 	-- $8: ACCT INT NOT NULL
		($9)::int, 	-- $9: CASH_TRANSIT_ACCT INT NOT NULL
		($10)::int 	-- $10: OPERATING_ACCT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Currency/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Currency_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Currency_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Currency_HIST;
SELECT * FROM STG.WINCHK_Currency_HIST;
[STATUS=tbd]
*/

-- // TABLE 297: CurrencyExchangeConfig
COPY INTO ARES.STG.SRC_CurrencyExchangeConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CURRENCY_EXCHANGE_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: CURRENCY_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: MANUAL_FEE_OVERRIDE BOOLEAN NOT NULL
		($5)::number, 	-- $5: MIN_EXCHANGE_FEE NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: MAX_EXCHANGE_FEE NUMBER(10,4) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: ENTERED_BY CHAR(8000) NULL
		($9)::number, 	-- $9: EXCHANGE_FEE NUMBER(10,4) NOT NULL
		($10)::boolean, 	-- $10: EXCHANGE_RATE_OVERRIDE BOOLEAN NOT NULL
		($11)::numeric, 	-- $11: MAX_EXCHANGE_RATE NUMERIC NOT NULL
		($12)::numeric, 	-- $12: MIN_EXCHANGE_RATE NUMERIC NOT NULL
		($13)::boolean, 	-- $13: DUAL_AUTHORIZATION BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: GOVT_ID_REQUIRED BOOLEAN NOT NULL
		($15)::numeric, 	-- $15: BUY_EXCHANGE_RATE_PERCENT NUMERIC NOT NULL
		($16)::numeric, 	-- $16: SELL_EXCHANGE_RATE_PERCENT NUMERIC NOT NULL
		to_timestamp_ntz($17), 	-- $17: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($18) 	-- $18: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CurrencyExchangeConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CurrencyExchangeConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CurrencyExchangeConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CurrencyExchangeConfig_HIST;
SELECT * FROM STG.WINCHK_CurrencyExchangeConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 298: CurrencyExchangeConfigHistory
COPY INTO ARES.STG.SRC_CurrencyExchangeConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CURRENCY_EXCHANGE_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: CURRENCY_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: MANUAL_FEE_OVERRIDE BOOLEAN NOT NULL
		($5)::number, 	-- $5: MIN_EXCHANGE_FEE NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: MAX_EXCHANGE_FEE NUMBER(10,4) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: ENTERED_BY CHAR(8000) NULL
		($9)::number, 	-- $9: EXCHANGE_FEE NUMBER(10,4) NOT NULL
		($10)::boolean, 	-- $10: EXCHANGE_RATE_OVERRIDE BOOLEAN NOT NULL
		($11)::numeric, 	-- $11: MAX_EXCHANGE_RATE NUMERIC NOT NULL
		($12)::numeric, 	-- $12: MIN_EXCHANGE_RATE NUMERIC NOT NULL
		($13)::boolean, 	-- $13: DUAL_AUTHORIZATION BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: GOVT_ID_REQUIRED BOOLEAN NOT NULL
		($15)::numeric, 	-- $15: BUY_EXCHANGE_RATE_PERCENT NUMERIC NOT NULL
		($16)::numeric, 	-- $16: SELL_EXCHANGE_RATE_PERCENT NUMERIC NOT NULL
		to_timestamp_ntz($17), 	-- $17: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($18) 	-- $18: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CurrencyExchangeConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CurrencyExchangeConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CurrencyExchangeConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CurrencyExchangeConfigHistory_HIST;
SELECT * FROM STG.WINCHK_CurrencyExchangeConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 299: CurrencyExchangeTrans
COPY INTO ARES.STG.SRC_CurrencyExchangeTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CURRENCY_EXCHANGE_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_POS_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::varchar, 	-- $5: TELLER VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: CUSTOMER_KEY INT NULL
		($7)::varchar, 	-- $7: FROM_CURRENCY_CODE VARCHAR(8000) NOT NULL
		($8)::decimal, 	-- $8: FROM_CURRENCY_RATE DECIMAL(38,0) NOT NULL
		($9)::varchar, 	-- $9: TO_CURRENCY_CODE VARCHAR(8000) NOT NULL
		($10)::decimal, 	-- $10: TO_CURRENCY_RATE DECIMAL(38,0) NOT NULL
		($11)::varchar, 	-- $11: BASE_CURRENCY_CODE VARCHAR(8000) NOT NULL
		($12)::decimal, 	-- $12: BASE_CURRENCY_RATE DECIMAL(38,0) NOT NULL
		($13)::decimal, 	-- $13: CONVERSION_RATE DECIMAL(38,0) NULL
		($14)::number, 	-- $14: AMOUNT_RECEIVED NUMBER(19,4) NOT NULL
		($15)::number, 	-- $15: FEE NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: EXCHANGE_AMOUNT NUMBER(19,4) NOT NULL
		($17)::number, 	-- $17: AMOUNT_DUE NUMBER(19,4) NOT NULL
		($18)::number, 	-- $18: CHANGE_DUE NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: PAY_BILL NUMBER(19,4) NOT NULL
		($20)::number, 	-- $20: PAY_CHANGE NUMBER(10,4) NOT NULL
		to_timestamp_ntz($21), 	-- $21: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($22)::decimal, 	-- $22: CALCULATED_CONVERSION_RATE DECIMAL(38,0) NULL
		($23)::number, 	-- $23: FEE_IN_BASE NUMBER(10,4) NULL
		($24)::decimal, 	-- $24: EXCHANGE_RATE_PERCENT DECIMAL(38,0) NULL
		($25)::decimal, 	-- $25: XE_CONVERSION_RATE DECIMAL(38,0) NULL
		($26)::boolean, 	-- $26: REVERSED BOOLEAN NOT NULL
		($27)::number 	-- $27: GAIN_LOSS NUMBER(10,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CurrencyExchangeTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CurrencyExchangeTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CurrencyExchangeTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CurrencyExchangeTrans_HIST;
SELECT * FROM STG.WINCHK_CurrencyExchangeTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 300: Customer
COPY INTO ARES.STG.SRC_Customer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Gen_Key INT NOT NULL
		($2)::varchar, 	-- $2: Name VARCHAR(8000) NOT NULL
		($3)::datetime, 	-- $3: Date_Entered datetime NOT NULL
		($4)::datetime, 	-- $4: Date_Updated datetime NOT NULL
		($5)::boolean, 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: SHOW_DENIAL_REASON BOOLEAN NOT NULL
		($8)::smallint 	-- $8: SSN_REQUIREMENT SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Customer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Customer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Customer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Customer_HIST;
SELECT * FROM STG.WINCHK_Customer_HIST;
[STATUS=tbd]
*/

-- // TABLE 301: CustomerActivity
COPY INTO ARES.STG.SRC_CustomerActivity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_ACTIVITY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::char, 	-- $3: PRODUCT_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: LOAN_TYPE CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: FIRST_ACTIVITY TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: LAST_ACTIVITY TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7) 	-- $7: PRIOR_ACTIVITY TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerActivity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerActivity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerActivity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerActivity_HIST;
SELECT * FROM STG.WINCHK_CustomerActivity_HIST;
[STATUS=tbd]
*/

-- // TABLE 302: CustomerAddress
COPY INTO ARES.STG.SRC_CustomerAddress_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_ADDRESS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: ADDRESS_TYPE_CODE SMALLINT NOT NULL
		($4)::smallint, 	-- $4: ADDRESS_SOURCE_CODE SMALLINT NOT NULL
		($5)::smallint, 	-- $5: ADDRESS_STATUS_CODE SMALLINT NOT NULL
		($6)::smallint, 	-- $6: ADDRESS_PRIORITY smallint NOT NULL
		($7)::varchar, 	-- $7: ADDRESS_CONTACT_LAST_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: ADDRESS_CONTACT_FIRST_NAME VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: CITY VARCHAR(8000) NOT NULL
		($10)::char, 	-- $10: STATE CHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: ZIPCODE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($12), 	-- $12: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($13)::char, 	-- $13: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($14), 	-- $14: DATE_LAST_USED TIMESTAMP_LTZ NULL
		to_timestamp_ntz($15), 	-- $15: STATUS_CHANGE_DATE TIMESTAMP_LTZ NULL
		($16)::char, 	-- $16: STATUS_CHANGE_TELLER CHAR(8000) NULL
		to_timestamp_ntz($17), 	-- $17: PRIORITY_CHANGE_DATE TIMESTAMP_LTZ NULL
		($18)::char, 	-- $18: PRIORITY_CHANGE_TELLER CHAR(8000) NULL
		($19)::varchar, 	-- $19: ADDR_NUM VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: ADDR_STREET VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: ADDR_SUITE VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($26)::datetime, 	-- $26: LAST_UPDATED datetime NOT NULL
		($27)::char, 	-- $27: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: COUNTY VARCHAR(8000) NOT NULL
		($29)::char, 	-- $29: COUNTRY CHAR(8000) NOT NULL
		($30)::date, 	-- $30: FROM_DATE DATE NULL
		($31)::date, 	-- $31: TO_DATE DATE NULL
		($32)::char, 	-- $32: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($33)::varchar, 	-- $33: FLAT_NUM VARCHAR(8000) NOT NULL
		($34)::varchar, 	-- $34: BUILDING_NUM VARCHAR(8000) NOT NULL
		($35)::varchar, 	-- $35: BUILDING_NAME VARCHAR(8000) NOT NULL
		($36)::smallint, 	-- $36: REMOVED_REASON_KEY SMALLINT NULL
		($37)::varchar, 	-- $37: REMOVED_REASON_NOTES VARCHAR(8000) NULL
		($38)::varchar, 	-- $38: ADDRESS_CSZ VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: ADDRESS_LINE VARCHAR(8000) NULL
		($40)::varchar, 	-- $40: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($41)::varchar, 	-- $41: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($42)::varchar 	-- $42: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerAddress/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerAddress_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerAddress_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerAddress_HIST;
SELECT * FROM STG.WINCHK_CustomerAddress_HIST;
[STATUS=tbd]
*/

-- // TABLE 303: CustomerAddressEdit
COPY INTO ARES.STG.SRC_CustomerAddressEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_ADDRESS_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_ADDRESS_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: NEW_VALUE VARCHAR(8000) NOT NULL
		($8)::smallint 	-- $8: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerAddressEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerAddressEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerAddressEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerAddressEdit_HIST;
SELECT * FROM STG.WINCHK_CustomerAddressEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 304: CustomerAppDate
COPY INTO ARES.STG.SRC_CustomerAppDate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_CERT_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NOT NULL
		($6)::date 	-- $6: CERT_DATE DATE NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerAppDate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerAppDate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerAppDate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerAppDate_HIST;
SELECT * FROM STG.WINCHK_CustomerAppDate_HIST;
[STATUS=tbd]
*/

-- // TABLE 305: CustomerBusiness
COPY INTO ARES.STG.SRC_CustomerBusiness_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_BUSINESS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::varchar, 	-- $3: BUSINESS_NAME VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: BUSINESS_TYPE_CODE SMALLINT NOT NULL
		($5)::smallint, 	-- $5: LEGAL_TYPE_CODE SMALLINT NOT NULL
		($6)::varchar, 	-- $6: TAX_ID_NUM VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: BUSINESS_PHONE_NUM VARCHAR(8000) NOT NULL
		($8)::date, 	-- $8: BUSINESS_START_DATE DATE NULL
		($9)::smallint, 	-- $9: NUM_EMPLOYEES smallint NOT NULL
		($10)::number, 	-- $10: VER_MONTHLY_NET_INC NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: VER_BANK_DEPOSITS NUMBER(10,4) NOT NULL
		($12)::varchar, 	-- $12: ADDR_NUM VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: ADDR_STREET VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: ADDR_SUITE VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: CITY VARCHAR(8000) NOT NULL
		($20)::char, 	-- $20: STATE CHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: ZIPCODE VARCHAR(8000) NOT NULL
		($22)::boolean, 	-- $22: IS_ACTIVE BOOLEAN NOT NULL
		($23)::varchar, 	-- $23: COUNTY VARCHAR(8000) NOT NULL
		($24)::char, 	-- $24: COUNTRY CHAR(8000) NOT NULL
		($25)::char, 	-- $25: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: FLAT_NUM VARCHAR(8000) NOT NULL
		($27)::varchar, 	-- $27: BUILDING_NUM VARCHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: BUILDING_NAME VARCHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: ADDRESS_CSZ VARCHAR(8000) NULL
		($30)::varchar, 	-- $30: ADDRESS_LINE VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($33)::varchar 	-- $33: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerBusiness/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerBusiness_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerBusiness_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerBusiness_HIST;
SELECT * FROM STG.WINCHK_CustomerBusiness_HIST;
[STATUS=tbd]
*/

-- // TABLE 306: CustomerCardReview
COPY INTO ARES.STG.SRC_CustomerCardReview_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_CARD_REVIEW_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: CLEARED_BY CHAR(8000) NULL
		to_timestamp_ntz($6), 	-- $6: CLEARED_DATE TIMESTAMP_LTZ NULL
		($7)::int 	-- $7: CARD_GOVERNOR_HISTORY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerCardReview/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerCardReview_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerCardReview_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerCardReview_HIST;
SELECT * FROM STG.WINCHK_CustomerCardReview_HIST;
[STATUS=tbd]
*/

-- // TABLE 307: CustomerCoolingOff
COPY INTO ARES.STG.SRC_CustomerCoolingOff_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_COOLING_OFF_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::int 	-- $5: CARD_GOVERNOR_HISTORY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerCoolingOff/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerCoolingOff_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerCoolingOff_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerCoolingOff_HIST;
SELECT * FROM STG.WINCHK_CustomerCoolingOff_HIST;
[STATUS=tbd]
*/

-- // TABLE 308: CustomerCreditRpt
COPY INTO ARES.STG.SRC_CustomerCreditRpt_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_RPT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: LOCATION INT NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerCreditRpt/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerCreditRpt_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerCreditRpt_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerCreditRpt_HIST;
SELECT * FROM STG.WINCHK_CustomerCreditRpt_HIST;
[STATUS=tbd]
*/

-- // TABLE 309: CustomerCreditRptDetail
COPY INTO ARES.STG.SRC_CustomerCreditRptDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CR_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_RPT_KEY INT NOT NULL
		($3)::datetime, 	-- $3: DATE_ENTERED datetime NOT NULL
		($4)::char, 	-- $4: LINE_TYPE CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: LINE_TEXT VARCHAR(8000) NOT NULL
		($6)::smallint 	-- $6: LINE_ORDER smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerCreditRptDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerCreditRptDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerCreditRptDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerCreditRptDetail_HIST;
SELECT * FROM STG.WINCHK_CustomerCreditRptDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 310: CustomerEarnedCredit
COPY INTO ARES.STG.SRC_CustomerEarnedCredit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_EARNED_CREDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: EARNED_CREDIT_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: EXPIRE_DATE TIMESTAMP_LTZ NULL
		($5)::number, 	-- $5: TOTAL_EARNED NUMBER(10,4) NOT NULL
		($6)::number 	-- $6: TOTAL_REDEEMED NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerEarnedCredit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerEarnedCredit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerEarnedCredit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerEarnedCredit_HIST;
SELECT * FROM STG.WINCHK_CustomerEarnedCredit_HIST;
[STATUS=tbd]
*/

-- // TABLE 311: CustomerEdit
COPY INTO ARES.STG.SRC_CustomerEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerEdit_HIST;
SELECT * FROM STG.WINCHK_CustomerEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 312: CustomerEmployer
COPY INTO ARES.STG.SRC_CustomerEmployer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_EMPLOYER_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::varchar, 	-- $3: EMPLOYER_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DEPARTMENT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: COUNTY VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: COUNTRY CHAR(8000) NOT NULL
		($7)::int, 	-- $7: ADDRESS_KEY INT NULL
		($8)::int, 	-- $8: PHONE_NUMBER_KEY INT NULL
		($9)::boolean, 	-- $9: IS_ACTIVE BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IS_DIRECT_DEPOSIT BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_PRIMARY_EMPLOYER BOOLEAN NOT NULL
		($12)::date, 	-- $12: EMP_SINCE DATE NULL
		($13)::char, 	-- $13: FULLPARTTIME CHAR(8000) NOT NULL
		($14)::char, 	-- $14: PAY_CYCLE CHAR(8000) NOT NULL
		($15)::smallint, 	-- $15: PAY_CYCLE_DAY SMALLINT NOT NULL
		($16)::smallint, 	-- $16: PAY_CYCLE_1ST SMALLINT NOT NULL
		($17)::smallint, 	-- $17: PAY_CYCLE_2ND SMALLINT NOT NULL
		($18)::date, 	-- $18: BIWEEK_BASE DATE NULL
		($19)::char, 	-- $19: PAY_CYCLE_MONTH_INT CHAR(8000) NOT NULL
		($20)::boolean, 	-- $20: PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH BOOLEAN NOT NULL
		($21)::int, 	-- $21: INCOME_TYPE_KEY INT NOT NULL
		($22)::int, 	-- $22: INCOME_SOURCE_KEY INT NOT NULL
		($23)::int, 	-- $23: INCOME_JOB_TYPE_KEY INT NULL
		to_timestamp_ntz($24), 	-- $24: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($25)::char, 	-- $25: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($26), 	-- $26: DATE_UPDATED TIMESTAMP_LTZ NULL
		($27)::char, 	-- $27: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($28), 	-- $28: DATE_INACTIVE TIMESTAMP_LTZ NULL
		($29)::char, 	-- $29: INACTIVE_TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($30), 	-- $30: DATE_DELETED TIMESTAMP_LTZ NULL
		($31)::char, 	-- $31: DELETED_TELLER CHAR(8000) NOT NULL
		($32)::boolean, 	-- $32: IS_DELETED BOOLEAN NOT NULL
		($33)::date 	-- $33: CALC_PAY_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerEmployer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerEmployer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerEmployer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerEmployer_HIST;
SELECT * FROM STG.WINCHK_CustomerEmployer_HIST;
[STATUS=tbd]
*/

-- // TABLE 313: CustomerEmployerEdit
COPY INTO ARES.STG.SRC_CustomerEmployerEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_EMPLOYER_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_EMPLOYER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerEmployerEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerEmployerEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerEmployerEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerEmployerEdit_HIST;
SELECT * FROM STG.WINCHK_CustomerEmployerEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 314: CustomerExpense
COPY INTO ARES.STG.SRC_CustomerExpense_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_EXPENSE_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char 	-- $4: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerExpense/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerExpense_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerExpense_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerExpense_HIST;
SELECT * FROM STG.WINCHK_CustomerExpense_HIST;
[STATUS=tbd]
*/

-- // TABLE 315: CustomerExpenseDetail
COPY INTO ARES.STG.SRC_CustomerExpenseDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_EXPENSE_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_EXPENSE_KEY INT NOT NULL
		($3)::int, 	-- $3: EXPENSE_TYPE_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerExpenseDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerExpenseDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerExpenseDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerExpenseDetail_HIST;
SELECT * FROM STG.WINCHK_CustomerExpenseDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 316: CustomerFeedback
COPY INTO ARES.STG.SRC_CustomerFeedback_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: CUSTOMER_FEEDBACK_TYPE_KEY INT NOT NULL
		($5)::int, 	-- $5: CUSTOMER_FEEDBACK_CATEGORY_KEY INT NOT NULL
		($6)::int, 	-- $6: CUSTOMER_FEEDBACK_RESOLUTION_KEY INT NULL
		($7)::varchar, 	-- $7: FEEDBACK VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: RESOLUTION_NOTES VARCHAR(8000) NOT NULL
		($9)::datetime, 	-- $9: DATE_ENTERED datetime NOT NULL
		($10)::char, 	-- $10: ENTERED_BY CHAR(8000) NOT NULL
		($11)::datetime, 	-- $11: LAST_UPDATE_DATE datetime NOT NULL
		($12)::char, 	-- $12: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($13)::int, 	-- $13: CUSTOMER_FEEDBACK_SOURCE_KEY INT NULL
		($14)::int 	-- $14: CUSTOMER_FEEDBACK_SUB_CATEGORY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedback/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedback_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedback_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedback_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedback_HIST;
[STATUS=tbd]
*/

-- // TABLE 317: CustomerFeedbackCategory
COPY INTO ARES.STG.SRC_CustomerFeedbackCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_CATEGORY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::datetime, 	-- $3: DATE_ENTERED datetime NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: LAST_UPDATE_DATE datetime NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($7)::boolean 	-- $7: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedbackCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedbackCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedbackCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedbackCategory_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedbackCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 318: CustomerFeedbackResolution
COPY INTO ARES.STG.SRC_CustomerFeedbackResolution_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_RESOLUTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: IS_CLOSED BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: LAST_UPDATE_DATE datetime NOT NULL
		($8)::char 	-- $8: LAST_UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedbackResolution/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedbackResolution_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedbackResolution_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedbackResolution_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedbackResolution_HIST;
[STATUS=tbd]
*/

-- // TABLE 319: CustomerFeedbackSource
COPY INTO ARES.STG.SRC_CustomerFeedbackSource_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_SOURCE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: LAST_UPDATE_DATE datetime NOT NULL
		($7)::char 	-- $7: LAST_UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedbackSource/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedbackSource_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedbackSource_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedbackSource_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedbackSource_HIST;
[STATUS=tbd]
*/

-- // TABLE 320: CustomerFeedbackSubCategory
COPY INTO ARES.STG.SRC_CustomerFeedbackSubCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_SUB_CATEGORY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_FEEDBACK_CATEGORY_KEY INT NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: LAST_UPDATE_DATE datetime NOT NULL
		($8)::char 	-- $8: LAST_UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedbackSubCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedbackSubCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedbackSubCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedbackSubCategory_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedbackSubCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 321: CustomerFeedbackType
COPY INTO ARES.STG.SRC_CustomerFeedbackType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: LAST_UPDATE_DATE datetime NOT NULL
		($7)::char 	-- $7: LAST_UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedbackType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedbackType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedbackType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedbackType_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedbackType_HIST;
[STATUS=tbd]
*/

-- // TABLE 322: CustomerFeedbackTypeCategoryXRef
COPY INTO ARES.STG.SRC_CustomerFeedbackTypeCategoryXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_FEEDBACK_TYPE_CATEGORY_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_FEEDBACK_TYPE_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_FEEDBACK_CATEGORY_KEY INT NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFeedbackTypeCategoryXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFeedbackTypeCategoryXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFeedbackTypeCategoryXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFeedbackTypeCategoryXRef_HIST;
SELECT * FROM STG.WINCHK_CustomerFeedbackTypeCategoryXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 323: CustomerFlash
COPY INTO ARES.STG.SRC_CustomerFlash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_KEY INT NOT NULL
		($2)::int, 	-- $2: SPECIAL_MESSAGE_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NULL
		to_timestamp_ntz($4), 	-- $4: DATE_EXPIRED TIMESTAMP_LTZ NULL
		($5)::int 	-- $5: MARKETING_INVITATION_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFlash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFlash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFlash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFlash_HIST;
SELECT * FROM STG.WINCHK_CustomerFlash_HIST;
[STATUS=tbd]
*/

-- // TABLE 324: CustomerFlashMPayRebates
COPY INTO ARES.STG.SRC_CustomerFlashMPayRebates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_KEY INT NOT NULL
		($2)::number, 	-- $2: REBATE_AMT NUMBER(10,4) NOT NULL
		($3)::boolean, 	-- $3: REBATE_COMPLETED BOOLEAN NULL
		($4)::int 	-- $4: CUSTOMER_FLASH_MPAY_REBATES_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFlashMPayRebates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFlashMPayRebates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFlashMPayRebates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFlashMPayRebates_HIST;
SELECT * FROM STG.WINCHK_CustomerFlashMPayRebates_HIST;
[STATUS=tbd]
*/

-- // TABLE 325: CustomerFlashORRebates
COPY INTO ARES.STG.SRC_CustomerFlashORRebates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_KEY INT NOT NULL
		($2)::number, 	-- $2: REBATE_AMT NUMBER(10,4) NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NULL
		to_timestamp_ntz($4) 	-- $4: DATE_REBATED TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFlashORRebates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFlashORRebates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFlashORRebates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFlashORRebates_HIST;
SELECT * FROM STG.WINCHK_CustomerFlashORRebates_HIST;
[STATUS=tbd]
*/

-- // TABLE 326: CustomerFlashQuestions
COPY INTO ARES.STG.SRC_CustomerFlashQuestions_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: CUSTOMER_FLASH_QUESTIONS_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: LOOKUP_CODE VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFlashQuestions/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFlashQuestions_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFlashQuestions_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFlashQuestions_HIST;
SELECT * FROM STG.WINCHK_CustomerFlashQuestions_HIST;
[STATUS=tbd]
*/

-- // TABLE 327: CustomerFlashResponse
COPY INTO ARES.STG.SRC_CustomerFlashResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::bigint, 	-- $1: CUSTOMER_FLASH_RESPONSE_KEY BIGINT NOT NULL
		($2)::smallint, 	-- $2: CUSTOMER_FLASH_QUESTIONS_KEY SMALLINT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: LOCATION smallint NOT NULL
		($7)::smallint, 	-- $7: RESPONSE smallint NOT NULL
		($8)::boolean 	-- $8: IS_NEW BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerFlashResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerFlashResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerFlashResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerFlashResponse_HIST;
SELECT * FROM STG.WINCHK_CustomerFlashResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 328: CustomerIdentification
COPY INTO ARES.STG.SRC_CustomerIdentification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_IDENTIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: ID_NUMBER VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: ID_SOURCE VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: CUST_ID_COUNTRY CHAR(8000) NOT NULL
		($7)::char, 	-- $7: CUST_ID_STATE CHAR(8000) NOT NULL
		($8)::date, 	-- $8: EXPIRATION_DATE DATE NULL
		($9)::varchar, 	-- $9: VERIFIED_OTHER VARCHAR(8000) NOT NULL
		($10)::boolean, 	-- $10: IS_DELETED BOOLEAN NOT NULL
		($11)::datetime, 	-- $11: DATE_ENTERED datetime NOT NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NOT NULL
		($13)::int 	-- $13: IDENTIFICATION_TYPE_VERIFY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerIdentification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerIdentification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerIdentification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerIdentification_HIST;
SELECT * FROM STG.WINCHK_CustomerIdentification_HIST;
[STATUS=tbd]
*/

-- // TABLE 329: CustomerIdentificationEdit
COPY INTO ARES.STG.SRC_CustomerIdentificationEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_IDENTIFICATION_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_IDENTIFICATION_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerIdentificationEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerIdentificationEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerIdentificationEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerIdentificationEdit_HIST;
SELECT * FROM STG.WINCHK_CustomerIdentificationEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 330: CustomerIncome
COPY INTO ARES.STG.SRC_CustomerIncome_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_INCOME_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::char, 	-- $5: AMOUNT_TYPE CHAR(8000) NOT NULL
		($6)::number, 	-- $6: INCOME_AMOUNT NUMBER(10,4) NOT NULL
		($7)::int, 	-- $7: INCOME_VERIFY_METHOD_KEY INT NULL
		($8)::date, 	-- $8: DATE_VERIFIED DATE NULL
		($9)::boolean, 	-- $9: IS_DELETED BOOLEAN NOT NULL
		($10)::char, 	-- $10: DELETED_TELLER CHAR(8000) NOT NULL
		($11)::date, 	-- $11: DATE_DELETED DATE NULL
		($12)::int, 	-- $12: CUSTOMER_EMPLOYER_KEY INT NOT NULL
		($13)::char, 	-- $13: AMOUNT_CYCLE CHAR(8000) NOT NULL
		($14)::boolean, 	-- $14: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($15), 	-- $15: DATE_INACTIVE TIMESTAMP_LTZ NULL
		($16)::char, 	-- $16: INACTIVE_TELLER CHAR(8000) NOT NULL
		($17)::smallint, 	-- $17: VERIFICATION_LOCATION smallint NULL
		($18)::smallint 	-- $18: ENTERED_LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerIncome/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerIncome_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerIncome_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerIncome_HIST;
SELECT * FROM STG.WINCHK_CustomerIncome_HIST;
[STATUS=tbd]
*/

-- // TABLE 331: CustomerIncomeBackup
COPY INTO ARES.STG.SRC_CustomerIncomeBackup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_INCOME_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::date, 	-- $3: DATE_ENTERED DATE NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::char, 	-- $5: INCOME_TYPE CHAR(8000) NOT NULL
		($6)::number, 	-- $6: INCOME_AMOUNT NUMBER(10,4) NOT NULL
		($7)::smallint 	-- $7: INCOME_VERIFY_METHOD_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerIncomeBackup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerIncomeBackup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerIncomeBackup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerIncomeBackup_HIST;
SELECT * FROM STG.WINCHK_CustomerIncomeBackup_HIST;
[STATUS=tbd]
*/

-- // TABLE 332: CustomerLastCreditReport
COPY INTO ARES.STG.SRC_CustomerLastCreditReport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LAST_CREDIT_REPORT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::varchar, 	-- $4: FIRSTNAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: LASTNAME VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: SSN CHAR(8000) NULL
		($7)::date, 	-- $7: DOB DATE NULL
		to_timestamp_ntz($8) 	-- $8: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLastCreditReport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLastCreditReport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLastCreditReport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLastCreditReport_HIST;
SELECT * FROM STG.WINCHK_CustomerLastCreditReport_HIST;
[STATUS=tbd]
*/

-- // TABLE 333: CustomerLead
COPY INTO ARES.STG.SRC_CustomerLead_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NULL
		($3)::char, 	-- $3: LEAD_SOURCE CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: ORIG_LOCATION smallint NOT NULL
		($5)::smallint, 	-- $5: SUPERSTORE smallint NOT NULL
		($6)::smallint, 	-- $6: SATELLITE smallint NULL
		($7)::int, 	-- $7: CUSTOMER_LEAD_STATUS_KEY INT NOT NULL
		($8)::date, 	-- $8: STATUS_CHANGE_DATE DATE NOT NULL
		($9)::int, 	-- $9: CUSTOMER_LEAD_REASON_KEY INT NULL
		($10)::int, 	-- $10: LOAN_APPLICATION_KEY INT NULL
		($11)::int, 	-- $11: CUSTOMER_KEY INT NULL
		($12)::int, 	-- $12: LOAN_KEY INT NULL
		($13)::varchar, 	-- $13: FIRSTNAME VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: MIDNAME VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: LASTNAME VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: SSN VARCHAR(8000) NULL
		($17)::date, 	-- $17: DOB DATE NULL
		($18)::varchar, 	-- $18: HOME_ADDR_NUM VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: HOME_ADDR_PRE_DIR VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: HOME_ADDR_STREET VARCHAR(8000) NULL
		($21)::varchar, 	-- $21: HOME_ADDR_SUFFIX VARCHAR(8000) NULL
		($22)::varchar, 	-- $22: HOME_ADDR_POST_DIR VARCHAR(8000) NULL
		($23)::varchar, 	-- $23: HOME_ADDR_SUITE VARCHAR(8000) NULL
		($24)::varchar, 	-- $24: HOME_ADDR_SUITE_NUM VARCHAR(8000) NULL
		($25)::varchar, 	-- $25: HOME_CITY VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: HOME_STATE VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: HOME_ZIPCODE VARCHAR(8000) NULL
		($28)::date, 	-- $28: RESIDENCE_SINCE DATE NULL
		($29)::smallint, 	-- $29: OWNRENTOTHER SMALLINT NULL
		($30)::varchar, 	-- $30: HOME_PHONE VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: CELL_PHONE VARCHAR(8000) NULL
		($32)::int, 	-- $32: MOBILE_CARRIER INT NULL
		($33)::varchar, 	-- $33: WORK_PHONE VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: WORK_PHONE_EXT VARCHAR(8000) NULL
		($35)::char, 	-- $35: PREFERRED_CONTACT CHAR(8000) NULL
		($36)::varchar, 	-- $36: EMAIL VARCHAR(8000) NULL
		($37)::char, 	-- $37: PAY_CYCLE CHAR(8000) NULL
		($38)::decimal, 	-- $38: GROSS_INCOME DECIMAL(38,0) NULL
		($39)::decimal, 	-- $39: NET_INCOME DECIMAL(38,0) NULL
		($40)::decimal, 	-- $40: PVBD_INCOME DECIMAL(38,0) NULL
		($41)::varchar, 	-- $41: BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($43)::date, 	-- $43: APPT_FOLLOW_DATE DATE NULL
		($44)::char, 	-- $44: APPT_FOLLOW_TIME CHAR(8000) NULL
		to_timestamp_ntz($45), 	-- $45: DATE_UPDATED TIMESTAMP_LTZ NULL
		($46)::char, 	-- $46: TELLER_UPDATED CHAR(8000) NULL
		($47)::int, 	-- $47: VISITOR_KEY INT NULL
		($48)::boolean, 	-- $48: MARKETING_CONSENT BOOLEAN NULL
		($49)::int, 	-- $49: WEB_LEAD_KEY INT NULL
		($50)::char, 	-- $50: LOAN_TYPE CHAR(8000) NULL
		($51)::char, 	-- $51: PRODUCT_TYPE CHAR(8000) NULL
		to_timestamp_ntz($52), 	-- $52: FIRST_OPENED_DATE TIMESTAMP_LTZ NULL
		($53)::varchar, 	-- $53: HOME_ADDRESS_LINE VARCHAR(8000) NULL
		($54)::varchar 	-- $54: SSN_LAST_FOUR VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLead/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLead_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLead_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLead_HIST;
SELECT * FROM STG.WINCHK_CustomerLead_HIST;
[STATUS=tbd]
*/

-- // TABLE 334: CustomerLeadAction
COPY INTO ARES.STG.SRC_CustomerLeadAction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_ACTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ACTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::int 	-- $4: CUSTOMER_LEAD_STATUS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadAction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadAction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadAction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadAction_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadAction_HIST;
[STATUS=tbd]
*/

-- // TABLE 335: CustomerLeadActivity
COPY INTO ARES.STG.SRC_CustomerLeadActivity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_ACTIVITY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_LEAD_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::int, 	-- $5: CUSTOMER_LEAD_ACTION_KEY INT NOT NULL
		($6)::int, 	-- $6: CUSTOMER_LEAD_STATUS_KEY INT NOT NULL
		($7)::int 	-- $7: CUSTOMER_LEAD_REASON_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadActivity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadActivity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadActivity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadActivity_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadActivity_HIST;
[STATUS=tbd]
*/

-- // TABLE 336: CustomerLeadInsertLoanByPhoneDenied
COPY INTO ARES.STG.SRC_CustomerLeadInsertLoanByPhoneDenied_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_INSERT_LOAN_BY_PHONE_DENIED_KEY INT NOT NULL
		($2)::int 	-- $2: SECURITY_GROUP_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadInsertLoanByPhoneDenied/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadInsertLoanByPhoneDenied_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadInsertLoanByPhoneDenied_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadInsertLoanByPhoneDenied_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadInsertLoanByPhoneDenied_HIST;
[STATUS=tbd]
*/

-- // TABLE 337: CustomerLeadLocation
COPY INTO ARES.STG.SRC_CustomerLeadLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_LOCATION_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::boolean, 	-- $3: IS_SUPERSTORE BOOLEAN NOT NULL
		($4)::smallint, 	-- $4: OF_SUPERSTORE smallint NOT NULL
		($5)::smallint, 	-- $5: SUPERSTORE_RADIUS smallint NULL
		($6)::smallint, 	-- $6: WARNING_AGE smallint NULL
		($7)::smallint 	-- $7: REFRESH_RATE smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadLocation_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 338: CustomerLeadNote
COPY INTO ARES.STG.SRC_CustomerLeadNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_LEAD_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::varchar 	-- $5: NOTE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadNote_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 339: CustomerLeadReason
COPY INTO ARES.STG.SRC_CustomerLeadReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: REASON VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadReason_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 340: CustomerLeadStatus
COPY INTO ARES.STG.SRC_CustomerLeadStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_STATUS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: STATUS VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IN_F2_SEARCH BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IN_QUEUE_MAINT BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: REQUIRES_REASON BOOLEAN NOT NULL
		($8)::smallint, 	-- $8: DISPLAY_ORDER smallint NOT NULL
		($9)::smallint, 	-- $9: DELETE_AFTER_DAYS smallint NOT NULL
		($10)::boolean, 	-- $10: REQUIRES_DATE BOOLEAN NOT NULL
		($11)::boolean 	-- $11: REQUIRES_SATELLITE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadStatus_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 341: CustomerLeadStatusReason
COPY INTO ARES.STG.SRC_CustomerLeadStatusReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_STATUS_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_LEAD_STATUS_KEY INT NOT NULL
		($3)::int 	-- $3: CUSTOMER_LEAD_REASON_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLeadStatusReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLeadStatusReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLeadStatusReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLeadStatusReason_HIST;
SELECT * FROM STG.WINCHK_CustomerLeadStatusReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 342: CustomerLoanPaymentForgivenessEligible
COPY INTO ARES.STG.SRC_CustomerLoanPaymentForgivenessEligible_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LOAN_PAYMENT_FORGIVENESS_ELIGIBLE_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerLoanPaymentForgivenessEligible/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerLoanPaymentForgivenessEligible_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerLoanPaymentForgivenessEligible_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerLoanPaymentForgivenessEligible_HIST;
SELECT * FROM STG.WINCHK_CustomerLoanPaymentForgivenessEligible_HIST;
[STATUS=tbd]
*/

-- // TABLE 343: CustomerMergeHistory
COPY INTO ARES.STG.SRC_CustomerMergeHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_MERGE_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: DELETED_CUST_PKEY INT NOT NULL
		($3)::int, 	-- $3: MERGED_INTO_CUST_PKEY INT NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED_WITH_SECONDS datetime NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::int 	-- $6: OLD_VISITOR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerMergeHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerMergeHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerMergeHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerMergeHistory_HIST;
SELECT * FROM STG.WINCHK_CustomerMergeHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 344: CustomerMLA
COPY INTO ARES.STG.SRC_CustomerMLA_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_MLA_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::date, 	-- $3: EFFECTIVE_DATE DATE NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::date, 	-- $6: END_DATE DATE NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerMLA/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerMLA_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerMLA_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerMLA_HIST;
SELECT * FROM STG.WINCHK_CustomerMLA_HIST;
[STATUS=tbd]
*/

-- // TABLE 345: CustomerNote
COPY INTO ARES.STG.SRC_CustomerNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_NOTE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::varchar, 	-- $3: NOTE VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::text, 	-- $5: RTF_NOTE text NOT NULL
		($6)::boolean, 	-- $6: IS_FLASH BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: DELETED_BY CHAR(8000) NULL
		($10)::int, 	-- $10: NEW_CUSTOMER_NOTE_KEY INT NULL
		($11)::char, 	-- $11: ENTERED_BY CHAR(8000) NOT NULL
		($12)::date 	-- $12: FLASH_EXPIRATION_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerNote_HIST;
SELECT * FROM STG.WINCHK_CustomerNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 346: CustomerPaymentAccount
COPY INTO ARES.STG.SRC_CustomerPaymentAccount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_PAYMENT_ACCOUNT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: BANK_ACCOUNT_KEY INT NULL
		($4)::int 	-- $4: CARD_NUMBER_TOKEN INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerPaymentAccount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerPaymentAccount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerPaymentAccount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerPaymentAccount_HIST;
SELECT * FROM STG.WINCHK_CustomerPaymentAccount_HIST;
[STATUS=tbd]
*/

-- // TABLE 347: CustomerPaymentAccountEvent
COPY INTO ARES.STG.SRC_CustomerPaymentAccountEvent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_PAYMENT_ACCOUNT_EVENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_PAYMENT_ACCOUNT_KEY INT NULL
		($3)::int, 	-- $3: PAYMENT_ACCOUNT_EVENT_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: HAS_INCREMENT_NSF_COUNT_RESULT BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: HAS_RESET_NSF_COUNT_RESULT BOOLEAN NOT NULL
		($9)::smallint, 	-- $9: OLD_NSF_RESULT_COUNT smallint NOT NULL
		($10)::smallint, 	-- $10: NSF_RESULT_COUNT smallint NOT NULL
		($11)::boolean, 	-- $11: IS_SCHEDULED_PAYMENT BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: IS_SUCCESSFUL_PAYMENT BOOLEAN NOT NULL
		($13)::varchar, 	-- $13: EVENT_NOTE VARCHAR(8000) NOT NULL
		($14)::int, 	-- $14: CUSTOMER_KEY INT NOT NULL
		($15)::int, 	-- $15: LOAN_KEY INT NULL
		($16)::int, 	-- $16: TRANS_DETAIL_KEY INT NULL
		($17)::int, 	-- $17: ACH_HISTORY_KEY INT NULL
		($18)::int, 	-- $18: CREDIT_CARD_TRANS_KEY INT NULL
		($19)::int, 	-- $19: LOAN_AUTHORIZED_PAYMENT_METHOD_KEY INT NULL
		($20)::boolean, 	-- $20: OLD_HAS_SUSPENDED_NSF_COUNT_RESET BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: HAS_SUSPENDED_NSF_COUNT_RESET BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: OLD_HAS_PROHIBITION_STATUS BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: HAS_PROHIBITION_STATUS BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: OLD_HAS_COVERED_LOAN BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: HAS_COVERED_LOAN BOOLEAN NOT NULL
		($26)::boolean 	-- $26: HAS_CHANGED_NSF_RESULT_COUNT BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerPaymentAccountEvent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerPaymentAccountEvent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerPaymentAccountEvent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerPaymentAccountEvent_HIST;
SELECT * FROM STG.WINCHK_CustomerPaymentAccountEvent_HIST;
[STATUS=tbd]
*/

-- // TABLE 348: CustomerPhoneNumber
COPY INTO ARES.STG.SRC_CustomerPhoneNumber_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_PHONE_NUMBER_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PHONE_TYPE_CODE SMALLINT NOT NULL
		($4)::smallint, 	-- $4: PHONE_SOURCE_CODE SMALLINT NOT NULL
		($5)::smallint, 	-- $5: PHONE_STATUS_CODE SMALLINT NOT NULL
		($6)::smallint, 	-- $6: PHONE_PRIORITY smallint NOT NULL
		($7)::varchar, 	-- $7: PHONE_CONTACT_LAST_NAME VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: PHONE_CONTACT_FIRST_NAME VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: PHONE_EXT VARCHAR(8000) NULL
		to_timestamp_ntz($11), 	-- $11: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_LAST_USED TIMESTAMP_LTZ NULL
		to_timestamp_ntz($14), 	-- $14: STATUS_CHANGE_DATE TIMESTAMP_LTZ NULL
		($15)::char, 	-- $15: STATUS_CHANGE_TELLER CHAR(8000) NULL
		to_timestamp_ntz($16), 	-- $16: PRIORITY_CHANGE_DATE TIMESTAMP_LTZ NULL
		($17)::char, 	-- $17: PRIORITY_CHANGE_TELLER CHAR(8000) NULL
		($18)::smallint, 	-- $18: TIMES_USED smallint NOT NULL
		($19)::datetime, 	-- $19: LAST_UPDATED datetime NOT NULL
		($20)::char, 	-- $20: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($21)::boolean, 	-- $21: CALL_CENTER_DO_NOT_CALL BOOLEAN NULL
		($22)::datetime, 	-- $22: CALL_CENTER_DO_NOT_CALL_UNTIL datetime NULL
		($23)::datetime, 	-- $23: CALL_CENTER_DO_NOT_CALL_CHANGE_DATE datetime NULL
		($24)::char, 	-- $24: CALL_CENTER_DO_NOT_CALL_CHANGE_TELLER CHAR(8000) NULL
		($25)::date, 	-- $25: AUTO_DIAL_CONSENT_MODIFICATION_DATE DATE NULL
		($26)::date, 	-- $26: PHYSICAL_CELL_NUMBER_LAST_CHECKED_DATE DATE NULL
		($27)::boolean, 	-- $27: HAS_AUTO_DIAL_CONSENT BOOLEAN NULL
		($28)::boolean, 	-- $28: IS_PHYSICAL_CELL_NUMBER BOOLEAN NULL
		($29)::varchar 	-- $29: PHONE_OWNER_LAST_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerPhoneNumber/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerPhoneNumber_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerPhoneNumber_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerPhoneNumber_HIST;
SELECT * FROM STG.WINCHK_CustomerPhoneNumber_HIST;
[STATUS=tbd]
*/

-- // TABLE 349: CustomerPhoneNumberEdit
COPY INTO ARES.STG.SRC_CustomerPhoneNumberEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_PHONE_NUMBER_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_PHONE_NUMBER_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: NEW_VALUE VARCHAR(8000) NOT NULL
		($8)::smallint 	-- $8: CHANGED_AT_LOCATION smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerPhoneNumberEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerPhoneNumberEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerPhoneNumberEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerPhoneNumberEdit_HIST;
SELECT * FROM STG.WINCHK_CustomerPhoneNumberEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 350: CustomerResponse
COPY INTO ARES.STG.SRC_CustomerResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_RESPONSE_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: LOCATION smallint NOT NULL
		($7)::char 	-- $7: RESPONSE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerResponse_HIST;
SELECT * FROM STG.WINCHK_CustomerResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 351: CustomerSDNCert
COPY INTO ARES.STG.SRC_CustomerSDNCert_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SDNCERT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::boolean, 	-- $3: DIFF_DOB BOOLEAN NOT NULL
		($4)::date, 	-- $4: DOB DATE NULL
		($5)::boolean, 	-- $5: DIFF_ADDRESS BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: DIFF_NUMBER BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: OTHER BOOLEAN NOT NULL
		($8)::varchar, 	-- $8: OTHER_DESC VARCHAR(8000) NULL
		($9)::char, 	-- $9: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($10) 	-- $10: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerSDNCert/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerSDNCert_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerSDNCert_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerSDNCert_HIST;
SELECT * FROM STG.WINCHK_CustomerSDNCert_HIST;
[STATUS=tbd]
*/

-- // TABLE 352: CustomerServiceMessageDisposition
COPY INTO ARES.STG.SRC_CustomerServiceMessageDisposition_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_SERVICE_MESSAGE_DISPOSITION_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: MESSAGE_RECEIVED_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($3), 	-- $3: TELLER_ASSIGNED_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4), 	-- $4: DISPOSITION_DATE TIMESTAMP_LTZ NOT NULL
		($5)::int, 	-- $5: DISPOSITION_KEY INT NOT NULL
		($6)::varchar, 	-- $6: INBOUND_ADDRESS VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: FROM_ADDRESS VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: MESSAGE_ID VARCHAR(8000) NOT NULL
		($9)::char 	-- $9: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerServiceMessageDisposition/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerServiceMessageDisposition_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerServiceMessageDisposition_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerServiceMessageDisposition_HIST;
SELECT * FROM STG.WINCHK_CustomerServiceMessageDisposition_HIST;
[STATUS=tbd]
*/

-- // TABLE 353: CustomerSurvey
COPY INTO ARES.STG.SRC_CustomerSurvey_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_SURVEY_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: TRANS_TYPE smallint NOT NULL
		($6)::boolean, 	-- $6: NEW_CUSTOMER BOOLEAN NOT NULL
		($7)::smallint, 	-- $7: NEW_PRA SMALLINT NOT NULL
		($8)::smallint, 	-- $8: NEW_TITLE SMALLINT NOT NULL
		($9)::smallint, 	-- $9: NEW_SIG SMALLINT NOT NULL
		($10)::smallint, 	-- $10: NEW_CHECK SMALLINT NOT NULL
		($11)::boolean, 	-- $11: NEW_TYPE BOOLEAN NOT NULL
		($12)::int, 	-- $12: RESPONSE_NUM INT NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($14)::varchar, 	-- $14: CALLED_NUM VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: CALLED_FROM_NUM VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: CALLED_FROM_CITY_STATE VARCHAR(8000) NOT NULL
		($17)::smallint, 	-- $17: QUESTION1 SMALLINT NULL
		($18)::smallint, 	-- $18: QUESTION2 SMALLINT NULL
		($19)::smallint, 	-- $19: QUESTION3 SMALLINT NULL
		($20)::smallint, 	-- $20: QUESTION4 SMALLINT NULL
		($21)::smallint, 	-- $21: QUESTION5 SMALLINT NULL
		($22)::smallint, 	-- $22: QUESTION6 SMALLINT NULL
		($23)::smallint, 	-- $23: QUESTION7 SMALLINT NULL
		($24)::smallint, 	-- $24: QUESTION8 SMALLINT NULL
		($25)::smallint, 	-- $25: QUESTION9 SMALLINT NULL
		($26)::number 	-- $26: QUESTIONAVG NUMBER(19,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerSurvey/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerSurvey_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerSurvey_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerSurvey_HIST;
SELECT * FROM STG.WINCHK_CustomerSurvey_HIST;
[STATUS=tbd]
*/

-- // TABLE 354: CustomerThirdPartyLink
COPY INTO ARES.STG.SRC_CustomerThirdPartyLink_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_THIRD_PARTY_LINK_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: THIRD_PARTY_KEY INT NOT NULL
		($4)::int, 	-- $4: THIRD_PARTY_REFERENCE_TYPE_KEY INT NOT NULL
		($5)::int, 	-- $5: THIRD_PARTY_REFERENCE_ID INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: LINKED_DATE TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: LINKED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: UNLINKED_DATE TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: UNLINKED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerThirdPartyLink/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerThirdPartyLink_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerThirdPartyLink_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerThirdPartyLink_HIST;
SELECT * FROM STG.WINCHK_CustomerThirdPartyLink_HIST;
[STATUS=tbd]
*/

-- // TABLE 355: CustomerThirdPartyLinkVaultMgrAuthorization
COPY INTO ARES.STG.SRC_CustomerThirdPartyLinkVaultMgrAuthorization_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_THIRD_PARTY_LINK_VAULT_MGR_AUTHORIZATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_THIRD_PARTY_LINK_KEY INT NOT NULL
		($3)::int 	-- $3: VAULT_MGR_AUTHORIZATION_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/CustomerThirdPartyLinkVaultMgrAuthorization/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*CustomerThirdPartyLinkVaultMgrAuthorization_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_CustomerThirdPartyLinkVaultMgrAuthorization_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_CustomerThirdPartyLinkVaultMgrAuthorization_HIST;
SELECT * FROM STG.WINCHK_CustomerThirdPartyLinkVaultMgrAuthorization_HIST;
[STATUS=tbd]
*/

-- // TABLE 356: DbPurgeTables
COPY INTO ARES.STG.SRC_DbPurgeTables_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: table_name VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: column_name VARCHAR(8000) NULL
		($3)::boolean, 	-- $3: field_is_foreignkey BOOLEAN NULL
		($4)::boolean, 	-- $4: field_is_primarykey BOOLEAN NULL
		($5)::boolean, 	-- $5: needs_to_be_hashed BOOLEAN NOT NULL
		($6)::smallint 	-- $6: date_hash_type SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DbPurgeTables/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DbPurgeTables_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DbPurgeTables_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DbPurgeTables_HIST;
SELECT * FROM STG.WINCHK_DbPurgeTables_HIST;
[STATUS=tbd]
*/

-- // TABLE 357: DebtSale
COPY INTO ARES.STG.SRC_DebtSale_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEBT_SALE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number, 	-- $3: FACE_VALUE NUMBER(10,4) NOT NULL
		($4)::varchar, 	-- $4: PORTFOLIO VARCHAR(8000) NULL
		to_timestamp_ntz($5), 	-- $5: BUYBACK_DATE TIMESTAMP_LTZ NULL
		($6)::decimal, 	-- $6: RATE DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SOLD_DATE TIMESTAMP_LTZ NOT NULL
		($8)::char, 	-- $8: BOUGHT_BACK_BY CHAR(8000) NULL
		($9)::varchar, 	-- $9: BUYER_NAME VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: BUYER_PHONE VARCHAR(8000) NULL
		($11)::varchar 	-- $11: BUYBACK_REASON VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/DebtSale/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DebtSale_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DebtSale_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DebtSale_HIST;
SELECT * FROM STG.WINCHK_DebtSale_HIST;
[STATUS=tbd]
*/

-- // TABLE 358: DebtSaleExport
COPY INTO ARES.STG.SRC_DebtSaleExport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEBT_SALE_EXPORT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: DATE_COMPLETE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/DebtSaleExport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DebtSaleExport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DebtSaleExport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DebtSaleExport_HIST;
SELECT * FROM STG.WINCHK_DebtSaleExport_HIST;
[STATUS=tbd]
*/

-- // TABLE 359: DebtSaleExportDetail
COPY INTO ARES.STG.SRC_DebtSaleExportDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEBT_SALE_EXPORT_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: DEBT_SALE_EXPORT_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::boolean, 	-- $4: EXPORT_HISTORY BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: EXPORT_LOAN_DOCS BOOLEAN NOT NULL
		to_timestamp_ntz($6) 	-- $6: DATE_EXPORTED TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/DebtSaleExportDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DebtSaleExportDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DebtSaleExportDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DebtSaleExportDetail_HIST;
SELECT * FROM STG.WINCHK_DebtSaleExportDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 360: DebtSaleExportLog
COPY INTO ARES.STG.SRC_DebtSaleExportLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_EXPORTED BOOLEAN NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_EXPORTED TIMESTAMP_LTZ NULL
		($4)::char 	-- $4: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DebtSaleExportLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DebtSaleExportLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DebtSaleExportLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DebtSaleExportLog_HIST;
SELECT * FROM STG.WINCHK_DebtSaleExportLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 361: DecreaseAmountOwedReason
COPY INTO ARES.STG.SRC_DecreaseAmountOwedReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: DECREASE_AMOUNT_OWED_REASON_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: ENUM_CODE CHAR(8000) NOT NULL
		($4)::varchar 	-- $4: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DecreaseAmountOwedReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DecreaseAmountOwedReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DecreaseAmountOwedReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DecreaseAmountOwedReason_HIST;
SELECT * FROM STG.WINCHK_DecreaseAmountOwedReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 362: Denomination
COPY INTO ARES.STG.SRC_Denomination_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DENOMINATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CURRENCY_KEY INT NOT NULL
		($3)::smallint, 	-- $3: DISPLAY_SEQUENCE smallint NOT NULL
		($4)::number, 	-- $4: AMOUNT NUMBER(10,4) NOT NULL
		($5)::varchar, 	-- $5: DESCRIPTION VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: DENOMINATION_TYPE CHAR(8000) NOT NULL
		($7)::int, 	-- $7: BASE_DENOMINATION_KEY INT NULL
		($8)::boolean, 	-- $8: IS_ENABLED BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_MAX_ALLOWED_AMOUNT_ENABLED BOOLEAN NOT NULL
		($10)::number, 	-- $10: MAX_ALLOWED_AMOUNT NUMBER(10,4) NOT NULL
		($11)::number 	-- $11: MIN_CURRENCY_AMOUNT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Denomination/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Denomination_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Denomination_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Denomination_HIST;
SELECT * FROM STG.WINCHK_Denomination_HIST;
[STATUS=tbd]
*/

-- // TABLE 363: DepositBag
COPY INTO ARES.STG.SRC_DepositBag_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_BAG_KEY INT NOT NULL
		($2)::int, 	-- $2: DEPOSIT_CHK_KEY INT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::varchar, 	-- $4: DB_BAG_NUM VARCHAR(8000) NOT NULL
		($5)::char, 	-- $5: DB_ENTERED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: DB_DATE_ENTERED datetime NOT NULL
		($7)::int, 	-- $7: TRANS_DETAIL_KEY INT NOT NULL
		($8)::boolean, 	-- $8: DB_REVERSED BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: DB_MIDDAY_DEPOSIT BOOLEAN NOT NULL
		($10)::int, 	-- $10: DB_REVERSE_TRANS_DETAIL_KEY INT NULL
		($11)::number, 	-- $11: CASHED_CHK_TOTAL_AMT NUMBER(19,4) NOT NULL
		($12)::int, 	-- $12: CASHED_CHK_COUNT INT NOT NULL
		($13)::number, 	-- $13: PAYDAY_CHK_TOTAL_AMT NUMBER(19,4) NOT NULL
		($14)::int, 	-- $14: PAYDAY_CHK_COUNT INT NOT NULL
		($15)::number, 	-- $15: USD_CASHED_CHK_TOTAL_AMT NUMBER(19,4) NOT NULL
		($16)::int, 	-- $16: USD_CASHED_CHK_COUNT INT NOT NULL
		($17)::boolean, 	-- $17: IS_ELECTRONIC_BAG BOOLEAN NOT NULL
		($18)::number, 	-- $18: CHK_TOTAL_AMT NUMBER(19,4) NOT NULL
		($19)::int 	-- $19: CHK_COUNT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositBag/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositBag_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositBag_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositBag_HIST;
SELECT * FROM STG.WINCHK_DepositBag_HIST;
[STATUS=tbd]
*/

-- // TABLE 364: DepositBagDetail
COPY INTO ARES.STG.SRC_DepositBagDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_BAG_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: DEPOSIT_BAG_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: TRANS_DETAIL_KEY INT NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NULL
		($6)::int, 	-- $6: CASHED_CHECK_KEY INT NULL
		($7)::boolean, 	-- $7: REVERSED_DELETE BOOLEAN NULL
		($8)::char, 	-- $8: REVERSED_BY_DELETE CHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: REVERSED_DATE_DELETE TIMESTAMP_LTZ NULL
		($10)::int, 	-- $10: DRAWER_KEY INT NULL
		($11)::boolean, 	-- $11: REJECTED BOOLEAN NULL
		to_timestamp_ntz($12), 	-- $12: REJECTED_DATE TIMESTAMP_LTZ NULL
		($13)::char 	-- $13: REJECTED_TELLER CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositBagDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositBagDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositBagDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositBagDetail_HIST;
SELECT * FROM STG.WINCHK_DepositBagDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 365: DepositBagHistory
COPY INTO ARES.STG.SRC_DepositBagHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_BAG_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: FROM_DEPOSIT_BAG_KEY INT NULL
		($3)::int, 	-- $3: TO_DEPOSIT_BAG_KEY INT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositBagHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositBagHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositBagHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositBagHistory_HIST;
SELECT * FROM STG.WINCHK_DepositBagHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 366: DepositChk
COPY INTO ARES.STG.SRC_DepositChk_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_CHK_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: DC_GL_ACCT INT NULL
		($4)::number, 	-- $4: DC_CHK_TOT NUMBER(19,4) NOT NULL
		($5)::int, 	-- $5: DC_CHK_CNTR INT NOT NULL
		($6)::boolean, 	-- $6: DC_PRA_TYPE BOOLEAN NOT NULL
		($7)::char, 	-- $7: DC_DEPOSIT_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DC_DEPOSIT_DATE TIMESTAMP_LTZ NOT NULL
		($9)::boolean, 	-- $9: DC_BAG_TYPE BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: DC_COURIER_NAME VARCHAR(8000) NULL
		($11)::int 	-- $11: TRANS_DETAIL_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositChk/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositChk_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositChk_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositChk_HIST;
SELECT * FROM STG.WINCHK_DepositChk_HIST;
[STATUS=tbd]
*/

-- // TABLE 367: DepositChkDetail
COPY INTO ARES.STG.SRC_DepositChkDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_CHK_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: DEPOSIT_CHK_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: TRANS_DETAIL_KEY INT NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NULL
		($6)::int 	-- $6: CASHED_CHECK_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositChkDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositChkDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositChkDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositChkDetail_HIST;
SELECT * FROM STG.WINCHK_DepositChkDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 368: DepositDebitCard
COPY INTO ARES.STG.SRC_DepositDebitCard_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_DEBIT_CARD_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::smallint, 	-- $5: DEBIT_CNTR smallint NOT NULL
		($6)::number, 	-- $6: DEBIT_TOT NUMBER(19,4) NOT NULL
		to_timestamp_ntz($7), 	-- $7: START_TIME TIMESTAMP_LTZ NULL
		to_timestamp_ntz($8), 	-- $8: END_TIME TIMESTAMP_LTZ NULL
		($9)::boolean 	-- $9: COMPLETED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositDebitCard/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositDebitCard_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositDebitCard_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositDebitCard_HIST;
SELECT * FROM STG.WINCHK_DepositDebitCard_HIST;
[STATUS=tbd]
*/

-- // TABLE 369: DepositDebitCardDetail
COPY INTO ARES.STG.SRC_DepositDebitCardDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DEPOSIT_DEBIT_CARD_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: DEPOSIT_DEBIT_CARD_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::int, 	-- $4: TRANS_DETAIL_KEY INT NULL
		($5)::boolean, 	-- $5: REVERSED BOOLEAN NOT NULL
		($6)::char, 	-- $6: REVERSED_BY CHAR(8000) NULL
		to_timestamp_ntz($7) 	-- $7: REVERSED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositDebitCardDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositDebitCardDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositDebitCardDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositDebitCardDetail_HIST;
SELECT * FROM STG.WINCHK_DepositDebitCardDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 370: DepositOrder
COPY INTO ARES.STG.SRC_DepositOrder_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: DepositOrderKey SMALLINT NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositOrder/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositOrder_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositOrder_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositOrder_HIST;
SELECT * FROM STG.WINCHK_DepositOrder_HIST;
[STATUS=tbd]
*/

-- // TABLE 371: DepositStatus
COPY INTO ARES.STG.SRC_DepositStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: DepositStatusKey SMALLINT NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DepositStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DepositStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DepositStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DepositStatus_HIST;
SELECT * FROM STG.WINCHK_DepositStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 372: DialerJob
COPY INTO ARES.STG.SRC_DialerJob_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DIALER_JOB_KEY INT NOT NULL
		($2)::varchar, 	-- $2: JOB_NAME VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: STEP_ORDER smallint NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: EXPORT_FILE_NAME VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: JOB_TYPE CHAR(8000) NULL
		($7)::boolean, 	-- $7: IS_AD_ASTRA BOOLEAN NOT NULL
		($8)::number, 	-- $8: BALANCE_FROM NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: BALANCE_TO NUMBER(10,4) NOT NULL
		($10)::int, 	-- $10: AGE_FROM INT NOT NULL
		($11)::int, 	-- $11: AGE_TO INT NOT NULL
		($12)::smallint, 	-- $12: SCORE_FROM smallint NOT NULL
		($13)::smallint, 	-- $13: SCORE_TO smallint NOT NULL
		($14)::varchar, 	-- $14: FOLLOW_UP_FROM VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: FOLLOW_UP_TO VARCHAR(8000) NOT NULL
		($16)::boolean, 	-- $16: PTP_CALL BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: VALID_CC BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: DIRECT_DEPOSIT BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: TODAY_PRIOR BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: TODAY_PLUS1 BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: TODAY_PLUS2 BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: RUN_SUNDAY BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: RUN_MONDAY BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: RUN_TUESDAY BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: RUN_WEDNESDAY BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: RUN_THURSDAY BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: RUN_FRIDAY BOOLEAN NOT NULL
		($28)::boolean, 	-- $28: RUN_SATURDAY BOOLEAN NOT NULL
		($29)::varchar, 	-- $29: RISK_ASSESSMENT VARCHAR(8000) NULL
		($30)::int, 	-- $30: ADASTRA_AGE_FROM INT NOT NULL
		($31)::int, 	-- $31: ADASTRA_AGE_TO INT NOT NULL
		($32)::boolean, 	-- $32: HAS_BROKEN_PTPS BOOLEAN NOT NULL
		($33)::int, 	-- $33: BROKEN_PTP_DAYS INT NOT NULL
		($34)::number, 	-- $34: BALANCE_TEST NUMBER(10,4) NOT NULL
		($35)::char, 	-- $35: PREFERRED_LANGUAGE CHAR(8000) NOT NULL
		($36)::boolean, 	-- $36: INCLUDE_PENDING_ACH BOOLEAN NOT NULL
		($37)::boolean, 	-- $37: CHECK_PTP_CAN_CALL_CONFIG BOOLEAN NOT NULL
		($38)::boolean, 	-- $38: EXCLUDE_GAIL_LOANS BOOLEAN NOT NULL
		($39)::smallint, 	-- $39: COLLECTIONS_RISK_SCORE_FROM smallint NOT NULL
		($40)::smallint 	-- $40: COLLECTIONS_RISK_SCORE_TO smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerJob/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerJob_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerJob_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerJob_HIST;
SELECT * FROM STG.WINCHK_DialerJob_HIST;
[STATUS=tbd]
*/

-- // TABLE 373: DialerJobAllowedAutoDialTCPAResult
COPY INTO ARES.STG.SRC_DialerJobAllowedAutoDialTCPAResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DIALER_JOB_ALLOWED_AUTO_DIAL_TCPA_RESULT_KEY INT NOT NULL
		($2)::int, 	-- $2: DIALER_JOB_KEY INT NOT NULL
		($3)::int 	-- $3: RESULT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerJobAllowedAutoDialTCPAResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerJobAllowedAutoDialTCPAResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerJobAllowedAutoDialTCPAResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerJobAllowedAutoDialTCPAResult_HIST;
SELECT * FROM STG.WINCHK_DialerJobAllowedAutoDialTCPAResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 374: DialerJobChecksLocation
COPY INTO ARES.STG.SRC_DialerJobChecksLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::int 	-- $2: DIALER_JOB_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerJobChecksLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerJobChecksLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerJobChecksLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerJobChecksLocation_HIST;
SELECT * FROM STG.WINCHK_DialerJobChecksLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 375: DialerJobLoanProductEnableNewLoan
COPY INTO ARES.STG.SRC_DialerJobLoanProductEnableNewLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DIALER_JOB_KEY INT NOT NULL
		($2)::int 	-- $2: LOAN_PRODUCT_ENABLE_NEW_LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerJobLoanProductEnableNewLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerJobLoanProductEnableNewLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerJobLoanProductEnableNewLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerJobLoanProductEnableNewLoan_HIST;
SELECT * FROM STG.WINCHK_DialerJobLoanProductEnableNewLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 376: DialerJobRisAudit
COPY INTO ARES.STG.SRC_DialerJobRisAudit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DIALER_JOB_KEY INT NOT NULL
		($2)::int 	-- $2: RIS_AUDIT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerJobRisAudit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerJobRisAudit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerJobRisAudit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerJobRisAudit_HIST;
SELECT * FROM STG.WINCHK_DialerJobRisAudit_HIST;
[STATUS=tbd]
*/

-- // TABLE 377: DialerKeys
COPY INTO ARES.STG.SRC_DialerKeys_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RISREPT_KEY INT NULL
		($2)::varchar, 	-- $2: reference VARCHAR(8000) NULL
		to_timestamp_ntz($3), 	-- $3: date TIMESTAMP_LTZ NULL
		($4)::varchar, 	-- $4: jobname VARCHAR(8000) NULL
		($5)::number, 	-- $5: balance NUMBER(10,4) NULL
		($6)::number, 	-- $6: balancetest NUMBER(10,4) NULL
		($7)::boolean, 	-- $7: Exclude BOOLEAN NULL
		($8)::boolean, 	-- $8: Exported BOOLEAN NULL
		($9)::int, 	-- $9: ris_audit_id INT NULL
		to_timestamp_ntz($10), 	-- $10: Followup TIMESTAMP_LTZ NULL
		($11)::boolean, 	-- $11: COURTESY_EXPORT BOOLEAN NULL
		($12)::int, 	-- $12: DIALER_KEYS_KEY INT NOT NULL
		($13)::boolean, 	-- $13: ExportedToNoble BOOLEAN NOT NULL
		($14)::int 	-- $14: DIALER_JOB_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerKeys/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerKeys_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerKeys_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerKeys_HIST;
SELECT * FROM STG.WINCHK_DialerKeys_HIST;
[STATUS=tbd]
*/

-- // TABLE 378: DialerResultCodes
COPY INTO ARES.STG.SRC_DialerResultCodes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Dialer_Results_Id INT NOT NULL
		($2)::varchar, 	-- $2: Result_Code VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Description VARCHAR(8000) NOT NULL
		($4)::int 	-- $4: Speedy_Result_Code INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DialerResultCodes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DialerResultCodes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DialerResultCodes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DialerResultCodes_HIST;
SELECT * FROM STG.WINCHK_DialerResultCodes_HIST;
[STATUS=tbd]
*/

-- // TABLE 379: DiscountLocations
COPY INTO ARES.STG.SRC_DiscountLocations_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DISCOUNT_LOCATIONS_KEY INT NOT NULL
		($2)::int, 	-- $2: DISCOUNTS_KEY INT NOT NULL
		($3)::smallint 	-- $3: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DiscountLocations/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DiscountLocations_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DiscountLocations_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DiscountLocations_HIST;
SELECT * FROM STG.WINCHK_DiscountLocations_HIST;
[STATUS=tbd]
*/

-- // TABLE 380: DiscountMaster
COPY INTO ARES.STG.SRC_DiscountMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DISCOUNT_MASTER_KEY INT NOT NULL
		($2)::int, 	-- $2: DISCOUNT_TYPE_KEY INT NULL
		($3)::char, 	-- $3: DISCOUNT_CODE CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DISCOUNT_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: DESCRIPTION VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: GL_ACCT INT NULL
		to_timestamp_ntz($7), 	-- $7: START_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($8), 	-- $8: END_DATE TIMESTAMP_LTZ NULL
		($9)::smallint, 	-- $9: AMOUNT_TYPE SMALLINT NOT NULL
		($10)::number, 	-- $10: DEFAULT_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: MAX_AMT NUMBER(10,4) NOT NULL
		($12)::boolean, 	-- $12: APPLY_TO_CHECKS BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($14)::char, 	-- $14: TELLER CHAR(8000) NOT NULL
		($15)::boolean, 	-- $15: IS_ACTIVE BOOLEAN NOT NULL
		($16)::boolean, 	-- $16: ROUTE_REQUIRED BOOLEAN NOT NULL
		($17)::smallint, 	-- $17: CUSTOMER_LEVEL SMALLINT NOT NULL
		($18)::int, 	-- $18: EARNED_CREDIT_TYPE_KEY INT NULL
		($19)::char, 	-- $19: APPLY_DISCOUNT_TO CHAR(8000) NOT NULL
		($20)::boolean 	-- $20: IS_AUTO_APPLIED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DiscountMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DiscountMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DiscountMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DiscountMaster_HIST;
SELECT * FROM STG.WINCHK_DiscountMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 381: DiscountMasterLoanProduct
COPY INTO ARES.STG.SRC_DiscountMasterLoanProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DISCOUNT_MASTER_LOAN_PRODUCT_KEY INT NOT NULL
		($2)::int, 	-- $2: DISCOUNT_MASTER_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_KEY INT NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DiscountMasterLoanProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DiscountMasterLoanProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DiscountMasterLoanProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DiscountMasterLoanProduct_HIST;
SELECT * FROM STG.WINCHK_DiscountMasterLoanProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 382: DiscountSecurity
COPY INTO ARES.STG.SRC_DiscountSecurity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DISCOUNT_SECURITY_KEY INT NOT NULL
		($2)::int, 	-- $2: DISCOUNTS_KEY INT NOT NULL
		($3)::int 	-- $3: SECURITYGROUP_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DiscountSecurity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DiscountSecurity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DiscountSecurity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DiscountSecurity_HIST;
SELECT * FROM STG.WINCHK_DiscountSecurity_HIST;
[STATUS=tbd]
*/

-- // TABLE 383: DiscountType
COPY INTO ARES.STG.SRC_DiscountType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DISCOUNT_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DiscountType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DiscountType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DiscountType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DiscountType_HIST;
SELECT * FROM STG.WINCHK_DiscountType_HIST;
[STATUS=tbd]
*/

-- // TABLE 384: DiscountUsed
COPY INTO ARES.STG.SRC_DiscountUsed_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DISCOUNT_USED_KEY INT NOT NULL
		($2)::int, 	-- $2: DISCOUNT_MASTER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::char, 	-- $6: PRODUCT_TYPE CHAR(8000) NOT NULL
		($7)::char, 	-- $7: LOAN_TYPE CHAR(8000) NOT NULL
		($8)::number, 	-- $8: DISCOUNT_AMT NUMBER(10,4) NOT NULL
		($9)::varchar, 	-- $9: ZIPCODE VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: ROUTE_CODE VARCHAR(8000) NOT NULL
		($11)::int, 	-- $11: LOAN_KEY INT NULL
		($12)::int, 	-- $12: TRANS_DETAIL_KEY INT NOT NULL
		($13)::int 	-- $13: CASHED_CHECK_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DiscountUsed/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DiscountUsed_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DiscountUsed_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DiscountUsed_HIST;
SELECT * FROM STG.WINCHK_DiscountUsed_HIST;
[STATUS=tbd]
*/

-- // TABLE 385: District
COPY INTO ARES.STG.SRC_District_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: DISTRICT_KEY smallint NOT NULL
		($2)::smallint, 	-- $2: REGION_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: DISTRICT_NAME VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: TELLER_ID_KEY INT NULL
		($5)::smallint 	-- $5: DISTRICT_NUMBER SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/District/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*District_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_District_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_District_HIST;
SELECT * FROM STG.WINCHK_District_HIST;
[STATUS=tbd]
*/

-- // TABLE 386: DMA
COPY INTO ARES.STG.SRC_DMA_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DMA INT NULL
		($2)::varchar, 	-- $2: Zip_Code VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: DMA_Name VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: Additional_DMA VARCHAR(8000) NULL
		($5)::int, 	-- $5: State_Code INT NULL
		($6)::int, 	-- $6: City_Code INT NULL
		($7)::varchar, 	-- $7: State VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: City VARCHAR(8000) NULL
		($9)::int, 	-- $9: City_Size INT NULL
		($10)::int, 	-- $10: NMR_Terr INT NULL
		($11)::int, 	-- $11: DMA_Rank INT NULL
		($12)::varchar, 	-- $12: Metro_Indicator VARCHAR(8000) NULL
		($13)::int, 	-- $13: DMA_KEY INT NOT NULL
		($14)::varchar 	-- $14: City_Name VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/DMA/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DMA_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DMA_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DMA_HIST;
SELECT * FROM STG.WINCHK_DMA_HIST;
[STATUS=tbd]
*/

-- // TABLE 387: Doc10000Trans
COPY INTO ARES.STG.SRC_Doc10000Trans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOC_10000_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::number, 	-- $6: CASH_IN NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: CASH_OUT NUMBER(10,4) NOT NULL
		($8)::boolean, 	-- $8: CASHED_CHECK BOOLEAN NOT NULL
		($9)::smallint 	-- $9: FORM_TYPE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Doc10000Trans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Doc10000Trans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Doc10000Trans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Doc10000Trans_HIST;
SELECT * FROM STG.WINCHK_Doc10000Trans_HIST;
[STATUS=tbd]
*/

-- // TABLE 388: Doc10000TransDetail
COPY INTO ARES.STG.SRC_Doc10000TransDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOC_10000_TRANS_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: DOC_10000_TRANS_KEY INT NOT NULL
		($3)::int 	-- $3: TRANS_DETAIL_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Doc10000TransDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Doc10000TransDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Doc10000TransDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Doc10000TransDetail_HIST;
SELECT * FROM STG.WINCHK_Doc10000TransDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 389: DocImage
COPY INTO ARES.STG.SRC_DocImage_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCIMAGE_KEY INT NOT NULL
		($2)::text, 	-- $2: DOC_DATA text NOT NULL
		($3)::varchar, 	-- $3: IMAGE_NAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: IMAGE_TYPE CHAR(8000) NOT NULL
		($6)::varchar 	-- $6: IMAGE_FORMAT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocImage/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocImage_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocImage_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocImage_HIST;
SELECT * FROM STG.WINCHK_DocImage_HIST;
[STATUS=tbd]
*/

-- // TABLE 390: DocPrint
COPY INTO ARES.STG.SRC_DocPrint_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCPRINT_KEY INT NOT NULL
		($2)::int, 	-- $2: DOCTEMPLATE_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NULL
		($4)::int, 	-- $4: LOCATION INT NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::text, 	-- $6: DOC_DATA text NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::int, 	-- $8: TRANS_DETAIL_KEY INT NULL
		($9)::int, 	-- $9: LOAN_KEY INT NULL
		($10)::int 	-- $10: CASHED_CHECK_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocPrint/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocPrint_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocPrint_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocPrint_HIST;
SELECT * FROM STG.WINCHK_DocPrint_HIST;
[STATUS=tbd]
*/

-- // TABLE 391: DocTemplate
COPY INTO ARES.STG.SRC_DocTemplate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCTEMPLATE_KEY INT NOT NULL
		($2)::text, 	-- $2: DOC_DATA text NOT NULL
		($3)::varchar, 	-- $3: DOC_NAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: DOC_FORMAT CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocTemplate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocTemplate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocTemplate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocTemplate_HIST;
SELECT * FROM STG.WINCHK_DocTemplate_HIST;
[STATUS=tbd]
*/

-- // TABLE 392: DocumentSignatureAction
COPY INTO ARES.STG.SRC_DocumentSignatureAction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: DOCUMENT_SIGNATURE_ACTION_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocumentSignatureAction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocumentSignatureAction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocumentSignatureAction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocumentSignatureAction_HIST;
SELECT * FROM STG.WINCHK_DocumentSignatureAction_HIST;
[STATUS=tbd]
*/

-- // TABLE 393: DocumentSigningStatus
COPY INTO ARES.STG.SRC_DocumentSigningStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUMENT_SIGNING_STATUS_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		($5)::varchar, 	-- $5: GENERATED_PIN VARCHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: IS_PIN_VALIDATED BOOLEAN NOT NULL
		to_timestamp_ntz($7) 	-- $7: VALIDATED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocumentSigningStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocumentSigningStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocumentSigningStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocumentSigningStatus_HIST;
SELECT * FROM STG.WINCHK_DocumentSigningStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 394: DocumentSplitHistory
COPY INTO ARES.STG.SRC_DocumentSplitHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUMENT_SPLIT_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: ORIGINAL_DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: ORIGINAL_DOCUWARE_CABINET_KEY INT NOT NULL
		($4)::int, 	-- $4: ORIGINAL_DWDOCID INT NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6) 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocumentSplitHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocumentSplitHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocumentSplitHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocumentSplitHistory_HIST;
SELECT * FROM STG.WINCHK_DocumentSplitHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 395: DocumentSplitHistoryDetail
COPY INTO ARES.STG.SRC_DocumentSplitHistoryDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUMENT_SPLIT_HISTORY_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: DOCUMENT_SPLIT_HISTORY_KEY INT NOT NULL
		($3)::int 	-- $3: REPAIRED_DOCUWARE_DOCUMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocumentSplitHistoryDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocumentSplitHistoryDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocumentSplitHistoryDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocumentSplitHistoryDetail_HIST;
SELECT * FROM STG.WINCHK_DocumentSplitHistoryDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 396: DocuwareCabinet
COPY INTO ARES.STG.SRC_DocuwareCabinet_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_CABINET_KEY INT NOT NULL
		($2)::smallint, 	-- $2: SERVER_ID smallint NOT NULL
		($3)::varchar, 	-- $3: CABINET_DB_TABLE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DW_REFERENCE_LOOKUP VARCHAR(8000) NULL
		($5)::int, 	-- $5: DOCUWARE_CABINET_TYPE_KEY INT NOT NULL
		($6)::boolean, 	-- $6: ENABLED BOOLEAN NOT NULL
		($7)::varchar, 	-- $7: ENVIRONMENT VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: DROP_FOLDER VARCHAR(8000) NOT NULL
		($9)::date, 	-- $9: START_DATE DATE NULL
		($10)::date, 	-- $10: END_DATE DATE NULL
		($11)::varchar, 	-- $11: SERVER_NAME VARCHAR(8000) NOT NULL
		($12)::boolean 	-- $12: IS_ACTIVE_DROP_FOLDER BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareCabinet/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareCabinet_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareCabinet_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareCabinet_HIST;
SELECT * FROM STG.WINCHK_DocuwareCabinet_HIST;
[STATUS=tbd]
*/

-- // TABLE 397: DocuwareCabinetEdit
COPY INTO ARES.STG.SRC_DocuwareCabinetEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_CABINET_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_CABINET_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CHANGED_BY_USER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NULL
		($7)::varchar 	-- $7: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareCabinetEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareCabinetEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareCabinetEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareCabinetEdit_HIST;
SELECT * FROM STG.WINCHK_DocuwareCabinetEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 398: DocuwareCabinetType
COPY INTO ARES.STG.SRC_DocuwareCabinetType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_CABINET_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareCabinetType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareCabinetType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareCabinetType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareCabinetType_HIST;
SELECT * FROM STG.WINCHK_DocuwareCabinetType_HIST;
[STATUS=tbd]
*/

-- // TABLE 399: DocuwareCashedCheckXRef
COPY INTO ARES.STG.SRC_DocuwareCashedCheckXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($2)::int 	-- $2: CASHED_CHECK_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareCashedCheckXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareCashedCheckXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareCashedCheckXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareCashedCheckXRef_HIST;
SELECT * FROM STG.WINCHK_DocuwareCashedCheckXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 400: DocuwareCustomerIdentificationXRef
COPY INTO ARES.STG.SRC_DocuwareCustomerIdentificationXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($2)::int 	-- $2: CUSTOMER_IDENTIFICATION_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareCustomerIdentificationXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareCustomerIdentificationXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareCustomerIdentificationXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareCustomerIdentificationXRef_HIST;
SELECT * FROM STG.WINCHK_DocuwareCustomerIdentificationXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 401: DocuwareDocument
COPY INTO ARES.STG.SRC_DocuwareDocument_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: DOCUWARE_CABINET_TYPE_KEY INT NOT NULL
		($6)::char, 	-- $6: IGNORE_TELLER CHAR(8000) NULL
		($7)::date, 	-- $7: IGNORE_DATE DATE NULL
		($8)::char, 	-- $8: IGNORE_TYPE CHAR(8000) NULL
		($9)::boolean 	-- $9: IS_REQUIRED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareDocument/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareDocument_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareDocument_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareDocument_HIST;
SELECT * FROM STG.WINCHK_DocuwareDocument_HIST;
[STATUS=tbd]
*/

-- // TABLE 402: DocuwareID
COPY INTO ARES.STG.SRC_DocuwareID_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_ID_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($4)::int, 	-- $4: DOCUWARE_CABINET_KEY INT NOT NULL
		($5)::int, 	-- $5: DWDOCID INT NOT NULL
		($6)::smallint, 	-- $6: PAGE_COUNT SMALLINT NULL
		($7)::boolean, 	-- $7: VERIFIED BOOLEAN NULL
		($8)::char, 	-- $8: VERIFIED_BY CHAR(8000) NULL
		to_timestamp_ntz($9) 	-- $9: VERIFIED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareID/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareID_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareID_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareID_HIST;
SELECT * FROM STG.WINCHK_DocuwareID_HIST;
[STATUS=tbd]
*/

-- // TABLE 403: DocuwareLoanDoc
COPY INTO ARES.STG.SRC_DocuwareLoanDoc_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_LOAN_DOC_KEY INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::int 	-- $4: LOAN_DOC_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareLoanDoc/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareLoanDoc_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareLoanDoc_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareLoanDoc_HIST;
SELECT * FROM STG.WINCHK_DocuwareLoanDoc_HIST;
[STATUS=tbd]
*/

-- // TABLE 404: DocuwareLoanLkup
COPY INTO ARES.STG.SRC_DocuwareLoanLkup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_LOAN_LKUP_KEY INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_CABINET_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::int 	-- $4: DWDOCID INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareLoanLkup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareLoanLkup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareLoanLkup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareLoanLkup_HIST;
SELECT * FROM STG.WINCHK_DocuwareLoanLkup_HIST;
[STATUS=tbd]
*/

-- // TABLE 405: DocuwareScanError
COPY INTO ARES.STG.SRC_DocuwareScanError_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_SCAN_ERROR_KEY INT NOT NULL
		($2)::int, 	-- $2: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::smallint, 	-- $4: ERROR_TYPE SMALLINT NOT NULL
		($5)::varchar, 	-- $5: ERROR_DESC VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: DOCUWARE_CABINET_KEY INT NOT NULL
		($7)::int 	-- $7: DWDOCID INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareScanError/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareScanError_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareScanError_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareScanError_HIST;
SELECT * FROM STG.WINCHK_DocuwareScanError_HIST;
[STATUS=tbd]
*/

-- // TABLE 406: DocuwareScannedDocXRef
COPY INTO ARES.STG.SRC_DocuwareScannedDocXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($2)::int 	-- $2: SCANNED_DOCUMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareScannedDocXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareScannedDocXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareScannedDocXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareScannedDocXRef_HIST;
SELECT * FROM STG.WINCHK_DocuwareScannedDocXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 407: DocuwareStatus
COPY INTO ARES.STG.SRC_DocuwareStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARESTATUS_KEY INT NOT NULL
		($2)::date, 	-- $2: DOC_DATE DATE NOT NULL
		($3)::int, 	-- $3: LOCATION INT NOT NULL
		($4)::varchar, 	-- $4: DOC_TYPE VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: IGNORE_TELLER VARCHAR(8000) NULL
		($6)::date, 	-- $6: IGNORE_DATE DATE NULL
		($7)::char, 	-- $7: IGNORE_TYPE CHAR(8000) NULL
		($8)::int 	-- $8: DWDOCID INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareStatus_HIST;
SELECT * FROM STG.WINCHK_DocuwareStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 408: DocuwareStatusUpdate
COPY INTO ARES.STG.SRC_DocuwareStatusUpdate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_STATUS_UPDATE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SELECT_FIELDS VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: FROM_FULL_TABLE_PATH VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: WHERE_CLAUSE VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: DESCRIPTION VARCHAR(8000) NOT NULL
		($6)::boolean 	-- $6: ENABLED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareStatusUpdate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareStatusUpdate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareStatusUpdate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareStatusUpdate_HIST;
SELECT * FROM STG.WINCHK_DocuwareStatusUpdate_HIST;
[STATUS=tbd]
*/

-- // TABLE 409: DocuwareStatusXRef
COPY INTO ARES.STG.SRC_DocuwareStatusXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($2)::int 	-- $2: DOCUWARESTATUS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareStatusXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareStatusXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareStatusXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareStatusXRef_HIST;
SELECT * FROM STG.WINCHK_DocuwareStatusXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 410: DocuwareVisitorDocXRef
COPY INTO ARES.STG.SRC_DocuwareVisitorDocXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($2)::int 	-- $2: VISITOR_DOCUMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareVisitorDocXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareVisitorDocXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareVisitorDocXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareVisitorDocXRef_HIST;
SELECT * FROM STG.WINCHK_DocuwareVisitorDocXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 411: DocuwareVisitorEmailAttachmentXref
COPY INTO ARES.STG.SRC_DocuwareVisitorEmailAttachmentXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DOCUWARE_VISITOR_EMAIL_ATTACHMENT_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_EMAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_DOCUMENT_KEY INT NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: ATTACHMENT_NAME VARCHAR(8000) NOT NULL
		($7)::int 	-- $7: EMAIL_ATTACHMENT_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DocuwareVisitorEmailAttachmentXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DocuwareVisitorEmailAttachmentXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DocuwareVisitorEmailAttachmentXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DocuwareVisitorEmailAttachmentXref_HIST;
SELECT * FROM STG.WINCHK_DocuwareVisitorEmailAttachmentXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 412: DrawerBag
COPY INTO ARES.STG.SRC_DrawerBag_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWER_BAG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::varchar, 	-- $3: BAG_NUMBER VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::int, 	-- $6: TRANS_DETAIL_KEY INT NOT NULL
		($7)::int, 	-- $7: DRAWERZ_KEY INT NOT NULL
		($8)::char, 	-- $8: DELETED_BY CHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: DATE_DELETED TIMESTAMP_LTZ NULL
		($10)::int, 	-- $10: FROM_DRAWER_BAG_KEY INT NULL
		($11)::char, 	-- $11: OS_CATEGORY CHAR(8000) NULL
		($12)::varchar, 	-- $12: OS_REASON VARCHAR(8000) NULL
		($13)::int 	-- $13: DELETE_TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerBag/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerBag_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerBag_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerBag_HIST;
SELECT * FROM STG.WINCHK_DrawerBag_HIST;
[STATUS=tbd]
*/

-- // TABLE 413: DrawerBagParsedCash
COPY INTO ARES.STG.SRC_DrawerBagParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWER_BAG_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWER_BAG_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerBagParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerBagParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerBagParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerBagParsedCash_HIST;
SELECT * FROM STG.WINCHK_DrawerBagParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 414: DrawerMaster
COPY INTO ARES.STG.SRC_DrawerMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWER_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DRAWER_OPENED TIMESTAMP_LTZ NULL
		($5)::number, 	-- $5: DRAWER_MISC NUMBER(19,4) NULL
		($6)::number, 	-- $6: DRAWER_CCARD NUMBER(19,4) NOT NULL
		($7)::number, 	-- $7: DRAWER_CHK NUMBER(19,4) NOT NULL
		($8)::number, 	-- $8: DRAWER_PRA NUMBER(19,4) NOT NULL
		($9)::int, 	-- $9: DRAWER_CHK_CNT INT NOT NULL
		($10)::int, 	-- $10: DRAWER_PRA_CNT INT NOT NULL
		($11)::boolean, 	-- $11: AUDIT_COMPLETED BOOLEAN NOT NULL
		($12)::int, 	-- $12: DRAWER_BAG_CHK_CNT INT NOT NULL
		($13)::number, 	-- $13: DRAWER_BAG_CHK_AMT NUMBER(19,4) NOT NULL
		($14)::number, 	-- $14: PRA_DEBIT NUMBER(19,4) NOT NULL
		($15)::int, 	-- $15: PRA_DEBIT_COUNT INT NOT NULL
		($16)::int, 	-- $16: DRAWERZ_KEY INT NOT NULL
		($17)::int 	-- $17: FROM_DRAWER_BAG_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerMaster_HIST;
SELECT * FROM STG.WINCHK_DrawerMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 415: DrawerMasterParsedCash
COPY INTO ARES.STG.SRC_DrawerMasterParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWER_MASTER_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWER_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerMasterParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerMasterParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerMasterParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerMasterParsedCash_HIST;
SELECT * FROM STG.WINCHK_DrawerMasterParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 416: DrawerService
COPY INTO ARES.STG.SRC_DrawerService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWER_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: SERVICE_DETAIL_KEY INT NOT NULL
		($5)::int 	-- $5: DRAWER_QTY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerService_HIST;
SELECT * FROM STG.WINCHK_DrawerService_HIST;
[STATUS=tbd]
*/

-- // TABLE 417: DrawerX
COPY INTO ARES.STG.SRC_DrawerX_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERX_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::number, 	-- $5: DRAWERX_MISC NUMBER(19,4) NOT NULL
		($6)::number 	-- $6: DRAWERX_CCARD NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerX/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerX_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerX_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerX_HIST;
SELECT * FROM STG.WINCHK_DrawerX_HIST;
[STATUS=tbd]
*/

-- // TABLE 418: DrawerXService
COPY INTO ARES.STG.SRC_DrawerXService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERX_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWERX_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: SERVICE_DETAIL_KEY INT NOT NULL
		($5)::int 	-- $5: DRAWERX_QTY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerXService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerXService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerXService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerXService_HIST;
SELECT * FROM STG.WINCHK_DrawerXService_HIST;
[STATUS=tbd]
*/

-- // TABLE 419: DrawerZ
COPY INTO ARES.STG.SRC_DrawerZ_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERZ_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::number, 	-- $5: DRAWERZ_CHK NUMBER(19,4) NOT NULL
		($6)::number, 	-- $6: DRAWERZ_PRA NUMBER(19,4) NOT NULL
		($7)::int, 	-- $7: DRAWERZ_CHK_CNT INT NOT NULL
		($8)::int, 	-- $8: DRAWERZ_PRA_CNT INT NOT NULL
		($9)::number, 	-- $9: DRAWERZ_MISC NUMBER(19,4) NOT NULL
		($10)::number, 	-- $10: DRAWERZ_CCARD NUMBER(19,4) NOT NULL
		($11)::number, 	-- $11: CNTZ_MISC NUMBER(19,4) NOT NULL
		($12)::number, 	-- $12: CNTZ_CCARD NUMBER(19,4) NOT NULL
		($13)::varchar, 	-- $13: OS_REASON VARCHAR(8000) NULL
		($14)::char, 	-- $14: OS_CATEGORY CHAR(8000) NULL
		to_timestamp_ntz($15), 	-- $15: DRAWER_OPENED TIMESTAMP_LTZ NOT NULL
		($16)::int, 	-- $16: DRAWERZ_BAG_CHK_CNT INT NOT NULL
		($17)::number, 	-- $17: DRAWERZ_BAG_CHK_AMT NUMBER(19,4) NOT NULL
		($18)::number, 	-- $18: PRA_DEBIT NUMBER(19,4) NOT NULL
		($19)::int 	-- $19: PRA_DEBIT_COUNT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerZ/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerZ_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerZ_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerZ_HIST;
SELECT * FROM STG.WINCHK_DrawerZ_HIST;
[STATUS=tbd]
*/

-- // TABLE 420: DrawerZCalcParsedCash
COPY INTO ARES.STG.SRC_DrawerZCalcParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERZ_CALC_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWERZ_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerZCalcParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerZCalcParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerZCalcParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerZCalcParsedCash_HIST;
SELECT * FROM STG.WINCHK_DrawerZCalcParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 421: DrawerZCash
COPY INTO ARES.STG.SRC_DrawerZCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERZ_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWERZ_KEY INT NOT NULL
		($3)::int, 	-- $3: CURRENCY_KEY INT NOT NULL
		($4)::number, 	-- $4: ENTERED_AMOUNT NUMBER(19,4) NOT NULL
		($5)::number 	-- $5: CALCULATED_AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerZCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerZCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerZCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerZCash_HIST;
SELECT * FROM STG.WINCHK_DrawerZCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 422: DrawerZDrawerBag
COPY INTO ARES.STG.SRC_DrawerZDrawerBag_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERZ_KEY INT NOT NULL
		($2)::int 	-- $2: DRAWER_BAG_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerZDrawerBag/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerZDrawerBag_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerZDrawerBag_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerZDrawerBag_HIST;
SELECT * FROM STG.WINCHK_DrawerZDrawerBag_HIST;
[STATUS=tbd]
*/

-- // TABLE 423: DrawerZEnteredParsedCash
COPY INTO ARES.STG.SRC_DrawerZEnteredParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERZ_ENTERED_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWERZ_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerZEnteredParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerZEnteredParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerZEnteredParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerZEnteredParsedCash_HIST;
SELECT * FROM STG.WINCHK_DrawerZEnteredParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 424: DrawerZService
COPY INTO ARES.STG.SRC_DrawerZService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DRAWERZ_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: DRAWERZ_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: SERVICE_DETAIL_KEY INT NOT NULL
		($5)::int, 	-- $5: DRAWERZ_QTY INT NOT NULL
		($6)::int 	-- $6: CNTZ_QTY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DrawerZService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DrawerZService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DrawerZService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DrawerZService_HIST;
SELECT * FROM STG.WINCHK_DrawerZService_HIST;
[STATUS=tbd]
*/

-- // TABLE 425: DualApprovalMessage
COPY INTO ARES.STG.SRC_DualApprovalMessage_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DUAL_APPROVAL_MESSAGE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: APPROVAL_MESSAGE VARCHAR(8000) NOT NULL
		($3)::int 	-- $3: MESSAGE_ID INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/DualApprovalMessage/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*DualApprovalMessage_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_DualApprovalMessage_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_DualApprovalMessage_HIST;
SELECT * FROM STG.WINCHK_DualApprovalMessage_HIST;
[STATUS=tbd]
*/

-- // TABLE 426: EarnedCreditTrans
COPY INTO ARES.STG.SRC_EarnedCreditTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EARNED_CREDIT_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_EARNED_CREDIT_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::number, 	-- $6: EARNED_AMT NUMBER(10,4) NOT NULL
		($7)::boolean, 	-- $7: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($8) 	-- $8: REVERSED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/EarnedCreditTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EarnedCreditTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EarnedCreditTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EarnedCreditTrans_HIST;
SELECT * FROM STG.WINCHK_EarnedCreditTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 427: EarnedCreditType
COPY INTO ARES.STG.SRC_EarnedCreditType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EARNED_CREDIT_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: IS_ENABLED BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: UPDATED_DATE TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NULL
		($9)::int 	-- $9: ACCOUNT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EarnedCreditType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EarnedCreditType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EarnedCreditType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EarnedCreditType_HIST;
SELECT * FROM STG.WINCHK_EarnedCreditType_HIST;
[STATUS=tbd]
*/

-- // TABLE 428: EditHistory
COPY INTO ARES.STG.SRC_EditHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EDIT_HISTORY_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ACTION CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: TABLE_NAME VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: TABLE_KEY INT NOT NULL
		($7)::varchar, 	-- $7: FIELD_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: OLD_VALUE VARCHAR(8000) NULL
		($9)::varchar 	-- $9: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/EditHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EditHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EditHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EditHistory_HIST;
SELECT * FROM STG.WINCHK_EditHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 429: EmailAttachmentType
COPY INTO ARES.STG.SRC_EmailAttachmentType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EMAIL_ATTACHMENT_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: TYPE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean 	-- $4: ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmailAttachmentType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmailAttachmentType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmailAttachmentType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmailAttachmentType_HIST;
SELECT * FROM STG.WINCHK_EmailAttachmentType_HIST;
[STATUS=tbd]
*/

-- // TABLE 430: EmailDisposition
COPY INTO ARES.STG.SRC_EmailDisposition_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EMAIL_DISPOSITION_KEY INT NOT NULL
		($2)::varchar 	-- $2: DISPOSITION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmailDisposition/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmailDisposition_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmailDisposition_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmailDisposition_HIST;
SELECT * FROM STG.WINCHK_EmailDisposition_HIST;
[STATUS=tbd]
*/

-- // TABLE 431: EmailTemplate
COPY INTO ARES.STG.SRC_EmailTemplate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EMAIL_TEMPLATE_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::smallint, 	-- $4: EMAIL_ID SMALLINT NOT NULL
		($5)::varchar, 	-- $5: EMAIL_FROM VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: SUBJECT_LINE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: BODY_HTML VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: NOTES VARCHAR(8000) NOT NULL
		($9)::datetime, 	-- $9: DATE_UPDATED datetime NULL
		($10)::char, 	-- $10: UPDATED_BY CHAR(8000) NOT NULL
		($11)::char 	-- $11: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmailTemplate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmailTemplate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmailTemplate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmailTemplate_HIST;
SELECT * FROM STG.WINCHK_EmailTemplate_HIST;
[STATUS=tbd]
*/

-- // TABLE 432: EmailVerification
COPY INTO ARES.STG.SRC_EmailVerification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EMAIL_VERIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::varchar, 	-- $3: EMAIL VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CODE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: EXPIRATION_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: VERIFIED_DATE TIMESTAMP_LTZ NULL
		($7)::char, 	-- $7: VERIFIED_BY CHAR(8000) NULL
		to_timestamp_ntz($8), 	-- $8: VERIFICATION_REMOVED_DATE TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: VERIFICATION_REMOVED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmailVerification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmailVerification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmailVerification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmailVerification_HIST;
SELECT * FROM STG.WINCHK_EmailVerification_HIST;
[STATUS=tbd]
*/

-- // TABLE 433: EmploymentRegions
COPY INTO ARES.STG.SRC_EmploymentRegions_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EMPLOYMENT_REGION_ID INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: EMAIL_RECIPIENTS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmploymentRegions/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmploymentRegions_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmploymentRegions_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmploymentRegions_HIST;
SELECT * FROM STG.WINCHK_EmploymentRegions_HIST;
[STATUS=tbd]
*/

-- // TABLE 434: EmploymentRequest
COPY INTO ARES.STG.SRC_EmploymentRequest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EMPLOYMENT_REQUEST_ID INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::varchar, 	-- $3: EMAIL VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: FIRST_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: LAST_NAME VARCHAR(8000) NULL
		($6)::int, 	-- $6: EMPLOYMENT_REGION_ID INT NULL
		($7)::varchar, 	-- $7: FILE_EXTENSION VARCHAR(8000) NULL
		($8)::variant, 	-- $8: FILE_CONTENTS VARIANT NOT NULL
		($9)::boolean 	-- $9: SENT_TO_MANAGER BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmploymentRequest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmploymentRequest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmploymentRequest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmploymentRequest_HIST;
SELECT * FROM STG.WINCHK_EmploymentRequest_HIST;
[STATUS=tbd]
*/

-- // TABLE 435: EmploymentStatus
COPY INTO ARES.STG.SRC_EmploymentStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: EmploymentStatusKey CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EmploymentStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EmploymentStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EmploymentStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EmploymentStatus_HIST;
SELECT * FROM STG.WINCHK_EmploymentStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 436: EndOfDayInventoryDetail
COPY INTO ARES.STG.SRC_EndOfDayInventoryDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EODR_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number, 	-- $3: ONHAND_AMT NUMBER(10,4) NOT NULL
		($4)::boolean, 	-- $4: DEFAULTED BOOLEAN NOT NULL
		($5)::number, 	-- $5: RI_BALANCE NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: CAB_FEE_RECEIVABLE_AMT NUMBER(10,4) NULL
		($7)::number, 	-- $7: FEE_RECEIVABLE_BAL NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: ACCRUED_INTEREST_RECEIVABLE_BAL NUMBER(10,4) NOT NULL
		($9)::number 	-- $9: DEFERRED_REVENUE_LIABILITY_BAL NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EndOfDayInventoryDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EndOfDayInventoryDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EndOfDayInventoryDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EndOfDayInventoryDetail_HIST;
SELECT * FROM STG.WINCHK_EndOfDayInventoryDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 437: EndOfDayRpt
COPY INTO ARES.STG.SRC_EndOfDayRpt_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EODR_KEY INT NOT NULL
		($2)::int, 	-- $2: BALSHEET_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::boolean 	-- $5: RE_GEN BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EndOfDayRpt/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EndOfDayRpt_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EndOfDayRpt_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EndOfDayRpt_HIST;
SELECT * FROM STG.WINCHK_EndOfDayRpt_HIST;
[STATUS=tbd]
*/

-- // TABLE 438: EndOfDayRptDetail
COPY INTO ARES.STG.SRC_EndOfDayRptDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EODR_DET_KEY INT NOT NULL
		($2)::int, 	-- $2: EODR_KEY INT NOT NULL
		($3)::smallint, 	-- $3: ORDER_NUM smallint NOT NULL
		($4)::varchar, 	-- $4: EODR_DESC VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: ACCOUNT1 VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: QTY1 VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: AMOUNT1 VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: FEE1 VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: ACCOUNT2 VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: QTY2 VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: AMOUNT2 VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: FEE2 VARCHAR(8000) NULL
		($13)::boolean, 	-- $13: HEADER BOOLEAN NOT NULL
		($14)::boolean 	-- $14: FOOTER BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EndOfDayRptDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EndOfDayRptDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EndOfDayRptDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EndOfDayRptDetail_HIST;
SELECT * FROM STG.WINCHK_EndOfDayRptDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 439: EOscarBatch
COPY INTO ARES.STG.SRC_EOscarBatch_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EOSCAR_BATCH_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE_ENTERED DATE NOT NULL
		($3)::int, 	-- $3: BATCH_ID INT NOT NULL
		($4)::int, 	-- $4: QUEUE_ID INT NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::char, 	-- $6: SEND_RECV CHAR(8000) NOT NULL
		($7)::varchar 	-- $7: RAW_XML VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EOscarBatch/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EOscarBatch_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EOscarBatch_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EOscarBatch_HIST;
SELECT * FROM STG.WINCHK_EOscarBatch_HIST;
[STATUS=tbd]
*/

-- // TABLE 440: EOscarBatchDetail
COPY INTO ARES.STG.SRC_EOscarBatchDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EOSCAR_BATCH_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: EOSCAR_BATCH_KEY_RECV INT NOT NULL
		($3)::int, 	-- $3: EOSCAR_BATCH_KEY_SENT INT NULL
		($4)::int, 	-- $4: ACDV_IDENTIFIER INT NOT NULL
		($5)::varchar, 	-- $5: ACDV_CONTROL_NUMBER VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: RISREPT_KEY INT NOT NULL
		($7)::int, 	-- $7: CUSTOMER_KEY INT NULL
		($8)::boolean, 	-- $8: MANUAL_EXPORT BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: MANUAL_REVIEW BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: PROCESSED BOOLEAN NOT NULL
		($11)::varchar, 	-- $11: XML_RECV VARCHAR(8000) NOT NULL
		($12)::varchar 	-- $12: XML_SENT VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/EOscarBatchDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EOscarBatchDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EOscarBatchDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EOscarBatchDetail_HIST;
SELECT * FROM STG.WINCHK_EOscarBatchDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 441: EOscarDetailDisputeCode
COPY INTO ARES.STG.SRC_EOscarDetailDisputeCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EOSCAR_DETAIL_DISPUTE_CODE_KEY INT NOT NULL
		($2)::int, 	-- $2: EOSCAR_BATCH_DETAIL_KEY INT NOT NULL
		($3)::int 	-- $3: EOSCAR_DISPUTE_CODE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EOscarDetailDisputeCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EOscarDetailDisputeCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EOscarDetailDisputeCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EOscarDetailDisputeCode_HIST;
SELECT * FROM STG.WINCHK_EOscarDetailDisputeCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 442: EOscarDisputeCode
COPY INTO ARES.STG.SRC_EOscarDisputeCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EOSCAR_DISPUTE_CODE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DISPUTE_CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: MANUAL_PROCESS BOOLEAN NOT NULL
		($5)::boolean 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EOscarDisputeCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EOscarDisputeCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EOscarDisputeCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EOscarDisputeCode_HIST;
SELECT * FROM STG.WINCHK_EOscarDisputeCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 443: ErrorLog
COPY INTO ARES.STG.SRC_ErrorLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ErrorLogKey INT NOT NULL
		($2)::varchar, 	-- $2: ErrorMessage VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SupportMessage VARCHAR(8000) NULL
		($4)::int, 	-- $4: VISITOR_KEY INT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NULL
		($6)::int, 	-- $6: APPLICATION_KEY INT NULL
		($7)::int, 	-- $7: LOAN_KEY INT NULL
		($8)::int, 	-- $8: Severity INT NULL
		($9)::varchar, 	-- $9: Client VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: Tier VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: CodeLocation VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: ExceptionText VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: StateDump VARCHAR(8000) NULL
		($14)::int, 	-- $14: TransDetail INT NULL
		($15)::varchar, 	-- $15: WebServer VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: AppServer VARCHAR(8000) NULL
		($17)::varchar, 	-- $17: UserAgent VARCHAR(8000) NULL
		($18)::varchar, 	-- $18: Browser VARCHAR(8000) NULL
		($19)::datetime, 	-- $19: DateEntered datetime NOT NULL
		($20)::varchar, 	-- $20: CurrentPage VARCHAR(8000) NULL
		($21)::varchar, 	-- $21: ReferringPage VARCHAR(8000) NULL
		($22)::boolean, 	-- $22: SupportRedirect BOOLEAN NULL
		($23)::datetime, 	-- $23: DateEnteredDay datetime NULL
		($24)::datetime, 	-- $24: DateEnteredHour datetime NULL
		($25)::datetime 	-- $25: DateEnteredMinute datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/ErrorLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ErrorLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ErrorLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ErrorLog_HIST;
SELECT * FROM STG.WINCHK_ErrorLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 444: ESignDocMethod
COPY INTO ARES.STG.SRC_ESignDocMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ESignDocMethodKey SMALLINT NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ESignDocMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ESignDocMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ESignDocMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ESignDocMethod_HIST;
SELECT * FROM STG.WINCHK_ESignDocMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 445: ESignLoan
COPY INTO ARES.STG.SRC_ESignLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::variant, 	-- $2: DOCUMENT VARIANT NULL
		($3)::smallint, 	-- $3: ESIGN_STATUS_KEY SMALLINT NOT NULL
		to_timestamp_ntz($4) 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ESignLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ESignLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ESignLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ESignLoan_HIST;
SELECT * FROM STG.WINCHK_ESignLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 446: ESignLoanDoc
COPY INTO ARES.STG.SRC_ESignLoanDoc_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ESIGN_LOAN_DOC_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_DOC_KEY INT NULL
		($4)::int, 	-- $4: DOCUWARE_DOCUMENT_KEY INT NULL
		($5)::boolean, 	-- $5: HAS_BARCODE BOOLEAN NOT NULL
		($6)::int, 	-- $6: PAGE_NUMBER INT NULL
		($7)::boolean, 	-- $7: IS_SUBMITTED BOOLEAN NOT NULL
		($8)::varchar, 	-- $8: SUBMIT_ERROR VARCHAR(8000) NULL
		to_timestamp_ntz($9) 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ESignLoanDoc/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ESignLoanDoc_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ESignLoanDoc_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ESignLoanDoc_HIST;
SELECT * FROM STG.WINCHK_ESignLoanDoc_HIST;
[STATUS=tbd]
*/

-- // TABLE 447: ESignLoanStatus
COPY INTO ARES.STG.SRC_ESignLoanStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ESIGN_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ESignLoanStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ESignLoanStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ESignLoanStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ESignLoanStatus_HIST;
SELECT * FROM STG.WINCHK_ESignLoanStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 448: ESignOptIn
COPY INTO ARES.STG.SRC_ESignOptIn_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ESIGN_OPT_IN_KEY INT NOT NULL
		($2)::int, 	-- $2: ESIGN_OPT_IN_DOC_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::smallint 	-- $4: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ESignOptIn/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ESignOptIn_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ESignOptIn_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ESignOptIn_HIST;
SELECT * FROM STG.WINCHK_ESignOptIn_HIST;
[STATUS=tbd]
*/

-- // TABLE 449: ESignOptInDoc
COPY INTO ARES.STG.SRC_ESignOptInDoc_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ESIGN_OPT_IN_DOC_KEY INT NOT NULL
		($2)::char, 	-- $2: LANGUAGE CHAR(8000) NULL
		($3)::varchar, 	-- $3: DOC_NAME VARCHAR(8000) NULL
		to_timestamp_ntz($4), 	-- $4: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		($6)::variant 	-- $6: DOCUMENT VARIANT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ESignOptInDoc/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ESignOptInDoc_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ESignOptInDoc_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ESignOptInDoc_HIST;
SELECT * FROM STG.WINCHK_ESignOptInDoc_HIST;
[STATUS=tbd]
*/

-- // TABLE 450: ExchangeRate
COPY INTO ARES.STG.SRC_ExchangeRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXCHANGE_RATE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CURRENCY_BASE_CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CURRENCY_CODE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CURRENCY_NAME VARCHAR(8000) NOT NULL
		($5)::decimal, 	-- $5: CURRENCY_RATE DECIMAL(38,0) NOT NULL
		($6)::decimal, 	-- $6: CURRENCY_INVERSE_RATE DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($7), 	-- $7: UTC_TIME_STAMP TIMESTAMP_LTZ NOT NULL
		($8)::smallint, 	-- $8: ACCESSES_REMAINING smallint NOT NULL
		($9)::smallint, 	-- $9: ACCESSES_SO_FAR smallint NOT NULL
		to_timestamp_ntz($10) 	-- $10: LAST_UPDATED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExchangeRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExchangeRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExchangeRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExchangeRate_HIST;
SELECT * FROM STG.WINCHK_ExchangeRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 451: ExchangeRateDaily
COPY INTO ARES.STG.SRC_ExchangeRateDaily_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXCHANGE_RATE_DAILY_KEY INT NOT NULL
		($2)::date, 	-- $2: EXCHANGE_RATE_DATE DATE NOT NULL
		($3)::char, 	-- $3: CURRENCY_CODE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: BASE_CURRENCY_CODE CHAR(8000) NOT NULL
		($5)::decimal 	-- $5: RATE DECIMAL(38,0) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExchangeRateDaily/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExchangeRateDaily_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExchangeRateDaily_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExchangeRateDaily_HIST;
SELECT * FROM STG.WINCHK_ExchangeRateDaily_HIST;
[STATUS=tbd]
*/

-- // TABLE 452: ExcludeFromCapsHistory
COPY INTO ARES.STG.SRC_ExcludeFromCapsHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXCLUDE_FROM_CAPS_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::boolean, 	-- $6: EXCLUDE_FROM_CAPS BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: EXCLUDE_FROM_CAPS_ACH BOOLEAN NOT NULL
		($8)::varchar 	-- $8: OPT_OUT_REASON VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExcludeFromCapsHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExcludeFromCapsHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExcludeFromCapsHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExcludeFromCapsHistory_HIST;
SELECT * FROM STG.WINCHK_ExcludeFromCapsHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 453: ExpenseType
COPY INTO ARES.STG.SRC_ExpenseType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXPENSE_TYPE_KEY INT NOT NULL
		($2)::int, 	-- $2: CODE INT NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: HELP_DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExpenseType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExpenseType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExpenseType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExpenseType_HIST;
SELECT * FROM STG.WINCHK_ExpenseType_HIST;
[STATUS=tbd]
*/

-- // TABLE 454: ExportProfile
COPY INTO ARES.STG.SRC_ExportProfile_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXPORT_PROFILE_KEY INT NOT NULL
		($2)::varchar 	-- $2: PROFILE_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExportProfile/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExportProfile_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExportProfile_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExportProfile_HIST;
SELECT * FROM STG.WINCHK_ExportProfile_HIST;
[STATUS=tbd]
*/

-- // TABLE 455: ExportProfilePath
COPY INTO ARES.STG.SRC_ExportProfilePath_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXPORT_PROFILE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ENVIRONMENT_NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: EXPORT_PATH VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExportProfilePath/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExportProfilePath_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExportProfilePath_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExportProfilePath_HIST;
SELECT * FROM STG.WINCHK_ExportProfilePath_HIST;
[STATUS=tbd]
*/

-- // TABLE 456: ExternalAppConfig
COPY INTO ARES.STG.SRC_ExternalAppConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXTERNAL_APP_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: EXTERNAL_APPS_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CONFIG_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CONFIG_VALUE VARCHAR(8000) NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: UPDATED_DATE datetime NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExternalAppConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExternalAppConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExternalAppConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExternalAppConfig_HIST;
SELECT * FROM STG.WINCHK_ExternalAppConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 457: ExternalAppConfigHistory
COPY INTO ARES.STG.SRC_ExternalAppConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXTERNAL_APP_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: EXTERNAL_APPS_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CONFIG_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CONFIG_VALUE VARCHAR(8000) NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: UPDATED_DATE datetime NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExternalAppConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExternalAppConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExternalAppConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExternalAppConfigHistory_HIST;
SELECT * FROM STG.WINCHK_ExternalAppConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 458: ExternalAppMaster
COPY INTO ARES.STG.SRC_ExternalAppMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXTERNAL_APP_MASTER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: TASK_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SERVER_NAME VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: DTS_OR_EXE CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: RUN_FILE VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: RUN_START_FOLDER VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: DESCRIPTION VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: STATUS_DESC VARCHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: NEXT_RUN_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($10), 	-- $10: LAST_RUN_DATE TIMESTAMP_LTZ NULL
		($11)::varchar 	-- $11: LAST_RESULT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExternalAppMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExternalAppMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExternalAppMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExternalAppMaster_HIST;
SELECT * FROM STG.WINCHK_ExternalAppMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 459: ExternalAppRunDates
COPY INTO ARES.STG.SRC_ExternalAppRunDates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXTERNAL_APPS_RUN_DATES_KEY INT NOT NULL
		($2)::int, 	-- $2: EXTERNAL_APPS_KEY INT NOT NULL
		($3)::date, 	-- $3: RUN_DATE DATE NULL
		($4)::smallint 	-- $4: priority SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExternalAppRunDates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExternalAppRunDates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExternalAppRunDates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExternalAppRunDates_HIST;
SELECT * FROM STG.WINCHK_ExternalAppRunDates_HIST;
[STATUS=tbd]
*/

-- // TABLE 460: ExternalApps
COPY INTO ARES.STG.SRC_ExternalApps_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: EXTERNAL_APPS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: APP_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: APP_INSTANCE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: APP_DESCRIPTION VARCHAR(8000) NULL
		($5)::varchar 	-- $5: CMD_NAMED_ARG VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ExternalApps/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ExternalApps_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ExternalApps_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ExternalApps_HIST;
SELECT * FROM STG.WINCHK_ExternalApps_HIST;
[STATUS=tbd]
*/

-- // TABLE 461: EyeColor
COPY INTO ARES.STG.SRC_EyeColor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: EYE_COLOR_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NULL
		($3)::char, 	-- $3: POLICE_GOLD_EXPORT_LAS_VEGAS_DESCRIPTION CHAR(8000) NOT NULL
		($4)::char, 	-- $4: POLICE_GOLD_EXPORT_SPARKS_DESCRIPTION CHAR(8000) NOT NULL
		($5)::char 	-- $5: POLICE_GOLD_EXPORT_ALABAMA_DESCRIPTION CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/EyeColor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*EyeColor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_EyeColor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_EyeColor_HIST;
SELECT * FROM STG.WINCHK_EyeColor_HIST;
[STATUS=tbd]
*/

-- // TABLE 462: FcrmAmlCheckTypeXref
COPY INTO ARES.STG.SRC_FcrmAmlCheckTypeXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FCRM_AML_CHECKTYPE_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: FCRM_AML_TRANS_CODE_KEY INT NOT NULL
		($3)::int, 	-- $3: CHECK_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FcrmAmlCheckTypeXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FcrmAmlCheckTypeXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FcrmAmlCheckTypeXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FcrmAmlCheckTypeXref_HIST;
SELECT * FROM STG.WINCHK_FcrmAmlCheckTypeXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 463: FcrmAmlServiceXRef
COPY INTO ARES.STG.SRC_FcrmAmlServiceXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FCRM_AML_SERVICE_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: FCRM_AML_TRANS_CODE_KEY INT NOT NULL
		($3)::int, 	-- $3: SERVICE_MASTER_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FcrmAmlServiceXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FcrmAmlServiceXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FcrmAmlServiceXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FcrmAmlServiceXRef_HIST;
SELECT * FROM STG.WINCHK_FcrmAmlServiceXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 464: FcrmAmlTransCode
COPY INTO ARES.STG.SRC_FcrmAmlTransCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FCRM_AML_TRANS_CODE_KEY INT NOT NULL
		($2)::char, 	-- $2: CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DUPLICATE_CASH_RECORD BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_ENABLED BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_UPDATED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/FcrmAmlTransCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FcrmAmlTransCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FcrmAmlTransCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FcrmAmlTransCode_HIST;
SELECT * FROM STG.WINCHK_FcrmAmlTransCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 465: FcrmAmlTransCodeXRef
COPY INTO ARES.STG.SRC_FcrmAmlTransCodeXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FCRM_AML_TRANS_CODE_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: FCRM_AML_TRANS_CODE_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_CODE INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FcrmAmlTransCodeXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FcrmAmlTransCodeXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FcrmAmlTransCodeXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FcrmAmlTransCodeXRef_HIST;
SELECT * FROM STG.WINCHK_FcrmAmlTransCodeXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 466: Feature
COPY INTO ARES.STG.SRC_Feature_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FEATURE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::varchar 	-- $6: DEFINITION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Feature/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Feature_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Feature_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Feature_HIST;
SELECT * FROM STG.WINCHK_Feature_HIST;
[STATUS=tbd]
*/

-- // TABLE 467: FileUploadQueue
COPY INTO ARES.STG.SRC_FileUploadQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FILE_UPLOAD_QUEUE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FILE_NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($4)::boolean, 	-- $4: IS_UPLOAD_READY BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_UPLOAD_COMPLETE BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: UPLOAD_CONFIG VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: UPLOAD_ERROR_TEXT VARCHAR(8000) NULL
		($8)::boolean, 	-- $8: REQUIRES_POST_UPLOAD_PROCESS BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_POST_UPLOAD_READY BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: POST_UPLOAD_CONFIG VARCHAR(8000) NULL
		($11)::varchar 	-- $11: POST_UPLOAD_ERROR_TEXT VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/FileUploadQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FileUploadQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FileUploadQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FileUploadQueue_HIST;
SELECT * FROM STG.WINCHK_FileUploadQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 468: FirstDataGlobalBinFile
COPY INTO ARES.STG.SRC_FirstDataGlobalBinFile_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FIRST_DATA_GLOBAL_BIN_FILE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: LOW_BIN VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: HIGH_BIN VARCHAR(8000) NULL
		($6)::char, 	-- $6: BIN_LENGTH CHAR(8000) NULL
		($7)::char, 	-- $7: BIN_DETAIL_PAN CHAR(8000) NULL
		($8)::varchar, 	-- $8: ISSUER_BANK_NAME VARCHAR(8000) NULL
		($9)::char, 	-- $9: COUNTRY_CODE CHAR(8000) NULL
		($10)::char, 	-- $10: DETAIL_CARD_PRODUCT CHAR(8000) NULL
		($11)::char, 	-- $11: DETAIL_CARD_INDICATOR CHAR(8000) NULL
		($12)::char, 	-- $12: ISSUER_UPDATE_YEAR CHAR(8000) NULL
		($13)::char, 	-- $13: ISSUER_UPDATE_MONTH CHAR(8000) NULL
		($14)::char, 	-- $14: ISSUER_UPDATE_DAY CHAR(8000) NULL
		($15)::varchar, 	-- $15: DEBIT_NETWORK_PINLESS_INDICATOR VARCHAR(8000) NULL
		($16)::char, 	-- $16: EBT_STATE CHAR(8000) NULL
		($17)::char, 	-- $17: DEBIT_NETWORK_PARTICIPANT CHAR(8000) NULL
		($18)::char, 	-- $18: FSA_INDICATOR CHAR(8000) NULL
		($19)::char, 	-- $19: PREPAID_INDICATOR CHAR(8000) NULL
		($20)::char, 	-- $20: PRODUCT_ID CHAR(8000) NULL
		($21)::char, 	-- $21: REGULATOR_INDICATOR CHAR(8000) NULL
		($22)::char, 	-- $22: VISA_PRODUCT_SUB_TYPE CHAR(8000) NULL
		($23)::char, 	-- $23: VISA_LARGE_TICKET_INDICATOR CHAR(8000) NULL
		($24)::char, 	-- $24: ACCOUNT_LEVEL_PROCESSING_INDICATOR CHAR(8000) NULL
		($25)::char, 	-- $25: ACCOUNT_FUND_SOURCE CHAR(8000) NULL
		($26)::char, 	-- $26: CARD_CLASS CHAR(8000) NULL
		($27)::char, 	-- $27: PAN_LENGTH_MIN CHAR(8000) NULL
		($28)::char, 	-- $28: PAN_LENGTH_MAX CHAR(8000) NULL
		($29)::char, 	-- $29: TOKEN_INDICATOR CHAR(8000) NULL
		($30)::char, 	-- $30: ISSUING_NETWORK CHAR(8000) NULL
		($31)::char, 	-- $31: CARD_HOLDER_BILLING_CURRENCY CHAR(8000) NULL
		($32)::char, 	-- $32: ACCOUNT_FUND_SOURCE_SUB_TYPE CHAR(8000) NULL
		($33)::char, 	-- $33: ANONYMOUS_PREPAID_INDICATOR CHAR(8000) NULL
		($34)::char, 	-- $34: B_2_B_PROGRAM_ID CHAR(8000) NULL
		($35)::char, 	-- $35: MONEY_SEND_INDICATOR CHAR(8000) NULL
		($36)::char, 	-- $36: ORIGINAL_CREDIT_MONEY_TRANSFER_INDICATOR CHAR(8000) NULL
		($37)::char, 	-- $37: ORIGINAL_CREDIT_ONLINE_GAMBLING_INDICATOR CHAR(8000) NULL
		($38)::char, 	-- $38: FAST_FUNDS CHAR(8000) NULL
		($39)::char 	-- $39: ORIGINAL_CREDIT_TRANSACTION_INDICATOR CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/FirstDataGlobalBinFile/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FirstDataGlobalBinFile_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FirstDataGlobalBinFile_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FirstDataGlobalBinFile_HIST;
SELECT * FROM STG.WINCHK_FirstDataGlobalBinFile_HIST;
[STATUS=tbd]
*/

-- // TABLE 469: ForceApprovalQuestion
COPY INTO ARES.STG.SRC_ForceApprovalQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORCE_APPROVAL_QUESTION_KEY INT NOT NULL
		($2)::int, 	-- $2: QUESTION_ID INT NOT NULL
		($3)::varchar, 	-- $3: QUESTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::boolean 	-- $5: IS_STATEMENT_RELATED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ForceApprovalQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ForceApprovalQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ForceApprovalQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ForceApprovalQuestion_HIST;
SELECT * FROM STG.WINCHK_ForceApprovalQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 470: ForceApprovalValue
COPY INTO ARES.STG.SRC_ForceApprovalValue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORCE_APPROVAL_VALUE_KEY INT NOT NULL
		($2)::int, 	-- $2: FORCE_APPROVAL_QUESTION_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_KEY INT NOT NULL
		($4)::varchar, 	-- $4: VALUE VARCHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: BANK_STATEMENT_SUPPLIED BOOLEAN NOT NULL
		to_timestamp_ntz($6) 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ForceApprovalValue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ForceApprovalValue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ForceApprovalValue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ForceApprovalValue_HIST;
SELECT * FROM STG.WINCHK_ForceApprovalValue_HIST;
[STATUS=tbd]
*/

-- // TABLE 471: FormLetter
COPY INTO ARES.STG.SRC_FormLetter_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FORM_LETTER_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: FORM_LETTER_DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::text, 	-- $4: FORM_LETTER_BODY text NULL
		($5)::char, 	-- $5: LANGUAGE CHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: IS_DELETED BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_AD_ASTRA BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IS_INITIAL_LETTER BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_AD_ASTRA_ACH_LETTER BOOLEAN NOT NULL
		($10)::smallint, 	-- $10: AFTER_DAYS smallint NOT NULL
		($11)::boolean, 	-- $11: IS_AFTER_CREDIT_REPORT BOOLEAN NOT NULL
		to_timestamp_ntz($12), 	-- $12: PRINT_AFTER_COLL_DATE TIMESTAMP_LTZ NOT NULL
		($13)::number, 	-- $13: MINIMUM_BALANCE NUMBER(10,4) NOT NULL
		($14)::int, 	-- $14: SET_AUDIT_CODE_KEY INT NULL
		($15)::varchar, 	-- $15: ON_DEMAND_PROMPT_1 VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: ON_DEMAND_PROMPT_2 VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: ON_DEMAND_PROMPT_3 VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: ON_DEMAND_PROMPT_4 VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: ON_DEMAND_PROMPT_5 VARCHAR(8000) NOT NULL
		to_timestamp_ntz($20), 	-- $20: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($21)::char, 	-- $21: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($22), 	-- $22: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($23)::char, 	-- $23: UPDATED_BY CHAR(8000) NOT NULL
		($24)::int, 	-- $24: MINIMUM_RI_AGE INT NOT NULL
		($25)::int, 	-- $25: MAXIMUM_RI_AGE INT NOT NULL
		($26)::smallint, 	-- $26: ADD_DAYS_TO_FOLLOWUP_DATE SMALLINT NOT NULL
		($27)::char, 	-- $27: DELETED_BY CHAR(8000) NULL
		to_timestamp_ntz($28), 	-- $28: DELETED_DATE TIMESTAMP_LTZ NULL
		($29)::boolean, 	-- $29: USE_LAST_KNOWN_ADDRESS BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: IS_LOAN_MATURED BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: IS_LOAN_INACTIVE BOOLEAN NOT NULL
		($32)::varchar, 	-- $32: RISK_ASSESSMENT VARCHAR(8000) NULL
		($33)::int, 	-- $33: MINIMUM_AA_AGE INT NOT NULL
		($34)::int, 	-- $34: MAXIMUM_AA_AGE INT NOT NULL
		($35)::boolean, 	-- $35: IS_LOAN_NOT_MATURED BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: IS_LOAN_NOT_INACTIVE BOOLEAN NOT NULL
		($37)::boolean, 	-- $37: IS_LOAN_MATURED_OR_INACTIVE BOOLEAN NOT NULL
		($38)::boolean, 	-- $38: IS_LOAN_NOT_MATURED_OR_NOT_INACTIVE BOOLEAN NOT NULL
		($39)::boolean, 	-- $39: INCLUDE_PAYMENTS BOOLEAN NOT NULL
		($40)::smallint, 	-- $40: LETTER_ORDER SMALLINT NOT NULL
		($41)::boolean, 	-- $41: KEEP_ADDRESS_WHEN_MAIL_RETURNED BOOLEAN NOT NULL
		($42)::number, 	-- $42: MINIMUM_RI_AMOUNT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: MAXIMUM_RI_AMOUNT NUMBER(10,4) NOT NULL
		($44)::boolean, 	-- $44: SET_TO_PREV_AUDIT_ID BOOLEAN NOT NULL
		($45)::boolean, 	-- $45: EXCLUDE_SECOND_LIEN_LOANS BOOLEAN NOT NULL
		($46)::boolean, 	-- $46: IS_ACTIVE BOOLEAN NOT NULL
		($47)::smallint, 	-- $47: MINIMUM_CYCLES_PAST_DUE smallint NOT NULL
		($48)::smallint, 	-- $48: MAXIMUM_CYCLES_PAST_DUE smallint NOT NULL
		($49)::boolean, 	-- $49: IS_UK_ARREARS_NOTICE BOOLEAN NOT NULL
		($50)::boolean, 	-- $50: INCLUDE_LOAN_HISTORY BOOLEAN NOT NULL
		($51)::boolean, 	-- $51: NO_AUTO_PAY_CHECK_ENABLED BOOLEAN NOT NULL
		($52)::boolean, 	-- $52: NO_AUTO_PAY_CHECK_OPT_IN BOOLEAN NOT NULL
		($53)::boolean, 	-- $53: NO_AUTO_PAY_CHECK_OPT_OUT BOOLEAN NOT NULL
		($54)::boolean, 	-- $54: IS_PTP_COMMUNICATION BOOLEAN NOT NULL
		($55)::boolean 	-- $55: INCLUDE_LOAN_DOCS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetter/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetter_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetter_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetter_HIST;
SELECT * FROM STG.WINCHK_FormLetter_HIST;
[STATUS=tbd]
*/

-- // TABLE 472: FormLetterAfterLetterXRef
COPY INTO ARES.STG.SRC_FormLetterAfterLetterXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_KEY INT NOT NULL
		($2)::int 	-- $2: AFTER_FORM_LETTER_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterAfterLetterXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterAfterLetterXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterAfterLetterXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterAfterLetterXRef_HIST;
SELECT * FROM STG.WINCHK_FormLetterAfterLetterXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 473: FormLetterAuditCode
COPY INTO ARES.STG.SRC_FormLetterAuditCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_KEY INT NOT NULL
		($2)::int 	-- $2: AUDIT_CODE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterAuditCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterAuditCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterAuditCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterAuditCode_HIST;
SELECT * FROM STG.WINCHK_FormLetterAuditCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 474: FormLetterBatch
COPY INTO ARES.STG.SRC_FormLetterBatch_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_BATCH_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: BATCH_DATE TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::char, 	-- $4: UPLOAD_OR_DOWNLOAD CHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: IS_AD_ASTRA BOOLEAN NOT NULL
		($6)::smallint, 	-- $6: FORM_LETTER_BATCH_STATUS_KEY SMALLINT NOT NULL
		($7)::datetime, 	-- $7: BATCH_STATUS_DATETIME datetime NULL
		($8)::smallint 	-- $8: BATCH_STEP SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterBatch/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterBatch_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterBatch_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterBatch_HIST;
SELECT * FROM STG.WINCHK_FormLetterBatch_HIST;
[STATUS=tbd]
*/

-- // TABLE 475: FormLetterBatchBuildLetterProgress
COPY INTO ARES.STG.SRC_FormLetterBatchBuildLetterProgress_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_BATCH_BUILD_LETTER_PROGRESS_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_BATCH_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_KEY INT NOT NULL
		($4)::boolean 	-- $4: BUILD_COMPLETE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterBatchBuildLetterProgress/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterBatchBuildLetterProgress_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterBatchBuildLetterProgress_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterBatchBuildLetterProgress_HIST;
SELECT * FROM STG.WINCHK_FormLetterBatchBuildLetterProgress_HIST;
[STATUS=tbd]
*/

-- // TABLE 476: FormLetterBatchStatus
COPY INTO ARES.STG.SRC_FormLetterBatchStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: FORM_LETTER_BATCH_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: STATUS_DESC VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterBatchStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterBatchStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterBatchStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterBatchStatus_HIST;
SELECT * FROM STG.WINCHK_FormLetterBatchStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 477: FormLetterBatchValidation
COPY INTO ARES.STG.SRC_FormLetterBatchValidation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_BATCH_VALIDATION_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_BATCH_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_KEY INT NOT NULL
		($4)::varchar, 	-- $4: FORM_LETTER_NAME VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: UPLOAD_COUNT INT NOT NULL
		($6)::int, 	-- $6: RECEIVE_COUNT INT NOT NULL
		($7)::datetime 	-- $7: DATE_TIME_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterBatchValidation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterBatchValidation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterBatchValidation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterBatchValidation_HIST;
SELECT * FROM STG.WINCHK_FormLetterBatchValidation_HIST;
[STATUS=tbd]
*/

-- // TABLE 478: FormLetterBatchVendorFile
COPY INTO ARES.STG.SRC_FormLetterBatchVendorFile_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_BATCH_BUILD_VENDOR_FILE_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_BATCH_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_KEY INT NOT NULL
		($4)::varchar, 	-- $4: FILE_NAME VARCHAR(8000) NULL
		($5)::boolean 	-- $5: UPLOADED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterBatchVendorFile/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterBatchVendorFile_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterBatchVendorFile_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterBatchVendorFile_HIST;
SELECT * FROM STG.WINCHK_FormLetterBatchVendorFile_HIST;
[STATUS=tbd]
*/

-- // TABLE 479: FormLetterConfig
COPY INTO ARES.STG.SRC_FormLetterConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_CONFIG_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_AD_ASTRA BOOLEAN NOT NULL
		($3)::varchar, 	-- $3: FTP_USERNAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: FTP_PASSWORD VARCHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: ENABLE_UPLOAD_BATCH BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: ENABLE_DOWNLOAD_BATCH BOOLEAN NOT NULL
		($7)::boolean 	-- $7: ENABLE_BATCH_VALIDATION BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterConfig_HIST;
SELECT * FROM STG.WINCHK_FormLetterConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 480: FormLetterEmail
COPY INTO ARES.STG.SRC_FormLetterEmail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_EMAIL_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_ADASTRA BOOLEAN NOT NULL
		($3)::varchar 	-- $3: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterEmail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterEmail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterEmail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterEmail_HIST;
SELECT * FROM STG.WINCHK_FormLetterEmail_HIST;
[STATUS=tbd]
*/

-- // TABLE 481: FormLetterLoanDocumentsFile
COPY INTO ARES.STG.SRC_FormLetterLoanDocumentsFile_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_LOAN_DOCUMENTS_FILE_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_PRINTED_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_BATCH_KEY INT NOT NULL
		($4)::varchar, 	-- $4: LOAN_DOCUMENTS_FILE_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: ZIP_FILE_NAME VARCHAR(8000) NULL
		($6)::boolean 	-- $6: UPLOADED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterLoanDocumentsFile/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterLoanDocumentsFile_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterLoanDocumentsFile_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterLoanDocumentsFile_HIST;
SELECT * FROM STG.WINCHK_FormLetterLoanDocumentsFile_HIST;
[STATUS=tbd]
*/

-- // TABLE 482: FormLetterLoanDocumentsState
COPY INTO ARES.STG.SRC_FormLetterLoanDocumentsState_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_LOAN_DOCUMENTS_STATE_KEY INT NOT NULL
		($2)::char, 	-- $2: FORM_LETTER_LOAN_DOCUMENTS_STATE CHAR(8000) NOT NULL
		($3)::int 	-- $3: FORM_LETTER_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterLoanDocumentsState/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterLoanDocumentsState_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterLoanDocumentsState_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterLoanDocumentsState_HIST;
SELECT * FROM STG.WINCHK_FormLetterLoanDocumentsState_HIST;
[STATUS=tbd]
*/

-- // TABLE 483: FormLetterLoanHistoryFile
COPY INTO ARES.STG.SRC_FormLetterLoanHistoryFile_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_LOAN_HISTORY_FILE_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_PRINTED_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_BATCH_KEY INT NOT NULL
		($4)::varchar, 	-- $4: LOAN_HISTORY_FILE_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: ZIP_FILE_NAME VARCHAR(8000) NULL
		($6)::boolean 	-- $6: UPLOADED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterLoanHistoryFile/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterLoanHistoryFile_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterLoanHistoryFile_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterLoanHistoryFile_HIST;
SELECT * FROM STG.WINCHK_FormLetterLoanHistoryFile_HIST;
[STATUS=tbd]
*/

-- // TABLE 484: FormLetterLoanHistoryState
COPY INTO ARES.STG.SRC_FormLetterLoanHistoryState_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_LOAN_HISTORY_STATE_KEY INT NOT NULL
		($2)::char, 	-- $2: FORM_LETTER_LOAN_HISTORY_STATE CHAR(8000) NOT NULL
		($3)::int 	-- $3: FORM_LETTER_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterLoanHistoryState/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterLoanHistoryState_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterLoanHistoryState_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterLoanHistoryState_HIST;
SELECT * FROM STG.WINCHK_FormLetterLoanHistoryState_HIST;
[STATUS=tbd]
*/

-- // TABLE 485: FormLetterLocation
COPY INTO ARES.STG.SRC_FormLetterLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_KEY INT NOT NULL
		($2)::smallint 	-- $2: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterLocation_HIST;
SELECT * FROM STG.WINCHK_FormLetterLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 486: FormLetterOnDemand
COPY INTO ARES.STG.SRC_FormLetterOnDemand_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_ON_DEMAND_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_BATCH_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: PROMPT_DATA_1 VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: PROMPT_DATA_2 VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: PROMPT_DATA_3 VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: PROMPT_DATA_4 VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: PROMPT_DATA_5 VARCHAR(8000) NOT NULL
		($12)::int 	-- $12: CASHED_CHECK_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterOnDemand/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterOnDemand_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterOnDemand_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterOnDemand_HIST;
SELECT * FROM STG.WINCHK_FormLetterOnDemand_HIST;
[STATUS=tbd]
*/

-- // TABLE 487: FormLetterPrinted
COPY INTO ARES.STG.SRC_FormLetterPrinted_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_PRINTED_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_ADDRESS_KEY INT NULL
		($5)::int, 	-- $5: FORM_LETTER_BATCH_KEY INT NOT NULL
		($6)::int, 	-- $6: FORM_LETTER_ON_DEMAND_KEY INT NULL
		($7)::int, 	-- $7: LOAN_KEY INT NULL
		($8)::int, 	-- $8: PROMISE_TO_PAY_DETAIL_KEY INT NULL
		($9)::smallint, 	-- $9: FORM_LETTER_RESULT_FILE_TYPE SMALLINT NOT NULL
		to_timestamp_ntz($10), 	-- $10: VENDOR_DATE_PRINTED TIMESTAMP_LTZ NULL
		($11)::varchar, 	-- $11: VENDOR_JOB_CODE VARCHAR(8000) NULL
		($12)::smallint, 	-- $12: PROCESSING_STATE_KEY SMALLINT NULL
		($13)::int, 	-- $13: CASHED_CHECK_KEY INT NULL
		($14)::int, 	-- $14: DWDOCID INT NULL
		($15)::int, 	-- $15: RISREPT_KEY INT NULL
		($16)::int 	-- $16: DOCUWARE_CABINET_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterPrinted/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterPrinted_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterPrinted_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterPrinted_HIST;
SELECT * FROM STG.WINCHK_FormLetterPrinted_HIST;
[STATUS=tbd]
*/

-- // TABLE 488: FormLetterProduct
COPY INTO ARES.STG.SRC_FormLetterProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_KEY INT NOT NULL
		($2)::char, 	-- $2: PRODUCT_TYPE CHAR(8000) NOT NULL
		($3)::char, 	-- $3: LOAN_TYPE CHAR(8000) NOT NULL
		($4)::char 	-- $4: LOAN_SUB_TYPE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterProduct_HIST;
SELECT * FROM STG.WINCHK_FormLetterProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 489: FormLetterReplacesXRef
COPY INTO ARES.STG.SRC_FormLetterReplacesXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_KEY INT NOT NULL
		($2)::int 	-- $2: DELETED_FORM_LETTER_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterReplacesXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterReplacesXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterReplacesXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterReplacesXRef_HIST;
SELECT * FROM STG.WINCHK_FormLetterReplacesXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 490: FormLetterResult
COPY INTO ARES.STG.SRC_FormLetterResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FORM_LETTER_RESULT_KEY INT NOT NULL
		($2)::int, 	-- $2: FORM_LETTER_PRINTED_KEY INT NOT NULL
		($3)::int, 	-- $3: FORM_LETTER_BATCH_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::int, 	-- $5: CUSTOMER_ADDRESS_KEY INT NULL
		($6)::smallint, 	-- $6: FORM_LETTER_RESULT_FILE_TYPE SMALLINT NOT NULL
		($7)::varchar, 	-- $7: FORM_LETTER_RESULT_ERROR_CODE VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: FORM_LETTER_RESULT_FFWD_CODE CHAR(8000) NOT NULL
		($9)::char, 	-- $9: FORM_LETTER_RESULT_DPV_CODE CHAR(8000) NOT NULL
		($10)::char, 	-- $10: FORM_LETTER_RESULT_RET_CODE CHAR(8000) NOT NULL
		($11)::varchar 	-- $11: MAILING_SVC_JOB_NUM VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FormLetterResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FormLetterResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FormLetterResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FormLetterResult_HIST;
SELECT * FROM STG.WINCHK_FormLetterResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 491: FuelType
COPY INTO ARES.STG.SRC_FuelType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: FUEL_TYPE_KEY CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FuelType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FuelType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FuelType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FuelType_HIST;
SELECT * FROM STG.WINCHK_FuelType_HIST;
[STATUS=tbd]
*/

-- // TABLE 492: FundingMethod
COPY INTO ARES.STG.SRC_FundingMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: FUNDING_METHOD_KEY smallint NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethod_HIST;
SELECT * FROM STG.WINCHK_FundingMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 493: FundingMethodGroupConfig
COPY INTO ARES.STG.SRC_FundingMethodGroupConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FUNDING_METHOD_GROUP_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FUNDING_METHOD_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: FUNDING_METHOD_GROUP_NOTE VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: LAST_MODIFIED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethodGroupConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethodGroupConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethodGroupConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethodGroupConfig_HIST;
SELECT * FROM STG.WINCHK_FundingMethodGroupConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 494: FundingMethodGroupConfigHistory
COPY INTO ARES.STG.SRC_FundingMethodGroupConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FUNDING_METHOD_GROUP_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FUNDING_METHOD_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: FUNDING_METHOD_GROUP_NOTE VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: LAST_MODIFIED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6) 	-- $6: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethodGroupConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethodGroupConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethodGroupConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethodGroupConfigHistory_HIST;
SELECT * FROM STG.WINCHK_FundingMethodGroupConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 495: FundingMethodGroupItemConfig
COPY INTO ARES.STG.SRC_FundingMethodGroupItemConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FUNDING_METHOD_GROUP_ITEM_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: FUNDING_METHOD_GROUP_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: FUNDING_METHOD_KEY smallint NOT NULL
		($4)::smallint, 	-- $4: APPLY_ORDER SMALLINT NOT NULL
		($5)::smallint, 	-- $5: NEW_CUSTOMER_HOLD_MINUTES smallint NOT NULL
		($6)::char, 	-- $6: LAST_MODIFIED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethodGroupItemConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethodGroupItemConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethodGroupItemConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethodGroupItemConfig_HIST;
SELECT * FROM STG.WINCHK_FundingMethodGroupItemConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 496: FundingMethodGroupItemConfigHistory
COPY INTO ARES.STG.SRC_FundingMethodGroupItemConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FUNDING_METHOD_GROUP_ITEM_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: FUNDING_METHOD_GROUP_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: FUNDING_METHOD_KEY smallint NOT NULL
		($4)::smallint, 	-- $4: APPLY_ORDER SMALLINT NOT NULL
		($5)::smallint, 	-- $5: NEW_CUSTOMER_HOLD_MINUTES smallint NOT NULL
		($6)::char, 	-- $6: LAST_MODIFIED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethodGroupItemConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethodGroupItemConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethodGroupItemConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethodGroupItemConfigHistory_HIST;
SELECT * FROM STG.WINCHK_FundingMethodGroupItemConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 497: FundingMethodLocationXRefConfig
COPY INTO ARES.STG.SRC_FundingMethodLocationXRefConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::int, 	-- $2: FUNDING_METHOD_GROUP_CONFIG_KEY INT NOT NULL
		($3)::char, 	-- $3: LAST_MODIFIED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5) 	-- $5: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethodLocationXRefConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethodLocationXRefConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethodLocationXRefConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethodLocationXRefConfig_HIST;
SELECT * FROM STG.WINCHK_FundingMethodLocationXRefConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 498: FundingMethodLocationXRefConfigHistory
COPY INTO ARES.STG.SRC_FundingMethodLocationXRefConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::int, 	-- $2: FUNDING_METHOD_GROUP_CONFIG_KEY INT NOT NULL
		($3)::char, 	-- $3: LAST_MODIFIED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5) 	-- $5: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/FundingMethodLocationXRefConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*FundingMethodLocationXRefConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_FundingMethodLocationXRefConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_FundingMethodLocationXRefConfigHistory_HIST;
SELECT * FROM STG.WINCHK_FundingMethodLocationXRefConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 499: GalileoAlertType
COPY INTO ARES.STG.SRC_GalileoAlertType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GALILEO_ALERT_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ALERT_TYPE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: USE_WITH_ENABLE_API_CALL BOOLEAN NOT NULL
		($6)::boolean 	-- $6: USE_WITH_DISABLE_API_CALL BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GalileoAlertType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GalileoAlertType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GalileoAlertType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GalileoAlertType_HIST;
SELECT * FROM STG.WINCHK_GalileoAlertType_HIST;
[STATUS=tbd]
*/

-- // TABLE 500: GalileoResponseCode
COPY INTO ARES.STG.SRC_GalileoResponseCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GALILEO_RESPONSE_CODE_KEY INT NOT NULL
		($2)::smallint, 	-- $2: CODE smallint NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: DETAIL VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GalileoResponseCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GalileoResponseCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GalileoResponseCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GalileoResponseCode_HIST;
SELECT * FROM STG.WINCHK_GalileoResponseCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 501: GLAcct
COPY INTO ARES.STG.SRC_GLAcct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_KEY INT NOT NULL
		($2)::int, 	-- $2: GL_ACCT_NUM INT NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ADASTRA BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_TITLE_ACCT BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_NONCASH_ACCT BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_TRECS_CASH_ACCT BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IS_TRECS_DEP_ACCT BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_TRECS_CC_ACCT BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IS_TRECS_ACH_ACCT BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_TRECS_MO_ACCT BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: IS_TRECS_MG_ACCT BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: IS_TRECS_BP_ACCT BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: IS_TRECS_OPTPLUS_ACCT BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: IS_SPV_ACCT BOOLEAN NOT NULL
		to_timestamp_ntz($16), 	-- $16: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($17) 	-- $17: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcct_HIST;
SELECT * FROM STG.WINCHK_GLAcct_HIST;
[STATUS=tbd]
*/

-- // TABLE 502: GLAcctGlobal
COPY INTO ARES.STG.SRC_GLAcctGlobal_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_GLOBAL_KEY INT NOT NULL
		($2)::int, 	-- $2: CASH_IN_STORE_ACCT INT NULL
		($3)::int, 	-- $3: CASH_FROM_INSURANCE_IMPORT_ACCT INT NOT NULL
		($4)::int, 	-- $4: DEPOSIT_BAGS_ACCT INT NULL
		($5)::int, 	-- $5: GOLD_INVESTMENT_ACCT INT NULL
		($6)::int, 	-- $6: GOLD_TRANSIT_ACCT INT NULL
		($7)::int, 	-- $7: GOLD_REVENUE_ACCT INT NULL
		($8)::int, 	-- $8: GOLD_PROCESS_FEE_ACCT INT NULL
		($9)::int, 	-- $9: GOLD_FEES_PAID_ACCT INT NULL
		($10)::int, 	-- $10: GOLD_LOSSES_ACCT INT NULL
		($11)::int, 	-- $11: CURRENCY_EXCHANGE_ON_CHECK_ACCT INT NULL
		($12)::int, 	-- $12: CURRENCY_EXCHANGE_FEE_ACCT INT NULL
		($13)::int, 	-- $13: CURRENCY_EXCHANGE_GAINLOSS_ACCT INT NULL
		($14)::int, 	-- $14: OVER_SHORT_ACCT INT NULL
		($15)::int, 	-- $15: CHECK_RI_ACCT INT NULL
		($16)::int, 	-- $16: CHECK_COLL_ACCT INT NULL
		($17)::int, 	-- $17: COURTESY_PAYOUT_ACCT INT NULL
		($18)::int, 	-- $18: OPTPLUS_RETURNS_ACCT INT NULL
		($19)::int, 	-- $19: OPTPLUS_COLL_ACCT INT NULL
		($20)::int, 	-- $20: ADASTRA_COMMISSIONS_AR_ACCT INT NULL
		($21)::int, 	-- $21: ADASTRA_COMMISSIONS_AP_ACCT INT NULL
		($22)::int, 	-- $22: ADASTRA_COMMISSIONS_FEES_ACCT INT NULL
		($23)::int, 	-- $23: ADASTRA_COMMISSIONS_EXPENSE_ACCT INT NULL
		($24)::int, 	-- $24: ADASTRA_TRUST_PROCEEDS_AP_ACCT INT NULL
		($25)::int, 	-- $25: ADASTRA_COLLECTION_AGENCY_RECEIVABLE_ACCT INT NULL
		($26)::int, 	-- $26: ADASTRA_CASH_AND_CHECKS_ACCT INT NULL
		($27)::int, 	-- $27: ADASTRA_BAD_DEBT_CHECK_ACCT INT NULL
		($28)::int, 	-- $28: CASHED_CHECK_DISCOUNT_ACCT INT NULL
		($29)::int, 	-- $29: CASHED_CHECK_FLAT_FEES_ACCT INT NULL
		($30)::int, 	-- $30: CASHED_CHECK_PCT_FEES_ACCT INT NULL
		($31)::int, 	-- $31: CASHED_CHECK_POST_DATED_ACCT INT NULL
		($32)::int, 	-- $32: CCARD_FEE_ACCT INT NULL
		($33)::int, 	-- $33: SALES_TAX_ACCT INT NULL
		($34)::int, 	-- $34: SPAY_INTERNET_REVENUE_ACCT INT NOT NULL
		($35)::int, 	-- $35: MPAY_INTERNET_REVENUE_ACCT INT NOT NULL
		($36)::int, 	-- $36: OEND_INTERNET_REVENUE_ACCT INT NOT NULL
		($37)::int, 	-- $37: SPAY_INTERNET_RETURNS_ACCT INT NOT NULL
		($38)::int, 	-- $38: MPAY_INTERNET_RETURNS_ACCT INT NOT NULL
		($39)::int, 	-- $39: OEND_INTERNET_RETURNS_ACCT INT NOT NULL
		($40)::int, 	-- $40: SPAY_INTERNET_COLLECTIONS_ACCT INT NOT NULL
		($41)::int, 	-- $41: MPAY_INTERNET_COLLECTIONS_ACCT INT NOT NULL
		($42)::int, 	-- $42: OEND_INTERNET_COLLECTIONS_ACCT INT NOT NULL
		($43)::int, 	-- $43: SPAY_INTERNET_CREDIT_CLEARING_ACCT INT NOT NULL
		($44)::int, 	-- $44: MPAY_INTERNET_CREDIT_CLEARING_ACCT INT NOT NULL
		($45)::int, 	-- $45: OEND_INTERNET_CREDIT_CLEARING_ACCT INT NOT NULL
		($46)::int, 	-- $46: INTERNAL_SHORT_ACCT INT NULL
		to_timestamp_ntz($47), 	-- $47: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($48) 	-- $48: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctGlobal/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctGlobal_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctGlobal_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctGlobal_HIST;
SELECT * FROM STG.WINCHK_GLAcctGlobal_HIST;
[STATUS=tbd]
*/

-- // TABLE 503: GLAcctGlobalHistory
COPY INTO ARES.STG.SRC_GLAcctGlobalHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_GLOBAL_KEY INT NOT NULL
		($2)::int, 	-- $2: CASH_IN_STORE_ACCT INT NULL
		($3)::int, 	-- $3: CASH_FROM_INSURANCE_IMPORT_ACCT INT NOT NULL
		($4)::int, 	-- $4: DEPOSIT_BAGS_ACCT INT NULL
		($5)::int, 	-- $5: GOLD_INVESTMENT_ACCT INT NULL
		($6)::int, 	-- $6: GOLD_TRANSIT_ACCT INT NULL
		($7)::int, 	-- $7: GOLD_REVENUE_ACCT INT NULL
		($8)::int, 	-- $8: GOLD_PROCESS_FEE_ACCT INT NULL
		($9)::int, 	-- $9: GOLD_FEES_PAID_ACCT INT NULL
		($10)::int, 	-- $10: GOLD_LOSSES_ACCT INT NULL
		($11)::int, 	-- $11: CURRENCY_EXCHANGE_ON_CHECK_ACCT INT NULL
		($12)::int, 	-- $12: CURRENCY_EXCHANGE_FEE_ACCT INT NULL
		($13)::int, 	-- $13: CURRENCY_EXCHANGE_GAINLOSS_ACCT INT NULL
		($14)::int, 	-- $14: OVER_SHORT_ACCT INT NULL
		($15)::int, 	-- $15: CHECK_RI_ACCT INT NULL
		($16)::int, 	-- $16: CHECK_COLL_ACCT INT NULL
		($17)::int, 	-- $17: COURTESY_PAYOUT_ACCT INT NULL
		($18)::int, 	-- $18: OPTPLUS_RETURNS_ACCT INT NULL
		($19)::int, 	-- $19: OPTPLUS_COLL_ACCT INT NULL
		($20)::int, 	-- $20: ADASTRA_COMMISSIONS_AR_ACCT INT NULL
		($21)::int, 	-- $21: ADASTRA_COMMISSIONS_AP_ACCT INT NULL
		($22)::int, 	-- $22: ADASTRA_COMMISSIONS_FEES_ACCT INT NULL
		($23)::int, 	-- $23: ADASTRA_COMMISSIONS_EXPENSE_ACCT INT NULL
		($24)::int, 	-- $24: ADASTRA_TRUST_PROCEEDS_AP_ACCT INT NULL
		($25)::int, 	-- $25: ADASTRA_COLLECTION_AGENCY_RECEIVABLE_ACCT INT NULL
		($26)::int, 	-- $26: ADASTRA_CASH_AND_CHECKS_ACCT INT NULL
		($27)::int, 	-- $27: ADASTRA_BAD_DEBT_CHECK_ACCT INT NULL
		($28)::int, 	-- $28: CASHED_CHECK_DISCOUNT_ACCT INT NULL
		($29)::int, 	-- $29: CASHED_CHECK_FLAT_FEES_ACCT INT NULL
		($30)::int, 	-- $30: CASHED_CHECK_PCT_FEES_ACCT INT NULL
		($31)::int, 	-- $31: CASHED_CHECK_POST_DATED_ACCT INT NULL
		($32)::int, 	-- $32: CCARD_FEE_ACCT INT NULL
		($33)::int, 	-- $33: SALES_TAX_ACCT INT NULL
		($34)::int, 	-- $34: SPAY_INTERNET_REVENUE_ACCT INT NOT NULL
		($35)::int, 	-- $35: MPAY_INTERNET_REVENUE_ACCT INT NOT NULL
		($36)::int, 	-- $36: OEND_INTERNET_REVENUE_ACCT INT NOT NULL
		($37)::int, 	-- $37: SPAY_INTERNET_RETURNS_ACCT INT NOT NULL
		($38)::int, 	-- $38: MPAY_INTERNET_RETURNS_ACCT INT NOT NULL
		($39)::int, 	-- $39: OEND_INTERNET_RETURNS_ACCT INT NOT NULL
		($40)::int, 	-- $40: SPAY_INTERNET_COLLECTIONS_ACCT INT NOT NULL
		($41)::int, 	-- $41: MPAY_INTERNET_COLLECTIONS_ACCT INT NOT NULL
		($42)::int, 	-- $42: OEND_INTERNET_COLLECTIONS_ACCT INT NOT NULL
		($43)::int, 	-- $43: SPAY_INTERNET_CREDIT_CLEARING_ACCT INT NOT NULL
		($44)::int, 	-- $44: MPAY_INTERNET_CREDIT_CLEARING_ACCT INT NOT NULL
		($45)::int, 	-- $45: OEND_INTERNET_CREDIT_CLEARING_ACCT INT NOT NULL
		($46)::int, 	-- $46: INTERNAL_SHORT_ACCT INT NULL
		to_timestamp_ntz($47), 	-- $47: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($48) 	-- $48: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctGlobalHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctGlobalHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctGlobalHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctGlobalHistory_HIST;
SELECT * FROM STG.WINCHK_GLAcctGlobalHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 504: GLAcctHistory
COPY INTO ARES.STG.SRC_GLAcctHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_KEY INT NOT NULL
		($2)::int, 	-- $2: GL_ACCT_NUM INT NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ADASTRA BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_TITLE_ACCT BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_NONCASH_ACCT BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_TRECS_CASH_ACCT BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IS_TRECS_DEP_ACCT BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_TRECS_CC_ACCT BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IS_TRECS_ACH_ACCT BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_TRECS_MO_ACCT BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: IS_TRECS_MG_ACCT BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: IS_TRECS_BP_ACCT BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: IS_TRECS_OPTPLUS_ACCT BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: IS_SPV_ACCT BOOLEAN NOT NULL
		to_timestamp_ntz($16), 	-- $16: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($17) 	-- $17: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctHistory_HIST;
SELECT * FROM STG.WINCHK_GLAcctHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 505: GLAcctLoanProductGroup
COPY INTO ARES.STG.SRC_GLAcctLoanProductGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_LOAN_PRODUCT_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: GL_ACCT_LOAN_PRODUCT_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: PRODUCT_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: LOAN_TYPE CHAR(8000) NOT NULL
		($5)::int, 	-- $5: FUNDING_EFUND_GL_ACCT INT NOT NULL
		($6)::int, 	-- $6: FUNDING_SUSPENSE_GL_ACCT INT NOT NULL
		($7)::int, 	-- $7: INVENTORY_GL_ACCT INT NOT NULL
		($8)::int, 	-- $8: INTEREST_GL_ACCT INT NOT NULL
		($9)::int, 	-- $9: LOAN_FEES_GL_ACCT INT NOT NULL
		($10)::int, 	-- $10: DISCOUNT_GL_ACCT INT NOT NULL
		($11)::int, 	-- $11: ACCRUED_INTEREST_RECEIVABLE_GL_ACCT INT NOT NULL
		($12)::int, 	-- $12: FEE_RECEIVABLE_GL_ACCT INT NOT NULL
		($13)::int, 	-- $13: DEFERRED_REVENUE_LIABILITY_GL_ACCT INT NOT NULL
		($14)::int, 	-- $14: COLLECTIONS_GL_ACCT INT NOT NULL
		($15)::int, 	-- $15: RI_GL_ACCT INT NOT NULL
		($16)::int, 	-- $16: LEGAL_FEES_GL_ACCT INT NOT NULL
		($17)::int, 	-- $17: NSF_FEES_GL_ACCT INT NOT NULL
		($18)::int, 	-- $18: DECREASE_GL_ACCT INT NOT NULL
		($19)::int, 	-- $19: ROLLOVER_SUSPENSE_GL_ACCT INT NOT NULL
		($20)::int, 	-- $20: ADASTRA_BAD_DEBT_GL_ACCT INT NOT NULL
		($21)::int, 	-- $21: DUE_DATE_PAYMENT_QUEUE_SUSPENSE_GL_ACCT INT NOT NULL
		($22)::int, 	-- $22: INSURANCE_AP_GL_ACCT INT NOT NULL
		($23)::int, 	-- $23: INSURANCE_COGS_GL_ACCT INT NOT NULL
		($24)::int, 	-- $24: INSURANCE_PAYMENT_QUEUE_SUSPENSE_GL_ACCT INT NOT NULL
		($25)::int, 	-- $25: INSURANCE_REVENUE_GL_ACCT INT NOT NULL
		($26)::int, 	-- $26: INSURANCE_TAX_GL_ACCT INT NOT NULL
		($27)::int, 	-- $27: CAB_FEE_RECEIVABLE_GL_ACCT INT NOT NULL
		($28)::int, 	-- $28: CAB_COLLECTED_ACCRUED_INTEREST_GL_ACCT INT NOT NULL
		($29)::int, 	-- $29: CAB_UNCOLLECTED_ACCRUED_INTEREST_GL_ACCT INT NOT NULL
		($30)::int, 	-- $30: CAB_COLLECTIONS_GL_ACCT INT NOT NULL
		($31)::int, 	-- $31: CAB_RI_GL_ACCT INT NOT NULL
		($32)::int, 	-- $32: CAB_DUE_TO_LENDER_SUSPENSE_GL_ACCT INT NOT NULL
		($33)::int, 	-- $33: CAB_LENDER_INTEREST_GL_ACCT INT NOT NULL
		($34)::int, 	-- $34: CAB_LENDER_RI_FEE_GL_ACCT INT NOT NULL
		($35)::int, 	-- $35: LIEN_FEES_GL_ACCT INT NOT NULL
		to_timestamp_ntz($36), 	-- $36: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($37) 	-- $37: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctLoanProductGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctLoanProductGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctLoanProductGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctLoanProductGroup_HIST;
SELECT * FROM STG.WINCHK_GLAcctLoanProductGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 506: GLAcctLoanProductGroupHistory
COPY INTO ARES.STG.SRC_GLAcctLoanProductGroupHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_LOAN_PRODUCT_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: GL_ACCT_LOAN_PRODUCT_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: PRODUCT_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: LOAN_TYPE CHAR(8000) NOT NULL
		($5)::int, 	-- $5: FUNDING_EFUND_GL_ACCT INT NOT NULL
		($6)::int, 	-- $6: FUNDING_SUSPENSE_GL_ACCT INT NOT NULL
		($7)::int, 	-- $7: INVENTORY_GL_ACCT INT NOT NULL
		($8)::int, 	-- $8: INTEREST_GL_ACCT INT NOT NULL
		($9)::int, 	-- $9: LOAN_FEES_GL_ACCT INT NOT NULL
		($10)::int, 	-- $10: DISCOUNT_GL_ACCT INT NOT NULL
		($11)::int, 	-- $11: ACCRUED_INTEREST_RECEIVABLE_GL_ACCT INT NOT NULL
		($12)::int, 	-- $12: FEE_RECEIVABLE_GL_ACCT INT NOT NULL
		($13)::int, 	-- $13: DEFERRED_REVENUE_LIABILITY_GL_ACCT INT NOT NULL
		($14)::int, 	-- $14: COLLECTIONS_GL_ACCT INT NOT NULL
		($15)::int, 	-- $15: RI_GL_ACCT INT NOT NULL
		($16)::int, 	-- $16: LEGAL_FEES_GL_ACCT INT NOT NULL
		($17)::int, 	-- $17: NSF_FEES_GL_ACCT INT NOT NULL
		($18)::int, 	-- $18: DECREASE_GL_ACCT INT NOT NULL
		($19)::int, 	-- $19: ROLLOVER_SUSPENSE_GL_ACCT INT NOT NULL
		($20)::int, 	-- $20: ADASTRA_BAD_DEBT_GL_ACCT INT NOT NULL
		($21)::int, 	-- $21: DUE_DATE_PAYMENT_QUEUE_SUSPENSE_GL_ACCT INT NOT NULL
		($22)::int, 	-- $22: INSURANCE_AP_GL_ACCT INT NOT NULL
		($23)::int, 	-- $23: INSURANCE_COGS_GL_ACCT INT NOT NULL
		($24)::int, 	-- $24: INSURANCE_PAYMENT_QUEUE_SUSPENSE_GL_ACCT INT NOT NULL
		($25)::int, 	-- $25: INSURANCE_REVENUE_GL_ACCT INT NOT NULL
		($26)::int, 	-- $26: INSURANCE_TAX_GL_ACCT INT NOT NULL
		($27)::int, 	-- $27: CAB_FEE_RECEIVABLE_GL_ACCT INT NOT NULL
		($28)::int, 	-- $28: CAB_COLLECTED_ACCRUED_INTEREST_GL_ACCT INT NOT NULL
		($29)::int, 	-- $29: CAB_UNCOLLECTED_ACCRUED_INTEREST_GL_ACCT INT NOT NULL
		($30)::int, 	-- $30: CAB_COLLECTIONS_GL_ACCT INT NOT NULL
		($31)::int, 	-- $31: CAB_RI_GL_ACCT INT NOT NULL
		($32)::int, 	-- $32: CAB_DUE_TO_LENDER_SUSPENSE_GL_ACCT INT NOT NULL
		($33)::int, 	-- $33: CAB_LENDER_INTEREST_GL_ACCT INT NOT NULL
		($34)::int, 	-- $34: CAB_LENDER_RI_FEE_GL_ACCT INT NOT NULL
		($35)::int, 	-- $35: LIEN_FEES_GL_ACCT INT NOT NULL
		to_timestamp_ntz($36), 	-- $36: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($37) 	-- $37: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctLoanProductGroupHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctLoanProductGroupHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctLoanProductGroupHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctLoanProductGroupHistory_HIST;
SELECT * FROM STG.WINCHK_GLAcctLoanProductGroupHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 507: GLAcctLocationGroup
COPY INTO ARES.STG.SRC_GLAcctLocationGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_LOCATION_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: GL_ACCT_LOCATION_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: LOANS_PRIMARY_BANK_GL_ACCT INT NOT NULL
		($4)::int, 	-- $4: CASHED_CHECKS_PRIMARY_BANK_GL_ACCT INT NOT NULL
		($5)::int, 	-- $5: AD_ASTRA_CENTRAL_TRUST_GL_ACCT INT NOT NULL
		($6)::int, 	-- $6: CANADA_PAD_BANK_CLEARING_GL_ACCT INT NOT NULL
		($7)::int, 	-- $7: CANADA_BAD_DEBT_GL_ACCT INT NOT NULL
		($8)::int, 	-- $8: CANADA_USD_CASHED_CHECKS_GL_ACCT INT NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctLocationGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctLocationGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctLocationGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctLocationGroup_HIST;
SELECT * FROM STG.WINCHK_GLAcctLocationGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 508: GLAcctLocationGroupHistory
COPY INTO ARES.STG.SRC_GLAcctLocationGroupHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GL_ACCT_LOCATION_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: GL_ACCT_LOCATION_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: LOANS_PRIMARY_BANK_GL_ACCT INT NOT NULL
		($4)::int, 	-- $4: CASHED_CHECKS_PRIMARY_BANK_GL_ACCT INT NOT NULL
		($5)::int, 	-- $5: AD_ASTRA_CENTRAL_TRUST_GL_ACCT INT NOT NULL
		($6)::int, 	-- $6: CANADA_PAD_BANK_CLEARING_GL_ACCT INT NOT NULL
		($7)::int, 	-- $7: CANADA_BAD_DEBT_GL_ACCT INT NOT NULL
		($8)::int, 	-- $8: CANADA_USD_CASHED_CHECKS_GL_ACCT INT NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GLAcctLocationGroupHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GLAcctLocationGroupHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GLAcctLocationGroupHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GLAcctLocationGroupHistory_HIST;
SELECT * FROM STG.WINCHK_GLAcctLocationGroupHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 509: Global
COPY INTO ARES.STG.SRC_Global_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PRODUCT_SCHEDULED_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_PRODUCT_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PAYMENT_NUMBER SMALLINT NOT NULL
		($4)::date, 	-- $4: PAYMENT_DATE DATE NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMOUNT NUMBER(10,4) NOT NULL
		($6)::boolean, 	-- $6: IS_PAYMENT_AUTHORIZED BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: AUTHORIZED_DATE TIMESTAMP_LTZ NOT NULL
		($8)::char 	-- $8: AUTHORIZED_TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Global/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Global_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Global_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Global_HIST;
SELECT * FROM STG.WINCHK_Global_HIST;
[STATUS=tbd]
*/

-- // TABLE 510: GlobalHistory
COPY INTO ARES.STG.SRC_GlobalHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_STATUS_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GlobalHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GlobalHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GlobalHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GlobalHistory_HIST;
SELECT * FROM STG.WINCHK_GlobalHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 511: GlobalStates
COPY INTO ARES.STG.SRC_GlobalStates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GLOBAL_STATES_KEY INT NOT NULL
		($2)::char, 	-- $2: STATE_ABBRV CHAR(8000) NOT NULL
		($3)::number, 	-- $3: TL_LIEN_FEE NUMBER(10,4) NOT NULL
		($4)::smallint, 	-- $4: TL_APR_DAYS smallint NOT NULL
		($5)::number, 	-- $5: TL_TITLE_FEE NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: TL_QUICK_TITLE_FEE NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: TL_TITLE_PROC_FEE NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: TL_NOTICE_OF_LIEN_FEE NUMBER(10,4) NOT NULL
		($9)::boolean, 	-- $9: ENABLE_CUST_MILITARY_STATUS BOOLEAN NOT NULL
		($10)::char, 	-- $10: STATE_FULL CHAR(8000) NOT NULL
		($11)::boolean, 	-- $11: REQUIRE_CUST_ID_SCAN BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: ENABLE_NOTIFY_REPO_COMPANY_MSG BOOLEAN NOT NULL
		($13)::smallint, 	-- $13: MIN_LOAN_AGE smallint NOT NULL
		($14)::boolean, 	-- $14: ENABLE_SINGLE_OPEN_LOAN_TYPE BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: ENABLE_LOAN_MAINT_OTHER_STATES BOOLEAN NOT NULL
		($16)::number, 	-- $16: TL_NO_LIEN_FEE_FOR_LOANS_UP_TO NUMBER(10,4) NOT NULL
		($17)::smallint, 	-- $17: DUE_DATE_PAYMENTS_THREAD_COUNT smallint NOT NULL
		($18)::boolean, 	-- $18: SHOW_ACCESS_KEY BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: ENABLE_MARKETING_INVITATIONS BOOLEAN NOT NULL
		($20)::char, 	-- $20: MARKETING_INVITATION_OVERRIDES_TYPE CHAR(8000) NOT NULL
		($21)::int, 	-- $21: MARKETING_INVITATION_INCOME_PCT INT NOT NULL
		($22)::boolean, 	-- $22: ENABLE_UNBLOCK_BANK_ACCOUNT_ON_LOAN BOOLEAN NOT NULL
		($23)::smallint, 	-- $23: COLLECTION_SOL_YEARS SMALLINT NOT NULL
		($24)::int, 	-- $24: COLLECTION_SOL_RI_URGENT_NOTE_KEY INT NOT NULL
		to_timestamp_ntz($25), 	-- $25: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($26) 	-- $26: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GlobalStates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GlobalStates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GlobalStates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GlobalStates_HIST;
SELECT * FROM STG.WINCHK_GlobalStates_HIST;
[STATUS=tbd]
*/

-- // TABLE 512: GlobalStatesHistory
COPY INTO ARES.STG.SRC_GlobalStatesHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GLOBAL_STATES_KEY INT NOT NULL
		($2)::char, 	-- $2: STATE_ABBRV CHAR(8000) NOT NULL
		($3)::number, 	-- $3: TL_LIEN_FEE NUMBER(10,4) NOT NULL
		($4)::smallint, 	-- $4: TL_APR_DAYS smallint NOT NULL
		($5)::number, 	-- $5: TL_TITLE_FEE NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: TL_QUICK_TITLE_FEE NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: TL_TITLE_PROC_FEE NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: TL_NOTICE_OF_LIEN_FEE NUMBER(10,4) NOT NULL
		($9)::boolean, 	-- $9: ENABLE_CUST_MILITARY_STATUS BOOLEAN NOT NULL
		($10)::char, 	-- $10: STATE_FULL CHAR(8000) NOT NULL
		($11)::boolean, 	-- $11: REQUIRE_CUST_ID_SCAN BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: ENABLE_NOTIFY_REPO_COMPANY_MSG BOOLEAN NOT NULL
		($13)::smallint, 	-- $13: MIN_LOAN_AGE smallint NOT NULL
		($14)::boolean, 	-- $14: ENABLE_SINGLE_OPEN_LOAN_TYPE BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: ENABLE_LOAN_MAINT_OTHER_STATES BOOLEAN NOT NULL
		($16)::number, 	-- $16: TL_NO_LIEN_FEE_FOR_LOANS_UP_TO NUMBER(10,4) NOT NULL
		($17)::smallint, 	-- $17: DUE_DATE_PAYMENTS_THREAD_COUNT smallint NOT NULL
		($18)::boolean, 	-- $18: SHOW_ACCESS_KEY BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: ENABLE_MARKETING_INVITATIONS BOOLEAN NOT NULL
		($20)::char, 	-- $20: MARKETING_INVITATION_OVERRIDES_TYPE CHAR(8000) NOT NULL
		($21)::int, 	-- $21: MARKETING_INVITATION_INCOME_PCT INT NOT NULL
		($22)::boolean, 	-- $22: ENABLE_UNBLOCK_BANK_ACCOUNT_ON_LOAN BOOLEAN NOT NULL
		($23)::smallint, 	-- $23: COLLECTION_SOL_YEARS SMALLINT NOT NULL
		($24)::int, 	-- $24: COLLECTION_SOL_RI_URGENT_NOTE_KEY INT NOT NULL
		to_timestamp_ntz($25), 	-- $25: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($26) 	-- $26: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GlobalStatesHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GlobalStatesHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GlobalStatesHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GlobalStatesHistory_HIST;
SELECT * FROM STG.WINCHK_GlobalStatesHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 513: GoldConfig
COPY INTO ARES.STG.SRC_GoldConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: GOLD_CONFIG_KEY smallint NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::boolean, 	-- $3: ENABLE_GOLD BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: ENABLE_DIAMOND BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: ENABLE_RECEIPT_DETAILS BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: ENABLE_ADDITIONAL_FORMS BOOLEAN NOT NULL
		($7)::smallint, 	-- $7: MATURITY_LENGTH_DAYS SMALLINT NOT NULL
		($8)::numeric, 	-- $8: MIN_DIAMOND_SIZE NUMERIC NOT NULL
		($9)::numeric, 	-- $9: MAX_DIAMOND_SIZE NUMERIC NOT NULL
		($10)::smallint, 	-- $10: MAX_DIAMONDS_PER_TRANS SMALLINT NOT NULL
		($11)::smallint, 	-- $11: MAX_DIAMONDS_PER_ITEM SMALLINT NOT NULL
		($12)::number, 	-- $12: DIAMOND_OFFER_MAX NUMBER(10,4) NOT NULL
		($13)::smallint, 	-- $13: GOLD_TELLER_PCT SMALLINT NOT NULL
		($14)::smallint, 	-- $14: GOLD_MOD_BASE_PCT SMALLINT NOT NULL
		($15)::smallint, 	-- $15: GOLD_MOD_MID_PCT SMALLINT NOT NULL
		($16)::smallint, 	-- $16: GOLD_MOD_HIGH_PCT SMALLINT NOT NULL
		($17)::smallint, 	-- $17: GOLD_MOD_OVERRIDE_PCT SMALLINT NOT NULL
		($18)::numeric, 	-- $18: GOLD_10K_LOSS_PCT NUMERIC NOT NULL
		($19)::numeric, 	-- $19: GOLD_14K_LOSS_PCT NUMERIC NOT NULL
		($20)::numeric, 	-- $20: GOLD_18K_LOSS_PCT NUMERIC NOT NULL
		($21)::numeric, 	-- $21: GOLD_22K_LOSS_PCT NUMERIC NOT NULL
		($22)::numeric, 	-- $22: GOLD_24K_LOSS_PCT NUMERIC NOT NULL
		($23)::number, 	-- $23: REQUIRE_AUTH_TRANS_AMT NUMBER(10,4) NOT NULL
		($24)::boolean, 	-- $24: REQUIRE_ITEM_SIZE BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: REQUIRE_GENDER BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: REQUIRE_HEIGHT BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: REQUIRE_WEIGHT BOOLEAN NOT NULL
		($28)::boolean, 	-- $28: REQUIRE_RACE BOOLEAN NOT NULL
		($29)::boolean, 	-- $29: REQUIRE_EYE_COLOR BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: REQUIRE_HAIR_COLOR BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: REQUIRE_MIN_AGE BOOLEAN NOT NULL
		($32)::smallint, 	-- $32: REQUIRE_AGE_VALUE SMALLINT NOT NULL
		($33)::boolean, 	-- $33: REQUIRE_HOME_PHONE BOOLEAN NOT NULL
		($34)::boolean, 	-- $34: REQUIRE_EMPLOYER_NAME BOOLEAN NOT NULL
		($35)::boolean, 	-- $35: REQUIRE_PLATE_NUMBER BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: REQUIRE_PLATE_STATE BOOLEAN NOT NULL
		($37)::number, 	-- $37: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($38)::boolean, 	-- $38: ENABLE_SPANISH_DOCS BOOLEAN NOT NULL
		($39)::boolean, 	-- $39: REQUIRE_MID_NAME BOOLEAN NOT NULL
		($40)::numeric, 	-- $40: PLATINUM_LOSS_PCT NUMERIC NOT NULL
		($41)::boolean, 	-- $41: ENABLE_QUICK_QUOTE BOOLEAN NOT NULL
		($42)::varchar, 	-- $42: POLICE_STORE_ID VARCHAR(8000) NOT NULL
		($43)::numeric, 	-- $43: GOLD_09K_LOSS_PCT NUMERIC NOT NULL
		($44)::boolean, 	-- $44: GOVT_ID_REQUIRED BOOLEAN NOT NULL
		($45)::varchar, 	-- $45: COMPANY_NAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($46), 	-- $46: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($47) 	-- $47: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldConfig_HIST;
SELECT * FROM STG.WINCHK_GoldConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 514: GoldConfigHistory
COPY INTO ARES.STG.SRC_GoldConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: GOLD_CONFIG_KEY smallint NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::boolean, 	-- $3: ENABLE_GOLD BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: ENABLE_DIAMOND BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: ENABLE_RECEIPT_DETAILS BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: ENABLE_ADDITIONAL_FORMS BOOLEAN NOT NULL
		($7)::smallint, 	-- $7: MATURITY_LENGTH_DAYS SMALLINT NOT NULL
		($8)::numeric, 	-- $8: MIN_DIAMOND_SIZE NUMERIC NOT NULL
		($9)::numeric, 	-- $9: MAX_DIAMOND_SIZE NUMERIC NOT NULL
		($10)::smallint, 	-- $10: MAX_DIAMONDS_PER_TRANS SMALLINT NOT NULL
		($11)::smallint, 	-- $11: MAX_DIAMONDS_PER_ITEM SMALLINT NOT NULL
		($12)::number, 	-- $12: DIAMOND_OFFER_MAX NUMBER(10,4) NOT NULL
		($13)::smallint, 	-- $13: GOLD_TELLER_PCT SMALLINT NOT NULL
		($14)::smallint, 	-- $14: GOLD_MOD_BASE_PCT SMALLINT NOT NULL
		($15)::smallint, 	-- $15: GOLD_MOD_MID_PCT SMALLINT NOT NULL
		($16)::smallint, 	-- $16: GOLD_MOD_HIGH_PCT SMALLINT NOT NULL
		($17)::smallint, 	-- $17: GOLD_MOD_OVERRIDE_PCT SMALLINT NOT NULL
		($18)::numeric, 	-- $18: GOLD_10K_LOSS_PCT NUMERIC NOT NULL
		($19)::numeric, 	-- $19: GOLD_14K_LOSS_PCT NUMERIC NOT NULL
		($20)::numeric, 	-- $20: GOLD_18K_LOSS_PCT NUMERIC NOT NULL
		($21)::numeric, 	-- $21: GOLD_22K_LOSS_PCT NUMERIC NOT NULL
		($22)::numeric, 	-- $22: GOLD_24K_LOSS_PCT NUMERIC NOT NULL
		($23)::number, 	-- $23: REQUIRE_AUTH_TRANS_AMT NUMBER(10,4) NOT NULL
		($24)::boolean, 	-- $24: REQUIRE_ITEM_SIZE BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: REQUIRE_GENDER BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: REQUIRE_HEIGHT BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: REQUIRE_WEIGHT BOOLEAN NOT NULL
		($28)::boolean, 	-- $28: REQUIRE_RACE BOOLEAN NOT NULL
		($29)::boolean, 	-- $29: REQUIRE_EYE_COLOR BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: REQUIRE_HAIR_COLOR BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: REQUIRE_MIN_AGE BOOLEAN NOT NULL
		($32)::smallint, 	-- $32: REQUIRE_AGE_VALUE SMALLINT NOT NULL
		($33)::boolean, 	-- $33: REQUIRE_HOME_PHONE BOOLEAN NOT NULL
		($34)::boolean, 	-- $34: REQUIRE_EMPLOYER_NAME BOOLEAN NOT NULL
		($35)::boolean, 	-- $35: REQUIRE_PLATE_NUMBER BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: REQUIRE_PLATE_STATE BOOLEAN NOT NULL
		($37)::number, 	-- $37: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($38)::boolean, 	-- $38: ENABLE_SPANISH_DOCS BOOLEAN NOT NULL
		($39)::boolean, 	-- $39: REQUIRE_MID_NAME BOOLEAN NOT NULL
		($40)::numeric, 	-- $40: PLATINUM_LOSS_PCT NUMERIC NOT NULL
		($41)::boolean, 	-- $41: ENABLE_QUICK_QUOTE BOOLEAN NOT NULL
		($42)::varchar, 	-- $42: POLICE_STORE_ID VARCHAR(8000) NOT NULL
		($43)::numeric, 	-- $43: GOLD_09K_LOSS_PCT NUMERIC NOT NULL
		($44)::boolean, 	-- $44: GOVT_ID_REQUIRED BOOLEAN NOT NULL
		($45)::varchar, 	-- $45: COMPANY_NAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($46), 	-- $46: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($47) 	-- $47: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldConfigHistory_HIST;
SELECT * FROM STG.WINCHK_GoldConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 515: GoldConfigItem
COPY INTO ARES.STG.SRC_GoldConfigItem_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: GOLD_ITEM_KEY smallint NOT NULL
		($2)::smallint 	-- $2: GOLD_CONFIG_KEY smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldConfigItem/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldConfigItem_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldConfigItem_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldConfigItem_HIST;
SELECT * FROM STG.WINCHK_GoldConfigItem_HIST;
[STATUS=tbd]
*/

-- // TABLE 516: GoldDailyBag
COPY INTO ARES.STG.SRC_GoldDailyBag_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_DAILY_BAG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::int, 	-- $5: GB_GL_ACCT INT NOT NULL
		($6)::int, 	-- $6: GB_BAG_NUM INT NOT NULL
		($7)::smallint, 	-- $7: GB_BAG_COUNT smallint NOT NULL
		($8)::number, 	-- $8: GB_BAG_TOTAL NUMBER(10,4) NOT NULL
		($9)::int, 	-- $9: TRANS_DETAIL_KEY INT NOT NULL
		($10)::boolean, 	-- $10: REVERSED BOOLEAN NOT NULL
		($11)::int 	-- $11: REVERSED_TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldDailyBag/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldDailyBag_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldDailyBag_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldDailyBag_HIST;
SELECT * FROM STG.WINCHK_GoldDailyBag_HIST;
[STATUS=tbd]
*/

-- // TABLE 517: GoldDailyBagDetail
COPY INTO ARES.STG.SRC_GoldDailyBagDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_DAILY_BAG_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: GOLD_DAILY_BAG_KEY INT NOT NULL
		($3)::int 	-- $3: GOLD_TRANS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldDailyBagDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldDailyBagDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldDailyBagDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldDailyBagDetail_HIST;
SELECT * FROM STG.WINCHK_GoldDailyBagDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 518: GoldItem
COPY INTO ARES.STG.SRC_GoldItem_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: GOLD_ITEM_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: ITEM_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: ITEM_TYPE CHAR(8000) NOT NULL
		($4)::boolean 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldItem/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldItem_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldItem_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldItem_HIST;
SELECT * FROM STG.WINCHK_GoldItem_HIST;
[STATUS=tbd]
*/

-- // TABLE 519: GoldTrans
COPY INTO ARES.STG.SRC_GoldTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::int, 	-- $5: DRAWER_KEY INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::int, 	-- $7: TRANS_DETAIL_KEY INT NOT NULL
		($8)::int, 	-- $8: TRANS_POS_KEY INT NOT NULL
		($9)::smallint, 	-- $9: TOTAL_STONES SMALLINT NOT NULL
		($10)::smallint, 	-- $10: TOTAL_DIAMONDS SMALLINT NOT NULL
		($11)::numeric, 	-- $11: TOTAL_GOLD_WEIGHT NUMERIC NOT NULL
		($12)::number, 	-- $12: TOTAL_OFFER_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: TOTAL_ACCEPTED_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: OFFER_GOLD_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: OFFER_DIAMOND_AMT NUMBER(10,4) NOT NULL
		($16)::char, 	-- $16: MOD_OVERRIDE CHAR(8000) NOT NULL
		($17)::number, 	-- $17: GOLD_PRICE NUMBER(10,4) NOT NULL
		($18)::int, 	-- $18: BAG_NUM INT NOT NULL
		($19)::int, 	-- $19: LOCATION_TRANS_NUM INT NOT NULL
		($20)::date, 	-- $20: MATURITY_DATE DATE NOT NULL
		($21)::boolean, 	-- $21: REVERSED BOOLEAN NOT NULL
		($22)::int, 	-- $22: REVERSED_TRANS_DETAIL_KEY INT NULL
		($23)::number, 	-- $23: TOTAL_BASE_MOD_OFFER NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: TOTAL_MID_MOD_OFFER NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: TOTAL_HIGH_MOD_OFFER NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: TOTAL_OVERRIDE_MOD_OFFER NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: TOTAL_TELLER_OFFER NUMBER(10,4) NOT NULL
		($28)::smallint, 	-- $28: ACCEPTED_OFFER_LEVEL SMALLINT NOT NULL
		($29)::numeric, 	-- $29: GOLD_WEIGHT_10K NUMERIC NOT NULL
		($30)::numeric, 	-- $30: GOLD_WEIGHT_14K NUMERIC NOT NULL
		($31)::numeric, 	-- $31: GOLD_WEIGHT_18K NUMERIC NOT NULL
		($32)::numeric, 	-- $32: GOLD_WEIGHT_22K NUMERIC NOT NULL
		($33)::numeric, 	-- $33: GOLD_WEIGHT_24K NUMERIC NOT NULL
		($34)::number, 	-- $34: TRANS_HANDLING_FEE NUMBER(10,4) NOT NULL
		($35)::numeric, 	-- $35: GOLD_LOSS_10K NUMERIC NOT NULL
		($36)::numeric, 	-- $36: GOLD_LOSS_14K NUMERIC NOT NULL
		($37)::numeric, 	-- $37: GOLD_LOSS_18K NUMERIC NOT NULL
		($38)::numeric, 	-- $38: GOLD_LOSS_22K NUMERIC NOT NULL
		($39)::numeric, 	-- $39: GOLD_LOSS_24K NUMERIC NOT NULL
		($40)::number, 	-- $40: GOLD_PRICE_10K NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: GOLD_PRICE_14K NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: GOLD_PRICE_18K NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: GOLD_PRICE_22K NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: GOLD_PRICE_24K NUMBER(10,4) NOT NULL
		($45)::smallint, 	-- $45: OFFER_LEVEL_CODE SMALLINT NOT NULL
		($46)::numeric, 	-- $46: PLATINUM_WEIGHT NUMERIC NOT NULL
		($47)::numeric, 	-- $47: PLATINUM_LOSS NUMERIC NOT NULL
		($48)::number, 	-- $48: PLATINUM_PRICE NUMBER(10,4) NOT NULL
		($49)::numeric, 	-- $49: GOLD_WEIGHT_09K NUMERIC NOT NULL
		($50)::numeric, 	-- $50: GOLD_LOSS_09K NUMERIC NOT NULL
		($51)::number 	-- $51: GOLD_PRICE_09K NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldTrans_HIST;
SELECT * FROM STG.WINCHK_GoldTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 520: GoldTransCustomer
COPY INTO ARES.STG.SRC_GoldTransCustomer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_TRANS_CUSTOMER_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::char, 	-- $5: GENDER CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: HEIGHT_FEET SMALLINT NOT NULL
		($7)::smallint, 	-- $7: HEIGHT_INCHES SMALLINT NOT NULL
		($8)::smallint, 	-- $8: WEIGHT smallint NOT NULL
		($9)::smallint, 	-- $9: RACE SMALLINT NOT NULL
		($10)::smallint, 	-- $10: EYE_COLOR SMALLINT NOT NULL
		($11)::smallint, 	-- $11: HAIR_COLOR SMALLINT NOT NULL
		($12)::varchar, 	-- $12: HOME_PHONE VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: EMPLOYER_NAME VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: PLATE_NUMBER VARCHAR(8000) NOT NULL
		($15)::char, 	-- $15: PLATE_STATE CHAR(8000) NOT NULL
		($16)::int, 	-- $16: GOLD_TRANS_KEY INT NOT NULL
		($17)::boolean, 	-- $17: REQUIRE_MID_NAME BOOLEAN NOT NULL
		($18)::varchar, 	-- $18: CUST_MID_NAME VARCHAR(8000) NOT NULL
		($19)::boolean, 	-- $19: REQUIRE_NOTHING BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: REQUIRE_GENDER BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: REQUIRE_HEIGHT BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: REQUIRE_WEIGHT BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: REQUIRE_RACE BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: REQUIRE_EYE_COLOR BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: REQUIRE_HAIR_COLOR BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: REQUIRE_MIN_AGE BOOLEAN NOT NULL
		($27)::smallint, 	-- $27: REQUIRE_AGE_VALUE SMALLINT NOT NULL
		($28)::boolean, 	-- $28: REQUIRE_HOME_PHONE BOOLEAN NOT NULL
		($29)::boolean, 	-- $29: REQUIRE_EMPLOYER_NAME BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: REQUIRE_PLATE_NUMBER BOOLEAN NOT NULL
		($31)::boolean 	-- $31: REQUIRE_PLATE_STATE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldTransCustomer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldTransCustomer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldTransCustomer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldTransCustomer_HIST;
SELECT * FROM STG.WINCHK_GoldTransCustomer_HIST;
[STATUS=tbd]
*/

-- // TABLE 521: GoldTransDetail
COPY INTO ARES.STG.SRC_GoldTransDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_TRANS_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: GOLD_TRANS_KEY INT NOT NULL
		($3)::smallint, 	-- $3: GOLD_ITEM_KEY smallint NOT NULL
		($4)::smallint, 	-- $4: METAL_TYPE_CODE SMALLINT NOT NULL
		($5)::varchar, 	-- $5: MARKINGS VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: ITEM_SIZE VARCHAR(8000) NOT NULL
		($7)::smallint, 	-- $7: NUM_GEMSTONES SMALLINT NOT NULL
		($8)::varchar, 	-- $8: GEM_DESCRIPTION VARCHAR(8000) NOT NULL
		($9)::smallint, 	-- $9: NUM_DIAMONDS SMALLINT NOT NULL
		($10)::boolean, 	-- $10: REVERSED BOOLEAN NOT NULL
		($11)::int, 	-- $11: REVERSED_TRANS_DETAIL_KEY INT NULL
		($12)::numeric, 	-- $12: REVERSED_WEIGHT NUMERIC NOT NULL
		($13)::boolean 	-- $13: REQUIRE_ITEM_SIZE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldTransDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldTransDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldTransDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldTransDetail_HIST;
SELECT * FROM STG.WINCHK_GoldTransDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 522: GoldTransfer
COPY INTO ARES.STG.SRC_GoldTransfer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_TRANSFER_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: SENT_DATE TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: SENT_BY CHAR(8000) NOT NULL
		($6)::int, 	-- $6: SENT_DAILY_BAG_CNT INT NULL
		($7)::number, 	-- $7: SENT_DAILY_BAG_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($8), 	-- $8: RECV_DATE TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: RECV_BY CHAR(8000) NULL
		($10)::int, 	-- $10: RECV_DAILY_BAG_CNT INT NULL
		($11)::number, 	-- $11: RECV_DAILY_BAG_AMT NUMBER(10,4) NULL
		($12)::varchar, 	-- $12: COURIER_TRACKING_NUM VARCHAR(8000) NOT NULL
		($13)::varchar 	-- $13: COURIER_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldTransfer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldTransfer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldTransfer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldTransfer_HIST;
SELECT * FROM STG.WINCHK_GoldTransfer_HIST;
[STATUS=tbd]
*/

-- // TABLE 523: GoldTransferDetail
COPY INTO ARES.STG.SRC_GoldTransferDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_TRANSFER_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: GOLD_TRANSFER_KEY INT NOT NULL
		($3)::int, 	-- $3: GOLD_DAILY_BAG_KEY INT NOT NULL
		($4)::int 	-- $4: TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldTransferDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldTransferDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldTransferDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldTransferDetail_HIST;
SELECT * FROM STG.WINCHK_GoldTransferDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 524: GoldTransStoneDetail
COPY INTO ARES.STG.SRC_GoldTransStoneDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOLD_TRANS_STONE_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: GOLD_TRANS_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: STONE_TYPE SMALLINT NOT NULL
		($4)::numeric, 	-- $4: STONE_SIZE NUMERIC NOT NULL
		($5)::smallint 	-- $5: STONE_COUNT SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoldTransStoneDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoldTransStoneDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoldTransStoneDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoldTransStoneDetail_HIST;
SELECT * FROM STG.WINCHK_GoldTransStoneDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 525: GoodCustomerStudy
COPY INTO ARES.STG.SRC_GoodCustomerStudy_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: GOOD_CUSTOMER_STUDY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::number, 	-- $4: INITIAL_APPROVED_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: INCREASE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: STATE_MAX_AMT NUMBER(10,4) NOT NULL
		($7)::number 	-- $7: LOAN_TAKEN_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/GoodCustomerStudy/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*GoodCustomerStudy_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_GoodCustomerStudy_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_GoodCustomerStudy_HIST;
SELECT * FROM STG.WINCHK_GoodCustomerStudy_HIST;
[STATUS=tbd]
*/

-- // TABLE 526: HairColor
COPY INTO ARES.STG.SRC_HairColor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: HAIR_COLOR_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: POLICE_GOLD_EXPORT_LAS_VEGAS_DESCRIPTION CHAR(8000) NOT NULL
		($4)::char, 	-- $4: POLICE_GOLD_EXPORT_SPARKS_DESCRIPTION CHAR(8000) NOT NULL
		($5)::char 	-- $5: POLICE_GOLD_EXPORT_ALABAMA_DESCRIPTION CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/HairColor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*HairColor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_HairColor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_HairColor_HIST;
SELECT * FROM STG.WINCHK_HairColor_HIST;
[STATUS=tbd]
*/

-- // TABLE 527: Holiday
COPY INTO ARES.STG.SRC_Holiday_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: HOLIDAY_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Holiday/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Holiday_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Holiday_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Holiday_HIST;
SELECT * FROM STG.WINCHK_Holiday_HIST;
[STATUS=tbd]
*/

-- // TABLE 528: IatDialerResults
COPY INTO ARES.STG.SRC_IatDialerResults_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: HostCode INT NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: Status VARCHAR(8000) NULL
		($4)::int, 	-- $4: Ris_Task_id INT NOT NULL
		($5)::varchar, 	-- $5: CURO_Note VARCHAR(8000) NULL
		($6)::int, 	-- $6: TASK_ACTION_RESULT_KEY INT NULL
		($7)::int, 	-- $7: AGENT_ACTION_KEY INT NULL
		($8)::int, 	-- $8: AGENT_RESULT_KEY1 INT NULL
		($9)::smallint 	-- $9: FOLLOWUP_DAYS smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/IatDialerResults/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IatDialerResults_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IatDialerResults_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IatDialerResults_HIST;
SELECT * FROM STG.WINCHK_IatDialerResults_HIST;
[STATUS=tbd]
*/

-- // TABLE 529: ICSBatchImportRun
COPY INTO ARES.STG.SRC_ICSBatchImportRun_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ICS_BATCH_IMPORT_RUN_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_UPDATED TIMESTAMP_LTZ NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NULL
		($6)::varchar, 	-- $6: IMPORT_FILE_NAME VARCHAR(8000) NOT NULL
		($7)::int, 	-- $7: RUN_COUNT INT NOT NULL
		($8)::boolean, 	-- $8: IMPORT_COMPLETE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IMPORT_ERROR BOOLEAN NOT NULL
		($10)::varchar 	-- $10: IMPORT_ERROR_MESSAGE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ICSBatchImportRun/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ICSBatchImportRun_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ICSBatchImportRun_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ICSBatchImportRun_HIST;
SELECT * FROM STG.WINCHK_ICSBatchImportRun_HIST;
[STATUS=tbd]
*/

-- // TABLE 530: ICSBatchImportRunData
COPY INTO ARES.STG.SRC_ICSBatchImportRunData_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ICS_BATCH_IMPORT_RUN_DATA_KEY INT NOT NULL
		($2)::int, 	-- $2: ICS_BATCH_IMPORT_RUN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NULL
		($7)::varchar, 	-- $7: NOTIFICATION_ID VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: IMPORT_DATA_FILE_NAME VARCHAR(8000) NOT NULL
		($9)::variant, 	-- $9: IMPORT_DATA VARIANT NOT NULL
		($10)::int, 	-- $10: RUN_COUNT INT NOT NULL
		($11)::boolean, 	-- $11: IMPORT_COMPLETE BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: IMPORT_ERROR BOOLEAN NOT NULL
		($13)::varchar 	-- $13: IMPORT_ERROR_MESSAGE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ICSBatchImportRunData/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ICSBatchImportRunData_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ICSBatchImportRunData_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ICSBatchImportRunData_HIST;
SELECT * FROM STG.WINCHK_ICSBatchImportRunData_HIST;
[STATUS=tbd]
*/

-- // TABLE 531: IdentificationType
COPY INTO ARES.STG.SRC_IdentificationType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ID_TYPE_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: ID_TYPE_CATEGORY_KEY SMALLINT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::smallint, 	-- $5: MAX_ALLOWED_ID_TYPE SMALLINT NOT NULL
		($6)::boolean, 	-- $6: GOVT_ISSUED BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: NUMBER_REQUIRED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: COUNTRY_REQUIRED BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: STATE_REQUIRED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: AML_PRIMARY BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: AML_SECONDARY BOOLEAN NOT NULL
		($12)::datetime, 	-- $12: DATE_ENTERED datetime NOT NULL
		($13)::char, 	-- $13: TELLER CHAR(8000) NOT NULL
		($14)::datetime, 	-- $14: DATE_UPDATED datetime NOT NULL
		($15)::char, 	-- $15: UPDATED_BY CHAR(8000) NOT NULL
		($16)::smallint, 	-- $16: IDENTIFICATION_TYPE_AML_KEY SMALLINT NOT NULL
		($17)::boolean, 	-- $17: CTR_REPORTING BOOLEAN NOT NULL
		to_timestamp_ntz($18), 	-- $18: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($19) 	-- $19: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationType_HIST;
SELECT * FROM STG.WINCHK_IdentificationType_HIST;
[STATUS=tbd]
*/

-- // TABLE 532: IdentificationTypeAML
COPY INTO ARES.STG.SRC_IdentificationTypeAML_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: IDENTIFICATION_TYPE_AML_KEY SMALLINT NOT NULL
		($2)::char, 	-- $2: CODE CHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeAML/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeAML_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeAML_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeAML_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeAML_HIST;
[STATUS=tbd]
*/

-- // TABLE 533: IdentificationTypeCategory
COPY INTO ARES.STG.SRC_IdentificationTypeCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: ID_TYPE_CATEGORY_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeCategory_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 534: IdentificationTypeHistory
COPY INTO ARES.STG.SRC_IdentificationTypeHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ID_TYPE_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: ID_TYPE_CATEGORY_KEY SMALLINT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::smallint, 	-- $5: MAX_ALLOWED_ID_TYPE SMALLINT NOT NULL
		($6)::boolean, 	-- $6: GOVT_ISSUED BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: NUMBER_REQUIRED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: COUNTRY_REQUIRED BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: STATE_REQUIRED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: AML_PRIMARY BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: AML_SECONDARY BOOLEAN NOT NULL
		($12)::datetime, 	-- $12: DATE_ENTERED datetime NOT NULL
		($13)::char, 	-- $13: TELLER CHAR(8000) NOT NULL
		($14)::datetime, 	-- $14: DATE_UPDATED datetime NOT NULL
		($15)::char, 	-- $15: UPDATED_BY CHAR(8000) NOT NULL
		($16)::smallint, 	-- $16: IDENTIFICATION_TYPE_AML_KEY SMALLINT NOT NULL
		($17)::boolean, 	-- $17: CTR_REPORTING BOOLEAN NOT NULL
		to_timestamp_ntz($18), 	-- $18: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($19) 	-- $19: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeHistory_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 535: IdentificationTypeRule
COPY INTO ARES.STG.SRC_IdentificationTypeRule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IDENTIFICATION_TYPE_RULE_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::smallint, 	-- $5: SORT_ORDER smallint NOT NULL
		($6)::varchar, 	-- $6: RULE_DEFINITION VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: RULE_DESCRIPTION VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: RULE_MESSAGE VARCHAR(8000) NOT NULL
		($9)::varchar 	-- $9: RULE_DIRECTIVES VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeRule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeRule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeRule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeRule_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeRule_HIST;
[STATUS=tbd]
*/

-- // TABLE 536: IdentificationTypeRuleXRef
COPY INTO ARES.STG.SRC_IdentificationTypeRuleXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IDENTIFICATION_TYPE_RULE_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: IDENTIFICATION_TYPE_RULE_KEY INT NOT NULL
		($3)::int, 	-- $3: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($4)::char 	-- $4: STATE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeRuleXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeRuleXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeRuleXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeRuleXRef_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeRuleXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 537: IdentificationTypeState
COPY INTO ARES.STG.SRC_IdentificationTypeState_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IDENTIFICATION_TYPE_STATE_KEY INT NOT NULL
		($2)::int, 	-- $2: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($3)::char, 	-- $3: ID_STATE CHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: STORE_EXPIRATION_REQUIRED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: STORE_ACCEPTABLE_FOR_NEW_LOAN BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: WEB_ACCEPTABLE_FOR_NEW_LOAN BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: WEB_EXPIRATION_REQUIRED BOOLEAN NOT NULL
		($11)::datetime, 	-- $11: DATE_UPDATED datetime NULL
		($12)::char, 	-- $12: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($13), 	-- $13: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14) 	-- $14: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeState/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeState_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeState_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeState_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeState_HIST;
[STATUS=tbd]
*/

-- // TABLE 538: IdentificationTypeStateHistory
COPY INTO ARES.STG.SRC_IdentificationTypeStateHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IDENTIFICATION_TYPE_STATE_KEY INT NOT NULL
		($2)::int, 	-- $2: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($3)::char, 	-- $3: ID_STATE CHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: STORE_EXPIRATION_REQUIRED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: STORE_ACCEPTABLE_FOR_NEW_LOAN BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: WEB_ACCEPTABLE_FOR_NEW_LOAN BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: WEB_EXPIRATION_REQUIRED BOOLEAN NOT NULL
		($11)::datetime, 	-- $11: DATE_UPDATED datetime NULL
		($12)::char, 	-- $12: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($13), 	-- $13: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14) 	-- $14: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeStateHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeStateHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeStateHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeStateHistory_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeStateHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 539: IdentificationTypeVerify
COPY INTO ARES.STG.SRC_IdentificationTypeVerify_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: VERIFY_CODE CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: ID_VERIFY_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::int 	-- $6: IDENTIFICATION_TYPE_VERIFY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IdentificationTypeVerify/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IdentificationTypeVerify_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IdentificationTypeVerify_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IdentificationTypeVerify_HIST;
SELECT * FROM STG.WINCHK_IdentificationTypeVerify_HIST;
[STATUS=tbd]
*/

-- // TABLE 540: ImageCashLetter
COPY INTO ARES.STG.SRC_ImageCashLetter_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IMAGE_CASH_LETTER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ICL_FILENAME VARCHAR(8000) NOT NULL
		($3)::numeric, 	-- $3: ORIGINAL_SUBMISSION_AMOUNT NUMERIC NOT NULL
		to_timestamp_ntz($4), 	-- $4: FILE_CREATION_DATETIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5), 	-- $5: FIRST_FILE_STATUS_DATETIME TIMESTAMP_LTZ NULL
		to_timestamp_ntz($6), 	-- $6: FILE_PROCESSED_DATETIME TIMESTAMP_LTZ NULL
		($7)::varchar, 	-- $7: FILE_VALIDATION_STATUS VARCHAR(8000) NOT NULL
		($8)::int, 	-- $8: CASH_LETTER_COUNT INT NOT NULL
		($9)::int, 	-- $9: RECORD_COUNT INT NOT NULL
		($10)::int, 	-- $10: ITEM_COUNT INT NOT NULL
		($11)::int, 	-- $11: NUMBER_REJECTED INT NOT NULL
		($12)::numeric, 	-- $12: ADJUSTMENT_DOLLARS NUMERIC NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($14)::char, 	-- $14: TELLER CHAR(8000) NOT NULL
		($15)::char, 	-- $15: RECONCILE_TELLER CHAR(8000) NULL
		to_timestamp_ntz($16) 	-- $16: DATE_RECONCILED TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/ImageCashLetter/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ImageCashLetter_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ImageCashLetter_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ImageCashLetter_HIST;
SELECT * FROM STG.WINCHK_ImageCashLetter_HIST;
[STATUS=tbd]
*/

-- // TABLE 541: ImageCashLetterBundle
COPY INTO ARES.STG.SRC_ImageCashLetterBundle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IMAGE_CASH_LETTER_BUNDLE_KEY INT NOT NULL
		($2)::int, 	-- $2: IMAGE_CASH_LETTER_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: BUNDLE_SEQ smallint NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::int 	-- $6: DEPOSIT_BAG_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ImageCashLetterBundle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ImageCashLetterBundle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ImageCashLetterBundle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ImageCashLetterBundle_HIST;
SELECT * FROM STG.WINCHK_ImageCashLetterBundle_HIST;
[STATUS=tbd]
*/

-- // TABLE 542: ImageCashLetterDetail
COPY INTO ARES.STG.SRC_ImageCashLetterDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IMAGE_CASH_LETTER_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: IMAGE_CASH_LETTER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::varchar, 	-- $4: CASH_LETTER_STATUS VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: REJECTED_ITEM_COUNT INT NOT NULL
		($6)::numeric, 	-- $6: REJECTED_DOLLARS NUMERIC NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::char 	-- $8: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ImageCashLetterDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ImageCashLetterDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ImageCashLetterDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ImageCashLetterDetail_HIST;
SELECT * FROM STG.WINCHK_ImageCashLetterDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 543: IN459126
COPY INTO ARES.STG.SRC_IN459126_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::float, 	-- $1: Customer_key FLOAT NULL
		($2)::float, 	-- $2: Risrept_key FLOAT NULL
		($3)::float, 	-- $3: Loan_key FLOAT NULL
		($4)::varchar, 	-- $4: REFERENCE VARCHAR(8000) NULL
		($5)::float, 	-- $5: LOCATION FLOAT NULL
		($6)::float, 	-- $6: loan_product_key FLOAT NULL
		($7)::varchar, 	-- $7: short VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: LU_Prev_Cat VARCHAR(8000) NULL
		($9)::float, 	-- $9: IMPCTD_EMAIL FLOAT NULL
		($10)::varchar, 	-- $10: LTTR_RSLT VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: PRODUCT_NAME VARCHAR(8000) NULL
		($12)::float, 	-- $12: ris_audit_id FLOAT NULL
		($13)::datetime, 	-- $13: MVD_TO_STTL datetime NULL
		($14)::varchar, 	-- $14: LN_STATUS_PREV VARCHAR(8000) NULL
		($15)::float, 	-- $15: CustRI_Bal FLOAT NULL
		($16)::float, 	-- $16: RI_BALANCE FLOAT NULL
		($17)::float, 	-- $17: loan_balance FLOAT NULL
		($18)::datetime, 	-- $18: LoanDate datetime NULL
		($19)::datetime, 	-- $19: OrigDef_Date datetime NULL
		($20)::datetime, 	-- $20: CurrDef_Date datetime NULL
		($21)::datetime, 	-- $21: ADJ_DUE_DATE_PREV datetime NULL
		($22)::float 	-- $22: RI_Age FLOAT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IN459126/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IN459126_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IN459126_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IN459126_HIST;
SELECT * FROM STG.WINCHK_IN459126_HIST;
[STATUS=tbd]
*/

-- // TABLE 544: IN466857
COPY INTO ARES.STG.SRC_IN466857_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: teller CHAR(8000) NULL
		($2)::int 	-- $2: teller_id_key INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IN466857/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IN466857_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IN466857_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IN466857_HIST;
SELECT * FROM STG.WINCHK_IN466857_HIST;
[STATUS=tbd]
*/

-- // TABLE 545: IncomeAmountType
COPY INTO ARES.STG.SRC_IncomeAmountType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: IncomeAmountTypeKey CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeAmountType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeAmountType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeAmountType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeAmountType_HIST;
SELECT * FROM STG.WINCHK_IncomeAmountType_HIST;
[STATUS=tbd]
*/

-- // TABLE 546: IncomeCalculationCycle
COPY INTO ARES.STG.SRC_IncomeCalculationCycle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: IncomeCalculationCycleKey CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeCalculationCycle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeCalculationCycle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeCalculationCycle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeCalculationCycle_HIST;
SELECT * FROM STG.WINCHK_IncomeCalculationCycle_HIST;
[STATUS=tbd]
*/

-- // TABLE 547: IncomeJobType
COPY INTO ARES.STG.SRC_IncomeJobType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_JOB_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeJobType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeJobType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeJobType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeJobType_HIST;
SELECT * FROM STG.WINCHK_IncomeJobType_HIST;
[STATUS=tbd]
*/

-- // TABLE 548: IncomeSource
COPY INTO ARES.STG.SRC_IncomeSource_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_SOURCE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::int, 	-- $4: INCOME_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeSource/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeSource_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeSource_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeSource_HIST;
SELECT * FROM STG.WINCHK_IncomeSource_HIST;
[STATUS=tbd]
*/

-- // TABLE 549: IncomeSourceHistory
COPY INTO ARES.STG.SRC_IncomeSourceHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_SOURCE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::int, 	-- $4: INCOME_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeSourceHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeSourceHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeSourceHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeSourceHistory_HIST;
SELECT * FROM STG.WINCHK_IncomeSourceHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 550: IncomeType
COPY INTO ARES.STG.SRC_IncomeType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_TYPE_KEY INT NOT NULL
		($2)::char, 	-- $2: INCOME_TYPE_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeType_HIST;
SELECT * FROM STG.WINCHK_IncomeType_HIST;
[STATUS=tbd]
*/

-- // TABLE 551: IncomeTypeHistory
COPY INTO ARES.STG.SRC_IncomeTypeHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_TYPE_KEY INT NOT NULL
		($2)::char, 	-- $2: INCOME_TYPE_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeTypeHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeTypeHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeTypeHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeTypeHistory_HIST;
SELECT * FROM STG.WINCHK_IncomeTypeHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 552: IncomeTypeLocation
COPY INTO ARES.STG.SRC_IncomeTypeLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_TYPE_LOC_KEY INT NOT NULL
		($2)::int, 	-- $2: INCOME_TYPE_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ENUM_LIST_FOR_INCOME_MAINT_REQUIRED_FIELDS VARCHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeTypeLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeTypeLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeTypeLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeTypeLocation_HIST;
SELECT * FROM STG.WINCHK_IncomeTypeLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 553: IncomeTypeLocationHistory
COPY INTO ARES.STG.SRC_IncomeTypeLocationHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_TYPE_LOC_KEY INT NOT NULL
		($2)::int, 	-- $2: INCOME_TYPE_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ENUM_LIST_FOR_INCOME_MAINT_REQUIRED_FIELDS VARCHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeTypeLocationHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeTypeLocationHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeTypeLocationHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeTypeLocationHistory_HIST;
SELECT * FROM STG.WINCHK_IncomeTypeLocationHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 554: IncomeVerificationMessage
COPY INTO ARES.STG.SRC_IncomeVerificationMessage_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFICATION_MESSAGE_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_ACTIVE BOOLEAN NOT NULL
		($3)::char, 	-- $3: STATE CHAR(8000) NOT NULL
		($4)::varchar 	-- $4: MESSAGE_TEXT VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerificationMessage/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerificationMessage_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerificationMessage_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerificationMessage_HIST;
SELECT * FROM STG.WINCHK_IncomeVerificationMessage_HIST;
[STATUS=tbd]
*/

-- // TABLE 555: IncomeVerificationSource
COPY INTO ARES.STG.SRC_IncomeVerificationSource_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: INCOME_VERIFICATION_SOURCE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerificationSource/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerificationSource_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerificationSource_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerificationSource_HIST;
SELECT * FROM STG.WINCHK_IncomeVerificationSource_HIST;
[STATUS=tbd]
*/

-- // TABLE 556: IncomeVerificationSourceLocation
COPY INTO ARES.STG.SRC_IncomeVerificationSourceLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFICATON_SOURCE_LOCATION_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::smallint, 	-- $3: CLIENT_APPLICATION_KEY SMALLINT NOT NULL
		($4)::smallint, 	-- $4: INCOME_VERIFICATON_SOURCE_KEY SMALLINT NOT NULL
		($5)::smallint 	-- $5: DISPLAY_ORDER SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerificationSourceLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerificationSourceLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerificationSourceLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerificationSourceLocation_HIST;
SELECT * FROM STG.WINCHK_IncomeVerificationSourceLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 557: IncomeVerificationType
COPY INTO ARES.STG.SRC_IncomeVerificationType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFICATION_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerificationType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerificationType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerificationType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerificationType_HIST;
SELECT * FROM STG.WINCHK_IncomeVerificationType_HIST;
[STATUS=tbd]
*/

-- // TABLE 558: IncomeVerifyMethod
COPY INTO ARES.STG.SRC_IncomeVerifyMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFY_METHOD_KEY INT NOT NULL
		($2)::int, 	-- $2: INCOME_VERIFICATION_TYPE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: VERIFY_METHOD VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: VALIDATES_STEADY_INCOME BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerifyMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerifyMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerifyMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerifyMethod_HIST;
SELECT * FROM STG.WINCHK_IncomeVerifyMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 559: IncomeVerifyMethodHistory
COPY INTO ARES.STG.SRC_IncomeVerifyMethodHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFY_METHOD_KEY INT NOT NULL
		($2)::int, 	-- $2: INCOME_VERIFICATION_TYPE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: VERIFY_METHOD VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: VALIDATES_STEADY_INCOME BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerifyMethodHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerifyMethodHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerifyMethodHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerifyMethodHistory_HIST;
SELECT * FROM STG.WINCHK_IncomeVerifyMethodHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 560: IncomeVerifyMethodLocation
COPY INTO ARES.STG.SRC_IncomeVerifyMethodLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFY_METHOD_LOC_KEY INT NOT NULL
		($2)::int, 	-- $2: INCOME_VERIFY_METHOD_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerifyMethodLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerifyMethodLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerifyMethodLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerifyMethodLocation_HIST;
SELECT * FROM STG.WINCHK_IncomeVerifyMethodLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 561: IncomeVerifyMethodLocationHistory
COPY INTO ARES.STG.SRC_IncomeVerifyMethodLocationHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INCOME_VERIFY_METHOD_LOC_KEY INT NOT NULL
		($2)::int, 	-- $2: INCOME_VERIFY_METHOD_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: LAST_UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IncomeVerifyMethodLocationHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IncomeVerifyMethodLocationHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IncomeVerifyMethodLocationHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IncomeVerifyMethodLocationHistory_HIST;
SELECT * FROM STG.WINCHK_IncomeVerifyMethodLocationHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 562: InitGLList
COPY INTO ARES.STG.SRC_InitGLList_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INIT_GL_LIST_KEY INT NOT NULL
		($2)::smallint, 	-- $2: TRANS_CODE SMALLINT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: GL_ACCT INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InitGLList/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InitGLList_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InitGLList_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InitGLList_HIST;
SELECT * FROM STG.WINCHK_InitGLList_HIST;
[STATUS=tbd]
*/

-- // TABLE 563: InitGLListHistory
COPY INTO ARES.STG.SRC_InitGLListHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INIT_GL_LIST_KEY INT NOT NULL
		($2)::smallint, 	-- $2: TRANS_CODE SMALLINT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: GL_ACCT INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InitGLListHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InitGLListHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InitGLListHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InitGLListHistory_HIST;
SELECT * FROM STG.WINCHK_InitGLListHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 564: InsuranceCancelReason
COPY INTO ARES.STG.SRC_InsuranceCancelReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_CANCEL_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: INSURANCE_CANCEL_REASON VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceCancelReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceCancelReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceCancelReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceCancelReason_HIST;
SELECT * FROM STG.WINCHK_InsuranceCancelReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 565: InsuranceClaim
COPY INTO ARES.STG.SRC_InsuranceClaim_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_CLAIM_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: INSURANCE_STATUS_KEY INT NOT NULL
		($4)::varchar, 	-- $4: CLAIM_NUM VARCHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: CLAIM_REASON_ID smallint NOT NULL
		($6)::date, 	-- $6: SUBMITTED_DATE DATE NOT NULL
		($7)::date, 	-- $7: FOLLOW_UP_DATE DATE NULL
		($8)::datetime, 	-- $8: DATE_ENTERED datetime NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::datetime, 	-- $10: DATE_UPDATED datetime NULL
		($11)::char 	-- $11: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceClaim/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceClaim_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceClaim_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceClaim_HIST;
SELECT * FROM STG.WINCHK_InsuranceClaim_HIST;
[STATUS=tbd]
*/

-- // TABLE 566: InsuranceClaimEdit
COPY INTO ARES.STG.SRC_InsuranceClaimEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_CLAIM_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: INSURANCE_CLAIM_KEY INT NOT NULL
		($3)::int, 	-- $3: INSURANCE_CLAIM_STATUS_KEY INT NULL
		($4)::varchar, 	-- $4: FIELD_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: OLD_VALUE VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: NEW_VALUE VARCHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_ENTERED datetime NOT NULL
		($8)::char 	-- $8: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceClaimEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceClaimEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceClaimEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceClaimEdit_HIST;
SELECT * FROM STG.WINCHK_InsuranceClaimEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 567: InsuranceClaimReason
COPY INTO ARES.STG.SRC_InsuranceClaimReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: INSURANCE_CLAIM_REASON_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceClaimReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceClaimReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceClaimReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceClaimReason_HIST;
SELECT * FROM STG.WINCHK_InsuranceClaimReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 568: InsuranceClaimStatus
COPY INTO ARES.STG.SRC_InsuranceClaimStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_CLAIM_STATUS_KEY INT NOT NULL
		($2)::int, 	-- $2: INSURANCE_CLAIM_KEY INT NOT NULL
		($3)::int, 	-- $3: INSURANCE_STATUS_KEY INT NOT NULL
		($4)::varchar, 	-- $4: CLAIM_STATUS_NOTE VARCHAR(8000) NOT NULL
		($5)::date, 	-- $5: FOLLOW_UP_DATE DATE NULL
		($6)::datetime, 	-- $6: DATE_ENTERED datetime NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		($8)::datetime, 	-- $8: DATE_UPDATED datetime NULL
		($9)::char 	-- $9: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceClaimStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceClaimStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceClaimStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceClaimStatus_HIST;
SELECT * FROM STG.WINCHK_InsuranceClaimStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 569: InsuranceEnrollment
COPY INTO ARES.STG.SRC_InsuranceEnrollment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_ENROLLMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::int, 	-- $5: CANCEL_LOAN_PAYMENT_KEY INT NULL
		($6)::int, 	-- $6: INSURANCE_CANCEL_REASON_KEY INT NOT NULL
		($7)::boolean 	-- $7: INSURANCE_CANCEL_IN_GRACE_PERIOD BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceEnrollment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceEnrollment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceEnrollment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceEnrollment_HIST;
SELECT * FROM STG.WINCHK_InsuranceEnrollment_HIST;
[STATUS=tbd]
*/

-- // TABLE 570: InsurancePaymentBatch
COPY INTO ARES.STG.SRC_InsurancePaymentBatch_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_PAYMENT_BATCH_KEY INT NOT NULL
		($2)::varchar, 	-- $2: INSURANCE_FILE_NAME VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: PROCESSED_CNT smallint NOT NULL
		($4)::smallint, 	-- $4: ERROR_CNT smallint NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsurancePaymentBatch/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsurancePaymentBatch_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsurancePaymentBatch_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsurancePaymentBatch_HIST;
SELECT * FROM STG.WINCHK_InsurancePaymentBatch_HIST;
[STATUS=tbd]
*/

-- // TABLE 571: InsurancePaymentBatchItem
COPY INTO ARES.STG.SRC_InsurancePaymentBatchItem_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_PAYMENT_BATCH_ITEM_KEY INT NOT NULL
		($2)::int, 	-- $2: INSURANCE_PAYMENT_BATCH_KEY INT NOT NULL
		($3)::varchar, 	-- $3: RAW_LOAN_NUMBER VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: RAW_INSURANCE_CLAIM_NUMBER VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: RAW_CUSTOMER_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: RAW_INSURANCE_PAYMENT_AMT VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: RAW_NUM_PAYMENTS VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: RAW_LUMP_SUM_AMT VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: RAW_BENEFIT_CLAIMED VARCHAR(8000) NOT NULL
		($10)::boolean, 	-- $10: IS_ERROR BOOLEAN NOT NULL
		($11)::varchar, 	-- $11: ERROR_MSG VARCHAR(8000) NOT NULL
		($12)::varchar 	-- $12: WARNING_MSG VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsurancePaymentBatchItem/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsurancePaymentBatchItem_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsurancePaymentBatchItem_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsurancePaymentBatchItem_HIST;
SELECT * FROM STG.WINCHK_InsurancePaymentBatchItem_HIST;
[STATUS=tbd]
*/

-- // TABLE 572: InsurancePaymentBatchPayment
COPY INTO ARES.STG.SRC_InsurancePaymentBatchPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_PAYMENT_BATCH_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: INSURANCE_PAYMENT_BATCH_ITEM_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::int, 	-- $4: INSURANCE_CLAIM_KEY INT NULL
		($5)::int, 	-- $5: TRANS_DETAIL_KEY INT NOT NULL
		($6)::number, 	-- $6: INSURANCE_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PAID_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: QUEUED_AMT NUMBER(10,4) NOT NULL
		($9)::number 	-- $9: NSF_FEES_WAIVED NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsurancePaymentBatchPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsurancePaymentBatchPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsurancePaymentBatchPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsurancePaymentBatchPayment_HIST;
SELECT * FROM STG.WINCHK_InsurancePaymentBatchPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 573: InsuranceStatus
COPY INTO ARES.STG.SRC_InsuranceStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_STATUS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SHORT_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: FULL_DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_OPEN_CLAIM BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_UPDATED datetime NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NULL
		($9)::boolean, 	-- $9: IS_DECLINED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IS_FOLLOWUP_ENABLED BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_BLOCK_SET_LOAN_INACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13) 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceStatus_HIST;
SELECT * FROM STG.WINCHK_InsuranceStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 574: InsuranceStatusHistory
COPY INTO ARES.STG.SRC_InsuranceStatusHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INSURANCE_STATUS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SHORT_DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: FULL_DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_OPEN_CLAIM BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_UPDATED datetime NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NULL
		($9)::boolean, 	-- $9: IS_DECLINED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IS_FOLLOWUP_ENABLED BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_BLOCK_SET_LOAN_INACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13) 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InsuranceStatusHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InsuranceStatusHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InsuranceStatusHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InsuranceStatusHistory_HIST;
SELECT * FROM STG.WINCHK_InsuranceStatusHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 575: InterCompanyLeadSaleConfig
COPY INTO ARES.STG.SRC_InterCompanyLeadSaleConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INTER_COMPANY_LEAD_SALE_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: LEAD_SOURCE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: CAMPAIGN_ID VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: LEAD_SUB_ID VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: LEAD_TYPE VARCHAR(8000) NULL
		($6)::varchar 	-- $6: SERVICE_URL VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/InterCompanyLeadSaleConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InterCompanyLeadSaleConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InterCompanyLeadSaleConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InterCompanyLeadSaleConfig_HIST;
SELECT * FROM STG.WINCHK_InterCompanyLeadSaleConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 576: InterestType
COPY INTO ARES.STG.SRC_InterestType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: INTEREST_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InterestType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InterestType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InterestType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InterestType_HIST;
SELECT * FROM STG.WINCHK_InterestType_HIST;
[STATUS=tbd]
*/

-- // TABLE 577: InternalProcessEmail
COPY INTO ARES.STG.SRC_InternalProcessEmail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INTERNAL_PROCESS_EMAIL_KEY INT NOT NULL
		($2)::varchar, 	-- $2: RECIPIENTS VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SUBJECT VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: INTERNAL_PROCESS_EMAIL_TYPE_KEY SMALLINT NOT NULL
		($5)::boolean 	-- $5: PROCESSED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InternalProcessEmail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InternalProcessEmail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InternalProcessEmail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InternalProcessEmail_HIST;
SELECT * FROM STG.WINCHK_InternalProcessEmail_HIST;
[STATUS=tbd]
*/

-- // TABLE 578: InternalProcessEmailBody
COPY INTO ARES.STG.SRC_InternalProcessEmailBody_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INTERNAL_PROCESS_EMAIL_BODY_KEY INT NOT NULL
		($2)::int, 	-- $2: INTERNAL_PROCESS_EMAIL_KEY INT NOT NULL
		($3)::varchar 	-- $3: BODY VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InternalProcessEmailBody/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InternalProcessEmailBody_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InternalProcessEmailBody_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InternalProcessEmailBody_HIST;
SELECT * FROM STG.WINCHK_InternalProcessEmailBody_HIST;
[STATUS=tbd]
*/

-- // TABLE 579: InternalProcessEmailType
COPY INTO ARES.STG.SRC_InternalProcessEmailType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: INTERNAL_PROCESS_EMAIL_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: INTERNAL_PROCESS_EMAIL_TYPE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InternalProcessEmailType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InternalProcessEmailType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InternalProcessEmailType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InternalProcessEmailType_HIST;
SELECT * FROM STG.WINCHK_InternalProcessEmailType_HIST;
[STATUS=tbd]
*/

-- // TABLE 580: InterpersonalRelationshipType
COPY INTO ARES.STG.SRC_InterpersonalRelationshipType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: INTERPERSONAL_RELATIONSHIP_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: Description VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InterpersonalRelationshipType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InterpersonalRelationshipType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InterpersonalRelationshipType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InterpersonalRelationshipType_HIST;
SELECT * FROM STG.WINCHK_InterpersonalRelationshipType_HIST;
[STATUS=tbd]
*/

-- // TABLE 581: InvalidCustomerAddress
COPY INTO ARES.STG.SRC_InvalidCustomerAddress_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ICA_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_ADDRESS_KEY INT NULL
		($4)::smallint, 	-- $4: REASON SMALLINT NOT NULL
		($5)::varchar, 	-- $5: HOME_ADDR_NUM VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: HOME_ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: HOME_ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: HOME_ADDR_STREET VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: HOME_ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: HOME_ADDR_SUITE VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: HOME_ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: HOME_CITY VARCHAR(8000) NOT NULL
		($13)::char, 	-- $13: HOME_STATE CHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: HOME_ZIPCODE VARCHAR(8000) NOT NULL
		($15)::varchar 	-- $15: HOME_ADDRESS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/InvalidCustomerAddress/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InvalidCustomerAddress_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InvalidCustomerAddress_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InvalidCustomerAddress_HIST;
SELECT * FROM STG.WINCHK_InvalidCustomerAddress_HIST;
[STATUS=tbd]
*/

-- // TABLE 582: InvalidStreet
COPY INTO ARES.STG.SRC_InvalidStreet_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: STREET_NAME CHAR(8000) NOT NULL
		($2)::boolean 	-- $2: STARTS_WITH BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/InvalidStreet/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*InvalidStreet_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_InvalidStreet_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_InvalidStreet_HIST;
SELECT * FROM STG.WINCHK_InvalidStreet_HIST;
[STATUS=tbd]
*/

-- // TABLE 583: IPBlock
COPY INTO ARES.STG.SRC_IPBlock_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IP_Block_Key INT NOT NULL
		($2)::bigint, 	-- $2: NumericIP BIGINT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DateAdded TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: Hits INT NOT NULL
		($5)::varchar, 	-- $5: Notes VARCHAR(8000) NULL
		($6)::boolean, 	-- $6: IsBlocked BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: BlockChangeDate TIMESTAMP_LTZ NULL
		($8)::varchar 	-- $8: Description VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/IPBlock/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IPBlock_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IPBlock_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IPBlock_HIST;
SELECT * FROM STG.WINCHK_IPBlock_HIST;
[STATUS=tbd]
*/

-- // TABLE 584: IpToCountry
COPY INTO ARES.STG.SRC_IpToCountry_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::bigint, 	-- $1: FromIP BIGINT NOT NULL
		($2)::bigint, 	-- $2: ToIP BIGINT NOT NULL
		($3)::char, 	-- $3: CountryCode CHAR(8000) NOT NULL
		($4)::bigint 	-- $4: IPTOCOUNTRY_KEY BIGINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/IpToCountry/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IpToCountry_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IpToCountry_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IpToCountry_HIST;
SELECT * FROM STG.WINCHK_IpToCountry_HIST;
[STATUS=tbd]
*/

-- // TABLE 585: Issuer
COPY INTO ARES.STG.SRC_Issuer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ISSUER_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TLR CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::varchar, 	-- $6: ISSUER VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: CITY VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: STATE CHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: ZIPCODE VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: PHONE VARCHAR(8000) NOT NULL
		($11)::number, 	-- $11: LIMIT NUMBER(10,4) NOT NULL
		($12)::char, 	-- $12: TYPE CHAR(8000) NULL
		($13)::boolean, 	-- $13: BOUNCED BOOLEAN NOT NULL
		($14)::varchar, 	-- $14: NOTE VARCHAR(8000) NOT NULL
		($15)::char, 	-- $15: TUPT CHAR(8000) NULL
		to_timestamp_ntz($16), 	-- $16: TUPD TIMESTAMP_LTZ NULL
		($17)::smallint, 	-- $17: TLOC smallint NULL
		($18)::boolean, 	-- $18: BLOCK_CHECK BOOLEAN NOT NULL
		($19)::int, 	-- $19: BANK_STATUS_KEY INT NULL
		($20)::boolean, 	-- $20: ACH_BLOCK BOOLEAN NOT NULL
		($21)::varchar, 	-- $21: PHONE_EXT VARCHAR(8000) NULL
		($22)::varchar, 	-- $22: ADDRESS1 VARCHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: COUNTY VARCHAR(8000) NOT NULL
		($24)::char, 	-- $24: COUNTRY CHAR(8000) NOT NULL
		($25)::smallint, 	-- $25: BANK_FUNDING_METHOD SMALLINT NOT NULL
		($26)::char, 	-- $26: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($27)::varchar, 	-- $27: ADDR_STREET VARCHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: FLAT_NUM VARCHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: BUILDING_NUM VARCHAR(8000) NOT NULL
		($30)::varchar, 	-- $30: BUILDING_NAME VARCHAR(8000) NOT NULL
		($31)::boolean, 	-- $31: FLASH BOOLEAN NULL
		($32)::int, 	-- $32: BLOCK_REASON_KEY INT NULL
		($33)::boolean, 	-- $33: SYSTEM_BLOCK BOOLEAN NULL
		($34)::varchar, 	-- $34: ADDRESS_CSZ VARCHAR(8000) NULL
		($35)::varchar, 	-- $35: ADDRESS_LINE VARCHAR(8000) NULL
		($36)::varchar, 	-- $36: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($37)::varchar, 	-- $37: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($38)::varchar, 	-- $38: ADDRESS_LINE_3 VARCHAR(8000) NULL
		($39)::int 	-- $39: BANK_ACCOUNT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Issuer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Issuer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Issuer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Issuer_HIST;
SELECT * FROM STG.WINCHK_Issuer_HIST;
[STATUS=tbd]
*/

-- // TABLE 586: IssuerEdit
COPY INTO ARES.STG.SRC_IssuerEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ISSUER_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: ISSUER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/IssuerEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*IssuerEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_IssuerEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_IssuerEdit_HIST;
SELECT * FROM STG.WINCHK_IssuerEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 587: KBB_Log_Config
COPY INTO ARES.STG.SRC_KBB_Log_Config_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: KBB_LOG_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: KBB_LOGGING_STATUS smallint NOT NULL
		($3)::varchar 	-- $3: KBB_LOG_DESC VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/KBB_Log_Config/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*KBB_Log_Config_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_KBB_Log_Config_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_KBB_Log_Config_HIST;
SELECT * FROM STG.WINCHK_KBB_Log_Config_HIST;
[STATUS=tbd]
*/

-- // TABLE 588: KbbApiCall
COPY INTO ARES.STG.SRC_KbbApiCall_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: KBB_API_CALL_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: REQUEST VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: RESPONSE VARCHAR(8000) NULL
		($6)::varchar 	-- $6: POST_DATA VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/KbbApiCall/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*KbbApiCall_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_KbbApiCall_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_KbbApiCall_HIST;
SELECT * FROM STG.WINCHK_KbbApiCall_HIST;
[STATUS=tbd]
*/

-- // TABLE 589: LanguageType
COPY INTO ARES.STG.SRC_LanguageType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: LanguageTypeKey CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LanguageType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LanguageType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LanguageType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LanguageType_HIST;
SELECT * FROM STG.WINCHK_LanguageType_HIST;
[STATUS=tbd]
*/

-- // TABLE 590: LegalVerification
COPY INTO ARES.STG.SRC_LegalVerification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LEGAL_VERIFICATION_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NULL
		($4)::varchar, 	-- $4: RI_REFERENCE VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: DEBTOR_NUMBER VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: PLAINTIFF1 VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: PLAINTIFF2 VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: DEFENDANT_FULLNAME VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: DEFENDANT_ADDRESS_LINE VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: DEFENDANT_ADDRESS_CSZ VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: DEFENDANT_MASKED_SSN VARCHAR(8000) NOT NULL
		($12)::number, 	-- $12: CUSTOMER_BALANCE_DUE NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: COURT_COSTS NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: DEFENDANT_TOTAL_DUE NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: ATTORNEY_FEES NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: ATTORNEY_TITLE_LOAN_BAL_DUE NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: ATTORNEY_CURRENT_BAL_DUE NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: ATTORNEY_POST_JUDGE_DUE NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: PRINCIPLE_DUE NUMBER(10,4) NOT NULL
		($20)::int, 	-- $20: EXCEPTION_REPORT_STATUS INT NOT NULL
		($21)::char, 	-- $21: VERIFIED_TELLER CHAR(8000) NULL
		to_timestamp_ntz($22), 	-- $22: VERIFIED_DATE TIMESTAMP_LTZ NULL
		($23)::varchar, 	-- $23: IMPORT_FILENAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($24), 	-- $24: EXCEPTION_STATUS_LAST_UPDATED TIMESTAMP_LTZ NOT NULL
		($25)::smallint 	-- $25: REPORT_TYPE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LegalVerification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LegalVerification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LegalVerification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LegalVerification_HIST;
SELECT * FROM STG.WINCHK_LegalVerification_HIST;
[STATUS=tbd]
*/

-- // TABLE 591: Lender
COPY INTO ARES.STG.SRC_Lender_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LENDER_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: LENDER_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LENDER_NAME VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: QUALIFY_CURO_CUSTOMER BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: ENABLED BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: LAST_UPDATED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Lender/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Lender_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Lender_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Lender_HIST;
SELECT * FROM STG.WINCHK_Lender_HIST;
[STATUS=tbd]
*/

-- // TABLE 592: LenderHistory
COPY INTO ARES.STG.SRC_LenderHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LENDER_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: LENDER_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LENDER_NAME VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: QUALIFY_CURO_CUSTOMER BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: ENABLED BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: LAST_UPDATED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LenderHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LenderHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LenderHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LenderHistory_HIST;
SELECT * FROM STG.WINCHK_LenderHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 593: LetterNotification
COPY INTO ARES.STG.SRC_LetterNotification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LETTER_NOTIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_STAGED_COMMUNICATION_KEY INT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		($5)::int, 	-- $5: VISITOR_KEY INT NOT NULL
		($6)::int, 	-- $6: NOTIFICATION_TYPE_KEY INT NOT NULL
		($7)::varchar, 	-- $7: NOTIFICATION_ID VARCHAR(8000) NOT NULL
		($8)::date, 	-- $8: BATCH_SENT_DATE DATE NULL
		to_timestamp_ntz($9), 	-- $9: RECEIVE_DATE TIMESTAMP_LTZ NULL
		($10)::date, 	-- $10: MAIL_DATE DATE NULL
		($11)::date, 	-- $11: PROJECTED_MAIL_DATE DATE NOT NULL
		($12)::boolean, 	-- $12: IS_AD_ASTRA BOOLEAN NOT NULL
		($13)::varchar, 	-- $13: NOTICE_DATA VARCHAR(8000) NOT NULL
		($14)::char, 	-- $14: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LetterNotification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LetterNotification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LetterNotification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LetterNotification_HIST;
SELECT * FROM STG.WINCHK_LetterNotification_HIST;
[STATUS=tbd]
*/

-- // TABLE 594: LetterNotificationHistory
COPY INTO ARES.STG.SRC_LetterNotificationHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LETTER_NOTIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_STAGED_COMMUNICATION_KEY INT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_KEY INT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		($5)::int, 	-- $5: VISITOR_KEY INT NOT NULL
		($6)::int, 	-- $6: NOTIFICATION_TYPE_KEY INT NOT NULL
		($7)::varchar, 	-- $7: NOTIFICATION_ID VARCHAR(8000) NOT NULL
		($8)::date, 	-- $8: BATCH_SENT_DATE DATE NULL
		to_timestamp_ntz($9), 	-- $9: RECEIVE_DATE TIMESTAMP_LTZ NULL
		($10)::date, 	-- $10: MAIL_DATE DATE NULL
		($11)::date, 	-- $11: PROJECTED_MAIL_DATE DATE NOT NULL
		($12)::boolean, 	-- $12: IS_AD_ASTRA BOOLEAN NOT NULL
		($13)::varchar, 	-- $13: NOTICE_DATA VARCHAR(8000) NOT NULL
		($14)::char, 	-- $14: LAST_UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LetterNotificationHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LetterNotificationHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LetterNotificationHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LetterNotificationHistory_HIST;
SELECT * FROM STG.WINCHK_LetterNotificationHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 595: LienHolder
COPY INTO ARES.STG.SRC_LienHolder_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LIEN_HOLDER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: LIEN_HOLDER_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: ADDRESS1 VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: CITY VARCHAR(8000) NOT NULL
		($5)::char, 	-- $5: STATE CHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: ZIPCODE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: PHONE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::smallint, 	-- $10: ENTERED_LOCATION smallint NOT NULL
		to_timestamp_ntz($11), 	-- $11: LAST_UPDATED TIMESTAMP_LTZ NULL
		($12)::char, 	-- $12: UPDATED_BY CHAR(8000) NULL
		($13)::smallint, 	-- $13: UPDATED_LOCATION smallint NULL
		($14)::varchar, 	-- $14: COUNTY VARCHAR(8000) NOT NULL
		($15)::char, 	-- $15: COUNTRY CHAR(8000) NOT NULL
		($16)::char, 	-- $16: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: ADDR_STREET VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: FLAT_NUM VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: BUILDING_NUM VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: BUILDING_NAME VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: ADDRESS_CSZ VARCHAR(8000) NULL
		($22)::varchar, 	-- $22: ADDRESS_LINE VARCHAR(8000) NULL
		($23)::varchar, 	-- $23: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($24)::varchar, 	-- $24: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($25)::varchar 	-- $25: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LienHolder/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LienHolder_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LienHolder_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LienHolder_HIST;
SELECT * FROM STG.WINCHK_LienHolder_HIST;
[STATUS=tbd]
*/

-- // TABLE 596: Loan
COPY INTO ARES.STG.SRC_Loan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::boolean, 	-- $7: COURTESY_CALL BOOLEAN NOT NULL
		($8)::int, 	-- $8: ISSUER_KEY INT NULL
		($9)::varchar, 	-- $9: CHECK_NO VARCHAR(8000) NOT NULL
		($10)::boolean, 	-- $10: DIRECT_DEPOSIT BOOLEAN NOT NULL
		($11)::char, 	-- $11: LOAN_TYPE CHAR(8000) NOT NULL
		($12)::char, 	-- $12: ORIG_CODE CHAR(8000) NOT NULL
		($13)::int, 	-- $13: ORIG_LOAN_KEY INT NULL
		($14)::int, 	-- $14: PAID_LOAN_KEY INT NULL
		($15)::int, 	-- $15: PAYMENT_PLAN_KEY INT NULL
		($16)::smallint, 	-- $16: ROLLOVER_NUM smallint NOT NULL
		($17)::char, 	-- $17: LOAN_STATUS CHAR(8000) NOT NULL
		($18)::number, 	-- $18: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: LOAN_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: CASH_AMT NUMBER(19,4) NOT NULL
		($21)::number, 	-- $21: PRINC_AMT NUMBER(10,4) NOT NULL
		($22)::numeric, 	-- $22: RATE_PCT NUMERIC NOT NULL
		($23)::number, 	-- $23: DISC_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: REBATE_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: GRACE_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: FEE_AMT NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($28)::number, 	-- $28: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($29)::boolean, 	-- $29: CHARGE_TRANS_FEE BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: CHARGE_LIEN_FEE BOOLEAN NOT NULL
		($31)::number, 	-- $31: TOT_FEE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($32), 	-- $32: ORIG_DUE_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($33), 	-- $33: ADJUSTED_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($34)::boolean, 	-- $34: DEFAULTED BOOLEAN NOT NULL
		($35)::date, 	-- $35: DEFAULT_DATE DATE NULL
		($36)::boolean, 	-- $36: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($37), 	-- $37: REVERSED_DATE TIMESTAMP_LTZ NULL
		($38)::numeric, 	-- $38: ORIG_APR NUMERIC NULL
		($39)::int, 	-- $39: DRAWERZ_KEY INT NULL
		to_timestamp_ntz($40), 	-- $40: LOAN_STATUS_DATE TIMESTAMP_LTZ NOT NULL
		($41)::boolean, 	-- $41: JOINT_LOAN BOOLEAN NOT NULL
		($42)::char, 	-- $42: PRINT_LANGUAGE CHAR(8000) NOT NULL
		to_timestamp_ntz($43), 	-- $43: CALC_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($44)::char, 	-- $44: PRODUCT_TYPE CHAR(8000) NOT NULL
		($45)::varchar, 	-- $45: DISPLAY_CHECK_NO VARCHAR(8000) NOT NULL
		($46)::number, 	-- $46: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($47)::date, 	-- $47: PENDING_SCHED_ACH_SENT DATE NULL
		($48)::number, 	-- $48: PENDING_COLL_ACH_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($49), 	-- $49: PENDING_COLL_ACH_SENT TIMESTAMP_LTZ NULL
		($50)::smallint, 	-- $50: DEPOSIT_ORDER SMALLINT NULL
		($51)::smallint, 	-- $51: DEPOSIT_STATUS SMALLINT NOT NULL
		to_timestamp_ntz($52), 	-- $52: LOAN_DATE TIMESTAMP_LTZ NOT NULL
		($53)::boolean, 	-- $53: IS_MULTI_CHECK BOOLEAN NULL
		($54)::int, 	-- $54: LOAN_PRODUCT_KEY INT NOT NULL
		($55)::boolean, 	-- $55: IS_GAIL_LOAN BOOLEAN NULL
		($56)::boolean, 	-- $56: EXCLUDE_FROM_CAP BOOLEAN NOT NULL
		($57)::boolean, 	-- $57: IS_ESIGN BOOLEAN NOT NULL
		($58)::date, 	-- $58: CAPS_CHANGE_DATE DATE NULL
		($59)::number, 	-- $59: FASTER_PAYMENTS_FEE NUMBER(10,4) NOT NULL
		($60)::smallint, 	-- $60: ESIGN_DOC_METHOD SMALLINT NOT NULL
		($61)::numeric, 	-- $61: STANDARD_RATE_PCT NUMERIC NOT NULL
		($62)::smallint, 	-- $62: LOAN_RATE_SOURCE SMALLINT NOT NULL
		($63)::smallint, 	-- $63: CREDITED_LOCATION smallint NULL
		($64)::numeric, 	-- $64: TILA_APR NUMERIC NOT NULL
		($65)::number, 	-- $65: TILA_FINANCE_CHARGE NUMBER(10,4) NOT NULL
		($66)::number, 	-- $66: TILA_AMOUNT_FINANCED NUMBER(10,4) NOT NULL
		($67)::number, 	-- $67: TILA_TOTAL_PAYMENTS NUMBER(10,4) NOT NULL
		($68)::boolean, 	-- $68: INTEREST_AND_FEES_CAP_REACHED BOOLEAN NOT NULL
		($69)::date, 	-- $69: INTEREST_AND_FEES_CAP_REACHED_DATE DATE NULL
		($70)::date, 	-- $70: WITHDRAW_DATE DATE NULL
		($71)::date, 	-- $71: WITHDRAW_ADJUSTED_DUE_DATE DATE NULL
		($72)::int, 	-- $72: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($73)::int, 	-- $73: LOAN_PRODUCT_TILA_KEY INT NOT NULL
		($74)::number, 	-- $74: PENDING_PMT_AMT NUMBER(10,4) NOT NULL
		($75)::date, 	-- $75: PENDING_PMT_DATE DATE NULL
		($76)::number, 	-- $76: PENDING_PMT_PRINC NUMBER(10,4) NOT NULL
		($77)::number, 	-- $77: PENDING_PMT_INTEREST_CAP NUMBER(10,4) NOT NULL
		($78)::number, 	-- $78: PENDING_PMT_CAB_INTEREST_CAP NUMBER(10,4) NOT NULL
		($79)::number, 	-- $79: PENDING_PMT_FEES NUMBER(10,4) NOT NULL
		($80)::number, 	-- $80: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($81)::boolean, 	-- $81: EXCLUDE_FROM_CAP_ACH BOOLEAN NOT NULL
		($82)::boolean, 	-- $82: REVOKE_SCHED_ACH BOOLEAN NOT NULL
		($83)::boolean, 	-- $83: REVOKE_SCHED_DEBIT_CARD BOOLEAN NOT NULL
		($84)::smallint, 	-- $84: PAYMENT_PLAN_TYPE_KEY smallint NULL
		($85)::boolean, 	-- $85: IS_CUT_RATE_MATCH BOOLEAN NOT NULL
		($86)::smallint, 	-- $86: ANNUAL_RATE_BAND SMALLINT NULL
		($87)::int, 	-- $87: GL_ACCT_LOAN_PRODUCT_GROUP_KEY INT NOT NULL
		($88)::boolean, 	-- $88: IS_SOLD BOOLEAN NOT NULL
		($89)::boolean, 	-- $89: IS_LOAN_PENDING_SALE BOOLEAN NOT NULL
		($90)::boolean 	-- $90: HAS_STORED_DOC BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Loan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Loan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Loan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Loan_HIST;
SELECT * FROM STG.WINCHK_Loan_HIST;
[STATUS=tbd]
*/

-- // TABLE 597: LoanABLFacility
COPY INTO ARES.STG.SRC_LoanABLFacility_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_ABL_FACILITY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: ABL_FACILITY_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: START_DATE TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: END_DATE TIMESTAMP_LTZ NULL
		($7)::char 	-- $7: ENDED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanABLFacility/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanABLFacility_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanABLFacility_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanABLFacility_HIST;
SELECT * FROM STG.WINCHK_LoanABLFacility_HIST;
[STATUS=tbd]
*/

-- // TABLE 598: LoanAdjustmentBatchSettings
COPY INTO ARES.STG.SRC_LoanAdjustmentBatchSettings_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_ADJUSTMENT_BATCH_SETTINGS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: PRODUCT_TYPE CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: DECREASE_AMOUNT_OWED_REASON SMALLINT NOT NULL
		($5)::smallint, 	-- $5: COURTESY_PAYOUT_TYPE SMALLINT NOT NULL
		($6)::smallint, 	-- $6: ADJUST_AMT_TYPE SMALLINT NOT NULL
		($7)::number, 	-- $7: SPECIFIC_AMT NUMBER(10,4) NOT NULL
		($8)::smallint, 	-- $8: APPLY_DUE_TYPE SMALLINT NOT NULL
		($9)::smallint, 	-- $9: APPLY_BUCKET_TYPE SMALLINT NOT NULL
		to_timestamp_ntz($10), 	-- $10: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($11)::char, 	-- $11: ENTERED_BY CHAR(8000) NOT NULL
		($12)::smallint, 	-- $12: LOAN_ADJUSTMENT_TYPE SMALLINT NOT NULL
		($13)::int, 	-- $13: PAYMENT_METHOD INT NOT NULL
		($14)::char, 	-- $14: PENDING_ACH_TYPE CHAR(8000) NOT NULL
		($15)::boolean 	-- $15: IS_PRIVATE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanAdjustmentBatchSettings/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanAdjustmentBatchSettings_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanAdjustmentBatchSettings_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanAdjustmentBatchSettings_HIST;
SELECT * FROM STG.WINCHK_LoanAdjustmentBatchSettings_HIST;
[STATUS=tbd]
*/

-- // TABLE 599: LoanAdjustmentType
COPY INTO ARES.STG.SRC_LoanAdjustmentType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOAN_ADJUSTMENT_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanAdjustmentType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanAdjustmentType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanAdjustmentType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanAdjustmentType_HIST;
SELECT * FROM STG.WINCHK_LoanAdjustmentType_HIST;
[STATUS=tbd]
*/

-- // TABLE 600: LoanApplication
COPY INTO ARES.STG.SRC_LoanApplication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LENDER_KEY SMALLINT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NULL
		($5)::int, 	-- $5: VISITOR_KEY INT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NULL
		($7)::varchar, 	-- $7: FIRST_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: MID_NAME VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: LAST_NAME VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: HOME_PHONE VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: CELL_PHONE VARCHAR(8000) NOT NULL
		($12)::char, 	-- $12: SSN CHAR(8000) NOT NULL
		($13)::char, 	-- $13: BANK_ROUTING_NUMBER CHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($15)::number, 	-- $15: REQ_CASH_AMT NUMBER(19,4) NOT NULL
		($16)::smallint, 	-- $16: CCARD_EXP_MONTH SMALLINT NOT NULL
		($17)::smallint, 	-- $17: CCARD_EXP_YEAR smallint NOT NULL
		($18)::boolean, 	-- $18: CCARD_IS_DEBIT BOOLEAN NOT NULL
		($19)::varchar, 	-- $19: CCARD_NAME_ON_CARD VARCHAR(8000) NOT NULL
		($20)::char, 	-- $20: LANGUAGE CHAR(8000) NOT NULL
		($21)::int, 	-- $21: STATUS INT NOT NULL
		($22)::varchar, 	-- $22: REASON_DENIED VARCHAR(8000) NOT NULL
		to_timestamp_ntz($23), 	-- $23: NEXT_PAY_DATE TIMESTAMP_LTZ NULL
		($24)::char, 	-- $24: TELLER CHAR(8000) NULL
		($25)::varchar, 	-- $25: ID_NO VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: SPOUSE_FIRST_NAME VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: SPOUSE_MID_NAME VARCHAR(8000) NULL
		($28)::varchar, 	-- $28: SPOUSE_LAST_NAME VARCHAR(8000) NULL
		($29)::varchar, 	-- $29: SPOUSE_SSN VARCHAR(8000) NULL
		($30)::varchar, 	-- $30: SPOUSE_HOME_PHONE VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: SPOUSE_CELL_PHONE VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: SPOUSE_WORK_NAME VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: SPOUSE_WORK_PHONE VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: SPOUSE_WORK_PHONE_EXT VARCHAR(8000) NULL
		($35)::char, 	-- $35: GENDER CHAR(8000) NULL
		($36)::boolean, 	-- $36: BOUNCED BOOLEAN NULL
		($37)::char, 	-- $37: HOW_REF_OBSOLETE CHAR(8000) NULL
		($38)::varchar, 	-- $38: EMAIL VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: REF1_FIRST_NAME VARCHAR(8000) NULL
		($40)::varchar, 	-- $40: REF1_LAST_NAME VARCHAR(8000) NULL
		($41)::varchar, 	-- $41: REF1_PHONE VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: REF2_FIRST_NAME VARCHAR(8000) NULL
		($43)::varchar, 	-- $43: REF2_LAST_NAME VARCHAR(8000) NULL
		($44)::varchar, 	-- $44: REF2_PHONE VARCHAR(8000) NULL
		($45)::number, 	-- $45: RI_BALANCE NUMBER(10,4) NULL
		to_timestamp_ntz($46), 	-- $46: RI_FOLLOWUP TIMESTAMP_LTZ NULL
		($47)::smallint, 	-- $47: OWN_RENT_OTHER SMALLINT NULL
		to_timestamp_ntz($48), 	-- $48: RESIDENCE_SINCE TIMESTAMP_LTZ NULL
		($49)::varchar, 	-- $49: LEGAL_NUMBER VARCHAR(8000) NULL
		($50)::char, 	-- $50: COURTESY_CALL_NUM CHAR(8000) NULL
		($51)::boolean, 	-- $51: MILITARY_MEMBER BOOLEAN NULL
		($52)::boolean, 	-- $52: MILITARY_ACTIVE_DUTY BOOLEAN NULL
		($53)::number, 	-- $53: MONTHLY_HOUSING NUMBER(10,4) NULL
		($54)::boolean, 	-- $54: INET_APPROVED BOOLEAN NULL
		($55)::boolean, 	-- $55: CC_BLOCK BOOLEAN NULL
		to_timestamp_ntz($56), 	-- $56: DOB TIMESTAMP_LTZ NULL
		($57)::char, 	-- $57: SOURCE_APP CHAR(8000) NOT NULL
		to_timestamp_ntz($58), 	-- $58: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($59)::char, 	-- $59: SOURCE_DB CHAR(8000) NOT NULL
		($60)::int, 	-- $60: WEB_REFERRAL_METHOD_KEY_OBSOLETE INT NOT NULL
		($61)::smallint, 	-- $61: CC_COUNT SMALLINT NOT NULL
		($62)::varchar, 	-- $62: IP_ADDRESS VARCHAR(8000) NOT NULL
		($63)::smallint, 	-- $63: MARITAL_STATUS SMALLINT NOT NULL
		($64)::boolean, 	-- $64: JOINT_LOAN BOOLEAN NULL
		($65)::smallint, 	-- $65: REFERRAL_METHOD_KEY smallint NOT NULL
		($66)::varchar, 	-- $66: VEH_MAKE VARCHAR(8000) NULL
		($67)::varchar, 	-- $67: VEH_MODEL VARCHAR(8000) NULL
		($68)::smallint, 	-- $68: VEH_YEAR smallint NULL
		($69)::varchar, 	-- $69: VEH_VIN VARCHAR(8000) NULL
		($70)::varchar, 	-- $70: VEH_LIEN_HOLDER_NAME VARCHAR(8000) NULL
		($71)::number, 	-- $71: VEH_LIEN_BALANCE NUMBER(10,4) NULL
		($72)::boolean, 	-- $72: VEH_LEASED BOOLEAN NULL
		($73)::boolean, 	-- $73: ARBITRATION_OPT_IN BOOLEAN NULL
		($74)::char, 	-- $74: FUNDING_TYPE CHAR(8000) NULL
		($75)::smallint, 	-- $75: CCARD_BRAND SMALLINT NOT NULL
		($76)::smallint, 	-- $76: CCARD_TYPE SMALLINT NOT NULL
		($77)::int, 	-- $77: TITLE INT NOT NULL
		($78)::smallint, 	-- $78: DEPENDENTS smallint NULL
		($79)::int, 	-- $79: INITIAL_WEB_VISIT_CHANNEL INT NOT NULL
		($80)::int, 	-- $80: INITIAL_WEB_VISIT_SUB_CHANNEL INT NOT NULL
		($81)::boolean, 	-- $81: CAN_SELECT_NON_PRIME_PRODUCT BOOLEAN NULL
		($82)::boolean, 	-- $82: EMAIL_STATEMENTS BOOLEAN NOT NULL
		($83)::int, 	-- $83: CARD_TOKEN INT NULL
		($84)::int, 	-- $84: CARD_NUMBER_TOKEN INT NULL
		($85)::int, 	-- $85: BIN INT NULL
		($86)::smallint, 	-- $86: CARD_NUMBER_LAST_FOUR smallint NULL
		($87)::int, 	-- $87: SUCCESSFUL_VISITOR_AUTHENTICATION_CODE_ATTEMPT_KEY INT NULL
		($88)::number, 	-- $88: PRIMARY_SCORE_MONTHLY_GROSS_INCOME NUMBER(10,4) NULL
		($89)::number, 	-- $89: PRIMARY_SCORE_MONTHLY_NET_INCOME NUMBER(10,4) NULL
		($90)::boolean, 	-- $90: CREATED_WITH_EXISTING_CUSTOMER BOOLEAN NOT NULL
		($91)::boolean, 	-- $91: CREATED_WITH_EXISTING_CUSTOMER_WITH_OPEN_WEB_LOAN BOOLEAN NULL
		($92)::boolean, 	-- $92: CREATED_WITH_EXISTING_CUSTOMER_WITH_OPEN_STORE_LOAN BOOLEAN NULL
		($93)::int, 	-- $93: REF1_INTERPERSONAL_RELATIONSHIP_TYPE_KEY INT NULL
		($94)::int, 	-- $94: REF2_INTERPERSONAL_RELATIONSHIP_TYPE_KEY INT NULL
		($95)::boolean 	-- $95: ENROLL_IN_AUTOPAY BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplication_HIST;
SELECT * FROM STG.WINCHK_LoanApplication_HIST;
[STATUS=tbd]
*/

-- // TABLE 601: LoanApplicationAddress
COPY INTO ARES.STG.SRC_LoanApplicationAddress_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_ADDRESS_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::int, 	-- $4: LOAN_APPLICATION_KEY INT NOT NULL
		($5)::smallint, 	-- $5: ADDRESS_TYPE_CODE SMALLINT NOT NULL
		($6)::varchar, 	-- $6: ADDRESS1 VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: COUNTY VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: COUNTRY CHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: CITY VARCHAR(8000) NOT NULL
		($10)::char, 	-- $10: STATE CHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: ZIPCODE VARCHAR(8000) NOT NULL
		($12)::date, 	-- $12: FROM_DATE DATE NULL
		($13)::date, 	-- $13: TO_DATE DATE NULL
		($14)::char, 	-- $14: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: ADDR_STREET VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: FLAT_NUM VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: BUILDING_NUM VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: BUILDING_NAME VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: ADDR_NUM VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: ADDR_SUITE VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: ADDRESS_CSZ VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: ADDRESS_LINE VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($28)::varchar, 	-- $28: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($29)::varchar 	-- $29: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationAddress/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationAddress_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationAddress_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationAddress_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationAddress_HIST;
[STATUS=tbd]
*/

-- // TABLE 602: LoanApplicationBusiness
COPY INTO ARES.STG.SRC_LoanApplicationBusiness_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_BUSINESS_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: TYPE_CODE SMALLINT NOT NULL
		($5)::date, 	-- $5: START_DATE DATE NOT NULL
		($6)::smallint, 	-- $6: LEGAL_TYPE_CODE SMALLINT NOT NULL
		($7)::varchar, 	-- $7: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: TAX_ID_NUM VARCHAR(8000) NOT NULL
		($9)::number, 	-- $9: VERIFIED_MONTHLY_NET_INCOME NUMBER(10,4) NOT NULL
		($10)::smallint, 	-- $10: NUMBER_OF_EMPLOYEES smallint NOT NULL
		($11)::number, 	-- $11: VERIFIED_BANK_DEPOSITS NUMBER(10,4) NOT NULL
		($12)::varchar, 	-- $12: LOAN_PURPOSE VARCHAR(8000) NOT NULL
		($13)::boolean, 	-- $13: USE_HOME_ADDRESS BOOLEAN NOT NULL
		($14)::varchar, 	-- $14: ADDR_NUM VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: ADDR_STREET VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: ADDR_SUITE VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: CITY VARCHAR(8000) NOT NULL
		($22)::char, 	-- $22: STATE CHAR(8000) NOT NULL
		($23)::varchar 	-- $23: ZIPCODE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationBusiness/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationBusiness_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationBusiness_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationBusiness_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationBusiness_HIST;
[STATUS=tbd]
*/

-- // TABLE 603: LoanApplicationCommunicationConsent
COPY INTO ARES.STG.SRC_LoanApplicationCommunicationConsent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_COMMUNICATION_CONSENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int 	-- $3: COMMUNICATION_CONSENT_CONFIG_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationCommunicationConsent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationCommunicationConsent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationCommunicationConsent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationCommunicationConsent_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationCommunicationConsent_HIST;
[STATUS=tbd]
*/

-- // TABLE 604: LoanApplicationDiscounts
COPY INTO ARES.STG.SRC_LoanApplicationDiscounts_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: DISCOUNT_MASTER_KEY INT NOT NULL
		($3)::number 	-- $3: AMOUNT_APPLIED NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationDiscounts/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationDiscounts_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationDiscounts_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationDiscounts_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationDiscounts_HIST;
[STATUS=tbd]
*/

-- // TABLE 605: LoanApplicationEmployer
COPY INTO ARES.STG.SRC_LoanApplicationEmployer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_EMPLOYER_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::varchar, 	-- $3: EMPLOYER_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DEPARTMENT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: COUNTY VARCHAR(8000) NOT NULL
		($6)::char, 	-- $6: COUNTRY CHAR(8000) NOT NULL
		($7)::int, 	-- $7: LOAN_APPLICATION_ADDRESS_KEY INT NULL
		($8)::boolean, 	-- $8: IS_DIRECT_DEPOSIT BOOLEAN NULL
		($9)::date, 	-- $9: EMP_SINCE DATE NULL
		($10)::char, 	-- $10: FULLPARTTIME CHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: PHONE_EXT VARCHAR(8000) NOT NULL
		($13)::char, 	-- $13: PAY_CYCLE CHAR(8000) NOT NULL
		($14)::smallint, 	-- $14: PAY_CYCLE_DAY SMALLINT NOT NULL
		($15)::smallint, 	-- $15: PAY_CYCLE_1ST SMALLINT NOT NULL
		($16)::smallint, 	-- $16: PAY_CYCLE_2ND SMALLINT NOT NULL
		($17)::date, 	-- $17: BIWEEK_BASE DATE NULL
		($18)::char, 	-- $18: PAY_CYCLE_MONTH_INT CHAR(8000) NOT NULL
		($19)::boolean, 	-- $19: PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH BOOLEAN NOT NULL
		($20)::int, 	-- $20: INCOME_TYPE_KEY INT NULL
		($21)::int, 	-- $21: INCOME_SOURCE_KEY INT NULL
		($22)::int, 	-- $22: INCOME_JOB_TYPE_KEY INT NULL
		($23)::boolean, 	-- $23: IS_PRIMARY_EMPLOYER BOOLEAN NOT NULL
		to_timestamp_ntz($24), 	-- $24: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($25)::char, 	-- $25: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($26), 	-- $26: JOB_TYPE_VERIFIED_DATE TIMESTAMP_LTZ NULL
		($27)::int 	-- $27: CUSTOMER_EMPLOYER_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationEmployer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationEmployer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationEmployer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationEmployer_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationEmployer_HIST;
[STATUS=tbd]
*/

-- // TABLE 606: LoanApplicationEmployerPayCheck
COPY INTO ARES.STG.SRC_LoanApplicationEmployerPayCheck_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_EMPLOYER_PAY_CHECK_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_EMPLOYER_KEY INT NOT NULL
		($3)::date, 	-- $3: CHECK_DATE DATE NOT NULL
		($4)::number, 	-- $4: GROSS_AMOUNT NUMBER(10,4) NULL
		($5)::number, 	-- $5: NET_AMOUNT NUMBER(10,4) NULL
		($6)::int, 	-- $6: INCOME_VERIFY_METHOD_KEY INT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: DELETED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationEmployerPayCheck/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationEmployerPayCheck_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationEmployerPayCheck_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationEmployerPayCheck_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationEmployerPayCheck_HIST;
[STATUS=tbd]
*/

-- // TABLE 607: LoanApplicationExpense
COPY INTO ARES.STG.SRC_LoanApplicationExpense_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_EXPENSE_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_KEY INT NOT NULL
		($4)::int, 	-- $4: VISITOR_KEY INT NOT NULL
		($5)::boolean 	-- $5: IS_CUSTOMER_VERIFIED BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationExpense/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationExpense_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationExpense_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationExpense_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationExpense_HIST;
[STATUS=tbd]
*/

-- // TABLE 608: LoanApplicationExpenseDetail
COPY INTO ARES.STG.SRC_LoanApplicationExpenseDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_EXPENSE_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_EXPENSE_KEY INT NOT NULL
		($3)::int, 	-- $3: EXPENSE_TYPE_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationExpenseDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationExpenseDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationExpenseDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationExpenseDetail_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationExpenseDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 609: LoanApplicationIdentification
COPY INTO ARES.STG.SRC_LoanApplicationIdentification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_IDENTIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: IDENTIFICATION_TYPE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: ID_NUMBER VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: OTHER_SOURCE VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: VERIFIED_OTHER VARCHAR(8000) NULL
		($7)::date, 	-- $7: EXPIRATION_DATE DATE NULL
		($8)::char, 	-- $8: ID_COUNTRY CHAR(8000) NULL
		($9)::char, 	-- $9: ID_STATE CHAR(8000) NULL
		($10)::int 	-- $10: IDENTIFICATION_TYPE_VERIFY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationIdentification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationIdentification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationIdentification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationIdentification_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationIdentification_HIST;
[STATUS=tbd]
*/

-- // TABLE 610: LoanApplicationIncome
COPY INTO ARES.STG.SRC_LoanApplicationIncome_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_INCOME_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::char, 	-- $5: AMOUNT_TYPE CHAR(8000) NOT NULL
		($6)::char, 	-- $6: AMOUNT_CYCLE CHAR(8000) NOT NULL
		($7)::number, 	-- $7: INCOME_AMOUNT NUMBER(10,4) NOT NULL
		($8)::int, 	-- $8: LOAN_APPLICATION_EMPLOYER_KEY INT NOT NULL
		($9)::int, 	-- $9: INCOME_VERIFY_METHOD_KEY INT NULL
		($10)::date 	-- $10: DATE_VERIFIED DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationIncome/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationIncome_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationIncome_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationIncome_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationIncome_HIST;
[STATUS=tbd]
*/

-- // TABLE 611: LoanApplicationOutOfWallet_LEGACY
COPY INTO ARES.STG.SRC_LoanApplicationOutOfWallet_LEGACY_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_OUT_OF_WALLET_KEY INT NOT NULL
		($2)::varchar, 	-- $2: STATUS VARCHAR(8000) NULL
		($3)::bigint, 	-- $3: RESPONSE_ID BIGINT NULL
		($4)::varchar, 	-- $4: VENDOR VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: LOAN_APPLICATION_KEY INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::variant, 	-- $7: REQUEST_DATA VARIANT NOT NULL
		($8)::variant 	-- $8: RESPONSE_DATA VARIANT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationOutOfWallet_LEGACY/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationOutOfWallet_LEGACY_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationOutOfWallet_LEGACY_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationOutOfWallet_LEGACY_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationOutOfWallet_LEGACY_HIST;
[STATUS=tbd]
*/

-- // TABLE 612: LoanApplicationPendingReason
COPY INTO ARES.STG.SRC_LoanApplicationPendingReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PENDING_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: PENDING_REASON_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: RESOLUTION_DATE TIMESTAMP_LTZ NULL
		($5)::char, 	-- $5: RESOLVED_BY CHAR(8000) NULL
		($6)::int, 	-- $6: PENDING_REASON_RESOLVE_REASON_KEY INT NULL
		($7)::boolean, 	-- $7: IS_SYSTEM_ADDED BOOLEAN NOT NULL
		($8)::char, 	-- $8: ADDED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($10)::int, 	-- $10: LOAN_APPLICATION_PRODUCT_KEY INT NOT NULL
		($11)::boolean, 	-- $11: RESCORE_REQUIRED BOOLEAN NULL
		($12)::int, 	-- $12: SCORE_SUMMARY_KEY INT NULL
		($13)::int 	-- $13: RESCORE_SCORE_SUMMARY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationPendingReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationPendingReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationPendingReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationPendingReason_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationPendingReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 613: LoanApplicationPendingReasonConfigurableQuestionResponse
COPY INTO ARES.STG.SRC_LoanApplicationPendingReasonConfigurableQuestionResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PENDING_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($3)::smallint, 	-- $3: DISPLAY_ORDER SMALLINT NOT NULL
		($4)::boolean, 	-- $4: IS_RESPONSE_REQUIRED BOOLEAN NOT NULL
		($5)::varchar 	-- $5: RESPONSE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationPendingReasonConfigurableQuestionResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationPendingReasonConfigurableQuestionResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationPendingReasonConfigurableQuestionResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationPendingReasonConfigurableQuestionResponse_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationPendingReasonConfigurableQuestionResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 614: LoanApplicationProduct
COPY INTO ARES.STG.SRC_LoanApplicationProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PRODUCT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::char, 	-- $3: LOAN_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: PRODUCT_TYPE CHAR(8000) NOT NULL
		($5)::int, 	-- $5: LOAN_PRODUCT_KEY INT NULL
		($6)::int, 	-- $6: LOAN_PRODUCT_CONFIG_KEY INT NULL
		($7)::int, 	-- $7: LOAN_PRODUCT_TILA_KEY INT NULL
		($8)::number, 	-- $8: APPROVED_AMT NUMBER(10,4) NULL
		($9)::number, 	-- $9: SELECTED_AMT NUMBER(10,4) NULL
		($10)::boolean, 	-- $10: SELECTED BOOLEAN NOT NULL
		($11)::smallint, 	-- $11: SELECTED_TERM SMALLINT NULL
		($12)::boolean, 	-- $12: APPROVED BOOLEAN NULL
		($13)::varchar, 	-- $13: DETAIL VARCHAR(8000) NULL
		($14)::datetime, 	-- $14: PRIMARY_SCORE_DATE datetime NULL
		($15)::smallint, 	-- $15: MODEL_USED smallint NULL
		($16)::decimal, 	-- $16: FINAL_SCORE DECIMAL(38,0) NULL
		($17)::int, 	-- $17: SCORE_SUMMARY_KEY INT NULL
		($18)::boolean, 	-- $18: ENROLL_IN_INSURANCE BOOLEAN NOT NULL
		($19)::number, 	-- $19: PRIMARY_SCORE_APPROVED_AMOUNT NUMBER(10,4) NULL
		($20)::smallint, 	-- $20: ANNUAL_RATE_BAND SMALLINT NULL
		($21)::smallint, 	-- $21: LOCATION smallint NOT NULL
		($22)::int 	-- $22: STATUS INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationProduct_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 615: LoanApplicationProductConfigurableQuestionResponse
COPY INTO ARES.STG.SRC_LoanApplicationProductConfigurableQuestionResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PRODUCT_KEY INT NOT NULL
		($2)::int, 	-- $2: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($3)::smallint, 	-- $3: DISPLAY_ORDER SMALLINT NOT NULL
		($4)::boolean, 	-- $4: IS_RESPONSE_REQUIRED BOOLEAN NOT NULL
		($5)::varchar 	-- $5: RESPONSE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationProductConfigurableQuestionResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationProductConfigurableQuestionResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationProductConfigurableQuestionResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationProductConfigurableQuestionResponse_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationProductConfigurableQuestionResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 616: LoanApplicationProductLoanDoc
COPY INTO ARES.STG.SRC_LoanApplicationProductLoanDoc_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PRODUCT_LOANDOC_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_APPLICATION_PRODUCT_KEY INT NOT NULL
		($5)::int, 	-- $5: LOAN_DOC_KEY INT NOT NULL
		($6)::int, 	-- $6: SIGNING_TELLER_ID_KEY INT NULL
		to_timestamp_ntz($7) 	-- $7: SIGNING_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationProductLoanDoc/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationProductLoanDoc_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationProductLoanDoc_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationProductLoanDoc_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationProductLoanDoc_HIST;
[STATUS=tbd]
*/

-- // TABLE 617: LoanApplicationProductScheduledPayment
COPY INTO ARES.STG.SRC_LoanApplicationProductScheduledPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_PRODUCT_SCHEDULED_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_PRODUCT_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PAYMENT_NUMBER SMALLINT NOT NULL
		($4)::date, 	-- $4: PAYMENT_DATE DATE NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMOUNT NUMBER(10,4) NOT NULL
		($6)::boolean, 	-- $6: IS_PAYMENT_AUTHORIZED BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: AUTHORIZED_DATE TIMESTAMP_LTZ NOT NULL
		($8)::char 	-- $8: AUTHORIZED_TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationProductScheduledPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationProductScheduledPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationProductScheduledPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationProductScheduledPayment_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationProductScheduledPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 618: LoanApplicationScoreHistory
COPY INTO ARES.STG.SRC_LoanApplicationScoreHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_SCORE_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_PRODUCT_KEY INT NULL
		($4)::datetime, 	-- $4: PRIMARY_SCORE_DATE datetime NOT NULL
		($5)::smallint, 	-- $5: MODEL_USED smallint NOT NULL
		($6)::decimal, 	-- $6: FINAL_SCORE DECIMAL(38,0) NOT NULL
		($7)::int, 	-- $7: SCORE_SUMMARY_KEY INT NOT NULL
		($8)::number, 	-- $8: PRIMARY_SCORE_APPROVED_AMOUNT NUMBER(10,4) NOT NULL
		($9)::int 	-- $9: SCORE_TYPE INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationScoreHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationScoreHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationScoreHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationScoreHistory_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationScoreHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 619: LoanApplicationSourceLoan
COPY INTO ARES.STG.SRC_LoanApplicationSourceLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_SOURCE_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int 	-- $3: SOURCE_LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationSourceLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationSourceLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationSourceLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationSourceLoan_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationSourceLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 620: LoanApplicationStatusChange
COPY INTO ARES.STG.SRC_LoanApplicationStatusChange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_STATUS_CHANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::int, 	-- $5: OLD_STATUS INT NOT NULL
		($6)::int 	-- $6: NEW_STATUS INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationStatusChange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationStatusChange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationStatusChange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationStatusChange_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationStatusChange_HIST;
[STATUS=tbd]
*/

-- // TABLE 621: LoanApplicationThirdPartyIncome
COPY INTO ARES.STG.SRC_LoanApplicationThirdPartyIncome_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_THIRD_PARTY_INCOME_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_EMPLOYER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: EMPLOYER_NAME VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: EMPLOYEE_NAME VARCHAR(8000) NULL
		($7)::int, 	-- $7: THIRD_PARTY_EMPLOYMENT_STATUS_KEY INT NULL
		($8)::smallint, 	-- $8: PAY_CYCLE_KEY smallint NULL
		($9)::number, 	-- $9: ANNUALIZED_INCOME_CALCULATION NUMBER(10,4) NULL
		($10)::date 	-- $10: DATE_VERIFIED DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationThirdPartyIncome/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationThirdPartyIncome_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationThirdPartyIncome_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationThirdPartyIncome_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationThirdPartyIncome_HIST;
[STATUS=tbd]
*/

-- // TABLE 622: LoanApplicationVehicleInformation
COPY INTO ARES.STG.SRC_LoanApplicationVehicleInformation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_VEHICLE_INFORMATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NULL
		($4)::date, 	-- $4: DATE_ENTERED DATE NOT NULL
		($5)::number, 	-- $5: VEH_WHOLESALE NUMBER(19,4) NOT NULL
		($6)::int, 	-- $6: VEH_MILEAGE INT NOT NULL
		($7)::char, 	-- $7: VEH_CONDITION CHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: VEH_PLATE VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: VEH_STICKER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($10), 	-- $10: VEH_REG_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($11), 	-- $11: VEH_REG_EXPIRE TIMESTAMP_LTZ NULL
		($12)::char, 	-- $12: VEH_REG_STATE CHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: VEH_TITLE_NUM VARCHAR(8000) NOT NULL
		($14)::char, 	-- $14: VEH_ODO_CODE CHAR(8000) NOT NULL
		($15)::char, 	-- $15: LEGAL_STATUS CHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: STATE_CUST_NUM VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: INS_NAME VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: INS_PHONE VARCHAR(8000) NOT NULL
		($19)::boolean, 	-- $19: INS_FULL_COVER BOOLEAN NOT NULL
		($20)::varchar, 	-- $20: INS_POLICY_NUM VARCHAR(8000) NOT NULL
		($21)::boolean, 	-- $21: PAY_VERIFIED BOOLEAN NOT NULL
		($22)::varchar, 	-- $22: AND_OR_NAME VARCHAR(8000) NULL
		($23)::number, 	-- $23: LIEN_BALANCE NUMBER(10,4) NULL
		($24)::varchar, 	-- $24: LIEN_ACCT_NUM VARCHAR(8000) NULL
		($25)::number, 	-- $25: VEH_RETAIL NUMBER(10,4) NOT NULL
		($26)::boolean, 	-- $26: IS_CLEAR_TITLE BOOLEAN NOT NULL
		($27)::int, 	-- $27: VEHICLE_KEY INT NOT NULL
		($28)::char, 	-- $28: GENDER CHAR(8000) NULL
		($29)::smallint, 	-- $29: HEIGHT_FEET SMALLINT NULL
		($30)::smallint, 	-- $30: HEIGHT_INCHES SMALLINT NULL
		($31)::smallint, 	-- $31: RACE_KEY SMALLINT NULL
		($32)::smallint, 	-- $32: EYE_COLOR_KEY SMALLINT NULL
		($33)::smallint, 	-- $33: HAIR_COLOR_KEY SMALLINT NULL
		($34)::int, 	-- $34: LIEN_HOLDER_KEY INT NULL
		($35)::varchar, 	-- $35: AND_OR_FIRSTNAME VARCHAR(8000) NULL
		($36)::varchar, 	-- $36: AND_OR_MIDNAME VARCHAR(8000) NULL
		($37)::varchar, 	-- $37: AND_OR_LASTNAME VARCHAR(8000) NULL
		($38)::char, 	-- $38: VEHICLE_TYPE_KEY CHAR(8000) NULL
		($39)::boolean, 	-- $39: ADDRESS_VERIFIED BOOLEAN NULL
		($40)::boolean 	-- $40: PHONE_VERIFIED BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanApplicationVehicleInformation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanApplicationVehicleInformation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanApplicationVehicleInformation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanApplicationVehicleInformation_HIST;
SELECT * FROM STG.WINCHK_LoanApplicationVehicleInformation_HIST;
[STATUS=tbd]
*/

-- // TABLE 623: LoanAuthorizedPaymentMethod
COPY INTO ARES.STG.SRC_LoanAuthorizedPaymentMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_AUTHORIZED_PAYMENT_METHOD_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: BANK_ACCOUNT_KEY INT NULL
		($4)::int, 	-- $4: CARD_NUMBER_TOKEN INT NULL
		($5)::int, 	-- $5: DOCUWARE_DOCUMENT_KEY INT NULL
		($6)::int, 	-- $6: ACKNOWLEDGEMENT_DOCUWARE_DOCUMENT_KEY INT NULL
		to_timestamp_ntz($7), 	-- $7: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8), 	-- $8: END_DATE TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::char, 	-- $10: ENDED_BY CHAR(8000) NULL
		($11)::boolean, 	-- $11: IS_SCHEDULE_PRIMARY_METHOD BOOLEAN NOT NULL
		($12)::smallint, 	-- $12: PAYMENT_METHOD_DEAUTHORIZATION_REASON_KEY SMALLINT NULL
		($13)::int, 	-- $13: DEAUTHORIZATION_DOCUWARE_DOCUMENT_KEY INT NULL
		($14)::bigint, 	-- $14: DEAUTHORIZATION_MESSAGE_KEY BIGINT NULL
		($15)::smallint, 	-- $15: PAYMENT_METHOD_PROVISIONAL_APPROVAL_TYPE_KEY SMALLINT NULL
		($16)::int, 	-- $16: PROMISE_TO_PAY_KEY INT NULL
		($17)::boolean 	-- $17: HAS_PROVISIONAL_APPROVAL BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanAuthorizedPaymentMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanAuthorizedPaymentMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanAuthorizedPaymentMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanAuthorizedPaymentMethod_HIST;
SELECT * FROM STG.WINCHK_LoanAuthorizedPaymentMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 624: LoanAuthorizedPaymentMethodPending
COPY INTO ARES.STG.SRC_LoanAuthorizedPaymentMethodPending_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_AUTHORIZED_PAYMENT_METHOD_PENDING_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CARD_NUMBER_TOKEN INT NULL
		($4)::int, 	-- $4: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_SCHEDULE_PRIMARY_METHOD BOOLEAN NOT NULL
		($8)::int, 	-- $8: BANK_ACCOUNT_KEY INT NULL
		($9)::int, 	-- $9: ACKNOWLEDGEMENT_DOCUWARE_DOCUMENT_KEY INT NULL
		($10)::int 	-- $10: PROMISE_TO_PAY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanAuthorizedPaymentMethodPending/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanAuthorizedPaymentMethodPending_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanAuthorizedPaymentMethodPending_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanAuthorizedPaymentMethodPending_HIST;
SELECT * FROM STG.WINCHK_LoanAuthorizedPaymentMethodPending_HIST;
[STATUS=tbd]
*/

-- // TABLE 625: LoanBankCardPending_Hold
COPY INTO ARES.STG.SRC_LoanBankCardPending_Hold_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_BANK_CARD_PENDING_KEY INT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CARD_NUMBER_TOKEN INT NOT NULL
		($4)::int, 	-- $4: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::boolean 	-- $7: IS_SCHEDULE_PRIMARY_CARD BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanBankCardPending_Hold/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanBankCardPending_Hold_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanBankCardPending_Hold_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanBankCardPending_Hold_HIST;
SELECT * FROM STG.WINCHK_LoanBankCardPending_Hold_HIST;
[STATUS=tbd]
*/

-- // TABLE 626: LoanBankCardPending_Hold_Prev
COPY INTO ARES.STG.SRC_LoanBankCardPending_Hold_Prev_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_BANK_CARD_PENDING_KEY INT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CARD_NUMBER_TOKEN INT NOT NULL
		($4)::int, 	-- $4: DOCUWARE_DOCUMENT_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::boolean 	-- $7: IS_SCHEDULE_PRIMARY_CARD BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanBankCardPending_Hold_Prev/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanBankCardPending_Hold_Prev_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanBankCardPending_Hold_Prev_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanBankCardPending_Hold_Prev_HIST;
SELECT * FROM STG.WINCHK_LoanBankCardPending_Hold_Prev_HIST;
[STATUS=tbd]
*/

-- // TABLE 627: LoanCCallChange
COPY INTO ARES.STG.SRC_LoanCCallChange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_CCALL_CHANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: COURTESY_CALL BOOLEAN NULL
		($7)::boolean 	-- $7: EMAIL_STATEMENTS BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanCCallChange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanCCallChange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanCCallChange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanCCallChange_HIST;
SELECT * FROM STG.WINCHK_LoanCCallChange_HIST;
[STATUS=tbd]
*/

-- // TABLE 628: LoanChkAcctChange
COPY INTO ARES.STG.SRC_LoanChkAcctChange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CHK_ACCT_CHANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::int, 	-- $7: ISSUER_KEY INT NOT NULL
		($8)::boolean, 	-- $8: DIRECT_DEPOSIT BOOLEAN NOT NULL
		($9)::int, 	-- $9: PRV_CREDIT_CARD_KEY INT NULL
		($10)::int, 	-- $10: NEW_CREDIT_CARD_KEY INT NULL
		($11)::boolean, 	-- $11: PRV_DECLINED_AUTO_PAY BOOLEAN NULL
		($12)::boolean, 	-- $12: NEW_DECLINED_AUTO_PAY BOOLEAN NULL
		($13)::int, 	-- $13: PRV_ISSUER_KEY INT NULL
		($14)::boolean, 	-- $14: PRV_DIRECT_DEPOSIT BOOLEAN NOT NULL
		($15)::char, 	-- $15: ISSUER_CHK_ACCT_CHANGE_REASON CHAR(8000) NOT NULL
		($16)::char, 	-- $16: CCARD_CHK_ACCT_CHANGE_REASON CHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: NOTE VARCHAR(8000) NOT NULL
		($18)::boolean, 	-- $18: PRV_REVOKE_SCHED_ACH BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: REVOKE_SCHED_ACH BOOLEAN NOT NULL
		($20)::char, 	-- $20: REVOKE_SCHED_ACH_REASON CHAR(8000) NOT NULL
		($21)::boolean, 	-- $21: PRV_REVOKE_SCHED_DEBIT_CARD BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: REVOKE_SCHED_DEBIT_CARD BOOLEAN NOT NULL
		($23)::char 	-- $23: REVOKE_SCHED_DEBIT_CARD_REASON CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanChkAcctChange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanChkAcctChange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanChkAcctChange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanChkAcctChange_HIST;
SELECT * FROM STG.WINCHK_LoanChkAcctChange_HIST;
[STATUS=tbd]
*/

-- // TABLE 629: LoanConfigApplyPaymentOrder
COPY INTO ARES.STG.SRC_LoanConfigApplyPaymentOrder_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_CONFIG_APPLY_PAYMENT_ORDER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: APPLY_PAYMENT_ORDER VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanConfigApplyPaymentOrder/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanConfigApplyPaymentOrder_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanConfigApplyPaymentOrder_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanConfigApplyPaymentOrder_HIST;
SELECT * FROM STG.WINCHK_LoanConfigApplyPaymentOrder_HIST;
[STATUS=tbd]
*/

-- // TABLE 630: LoanConversionEligible
COPY INTO ARES.STG.SRC_LoanConversionEligible_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_CONVERSION_ELIGIBLE_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanConversionEligible/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanConversionEligible_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanConversionEligible_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanConversionEligible_HIST;
SELECT * FROM STG.WINCHK_LoanConversionEligible_HIST;
[STATUS=tbd]
*/

-- // TABLE 631: LoanCoPledger
COPY INTO ARES.STG.SRC_LoanCoPledger_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_CO_PLEDGER_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::char, 	-- $4: GENDER CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: HEIGHT_FEET SMALLINT NOT NULL
		($6)::smallint, 	-- $6: HEIGHT_INCHES SMALLINT NOT NULL
		($7)::smallint, 	-- $7: RACE_KEY SMALLINT NOT NULL
		($8)::smallint, 	-- $8: EYE_COLOR_KEY SMALLINT NOT NULL
		($9)::smallint, 	-- $9: HAIR_COLOR_KEY SMALLINT NOT NULL
		($10)::varchar, 	-- $10: HOME_PHONE VARCHAR(8000) NOT NULL
		($11)::date, 	-- $11: DATE_OF_BIRTH DATE NOT NULL
		($12)::varchar, 	-- $12: PHOTO_ID VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: ISSUING_AGENCY VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: STREET_NUMBER VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: PRE_DIRECTION VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: STREET_NAME VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: STREET_SUFFIX VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: POST_DIRECTION VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: SUITE VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: SUITE_NUMBER VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: CITY VARCHAR(8000) NOT NULL
		($22)::char, 	-- $22: STATE CHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: ZIP_CODE VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: COUNTY VARCHAR(8000) NOT NULL
		($25)::char, 	-- $25: COUNTRY CHAR(8000) NOT NULL
		($26)::char, 	-- $26: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($27)::varchar, 	-- $27: FLAT_NUMBER VARCHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: BUILDING_NUMBER VARCHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: BUILDING_NAME VARCHAR(8000) NOT NULL
		($30)::varchar, 	-- $30: SSN VARCHAR(8000) NULL
		($31)::smallint 	-- $31: PHOTO_ID_TYPE_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanCoPledger/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanCoPledger_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanCoPledger_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanCoPledger_HIST;
SELECT * FROM STG.WINCHK_LoanCoPledger_HIST;
[STATUS=tbd]
*/

-- // TABLE 632: LoanCreditLimit
COPY INTO ARES.STG.SRC_LoanCreditLimit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_CREDIT_LIMIT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::number, 	-- $5: OLD_LIMIT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: NEW_LIMIT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($7) 	-- $7: APPROVAL_LAST_SHOWN TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanCreditLimit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanCreditLimit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanCreditLimit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanCreditLimit_HIST;
SELECT * FROM STG.WINCHK_LoanCreditLimit_HIST;
[STATUS=tbd]
*/

-- // TABLE 633: LoanDepositOrderHistory
COPY INTO ARES.STG.SRC_LoanDepositOrderHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DEPOSIT_ORDER_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_KEY INT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::smallint, 	-- $6: OLD_DEPOSIT_ORDER SMALLINT NOT NULL
		($7)::smallint, 	-- $7: NEW_DEPOSIT_ORDER SMALLINT NOT NULL
		($8)::varchar, 	-- $8: DESCRIPTION VARCHAR(8000) NULL
		($9)::int 	-- $9: RESET_REASON_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDepositOrderHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDepositOrderHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDepositOrderHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDepositOrderHistory_HIST;
SELECT * FROM STG.WINCHK_LoanDepositOrderHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 634: LoanDepositOrderResetReason
COPY INTO ARES.STG.SRC_LoanDepositOrderResetReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DEPOSIT_ORDER_RESET_REASON_KEY INT NOT NULL
		($2)::smallint, 	-- $2: REASON smallint NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDepositOrderResetReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDepositOrderResetReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDepositOrderResetReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDepositOrderResetReason_HIST;
SELECT * FROM STG.WINCHK_LoanDepositOrderResetReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 635: LoanDepositStatusHistory
COPY INTO ARES.STG.SRC_LoanDepositStatusHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DEPOSIT_STATUS_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::smallint, 	-- $6: OLD_DEPOSIT_STATUS SMALLINT NOT NULL
		($7)::smallint 	-- $7: NEW_DEPOSIT_STATUS SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDepositStatusHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDepositStatusHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDepositStatusHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDepositStatusHistory_HIST;
SELECT * FROM STG.WINCHK_LoanDepositStatusHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 636: LoanDoc
COPY INTO ARES.STG.SRC_LoanDoc_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DOC_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOAN_DOC_TYPE_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: LOAN_DOC_FILENAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: LOAN_DOC_EXT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: LOAN_DOC_REVISION VARCHAR(8000) NOT NULL
		($6)::image, 	-- $6: LOAN_DOC_FILE image NULL
		($7)::char, 	-- $7: LOAN_DOC_STATE CHAR(8000) NOT NULL
		($8)::char, 	-- $8: LOAN_DOC_LANGUAGE CHAR(8000) NOT NULL
		($9)::boolean, 	-- $9: LOAN_DOC_ENABLED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: PRINT_ONLY_MILITARY BOOLEAN NOT NULL
		($11)::char, 	-- $11: TELLER CHAR(8000) NOT NULL
		($12)::datetime, 	-- $12: DATE_ENTERED datetime NOT NULL
		($13)::smallint, 	-- $13: PAGE_COUNT SMALLINT NULL
		($14)::boolean, 	-- $14: ENFORCE_PAGE_COUNT BOOLEAN NOT NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDoc/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDoc_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDoc_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDoc_HIST;
SELECT * FROM STG.WINCHK_LoanDoc_HIST;
[STATUS=tbd]
*/

-- // TABLE 637: LoanDocAmort
COPY INTO ARES.STG.SRC_LoanDocAmort_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DOC_AMORT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PAYMENT_NUM SMALLINT NOT NULL
		($4)::date, 	-- $4: PAYMENT_DATE DATE NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PRINC_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: INTEREST_AMT NUMBER(10,4) NOT NULL
		($8)::number 	-- $8: BALANCE NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDocAmort/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDocAmort_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDocAmort_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDocAmort_HIST;
SELECT * FROM STG.WINCHK_LoanDocAmort_HIST;
[STATUS=tbd]
*/

-- // TABLE 638: LoanDocHistory
COPY INTO ARES.STG.SRC_LoanDocHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DOC_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOAN_DOC_TYPE_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: LOAN_DOC_FILENAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: LOAN_DOC_EXT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: LOAN_DOC_REVISION VARCHAR(8000) NOT NULL
		($6)::image, 	-- $6: LOAN_DOC_FILE image NULL
		($7)::char, 	-- $7: LOAN_DOC_STATE CHAR(8000) NOT NULL
		($8)::char, 	-- $8: LOAN_DOC_LANGUAGE CHAR(8000) NOT NULL
		($9)::boolean, 	-- $9: LOAN_DOC_ENABLED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: PRINT_ONLY_MILITARY BOOLEAN NOT NULL
		($11)::char, 	-- $11: TELLER CHAR(8000) NOT NULL
		($12)::datetime, 	-- $12: DATE_ENTERED datetime NOT NULL
		($13)::smallint, 	-- $13: PAGE_COUNT SMALLINT NULL
		($14)::boolean, 	-- $14: ENFORCE_PAGE_COUNT BOOLEAN NOT NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDocHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDocHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDocHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDocHistory_HIST;
SELECT * FROM STG.WINCHK_LoanDocHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 639: LoanDocPrinted
COPY INTO ARES.STG.SRC_LoanDocPrinted_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DOC_PRINTED_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NULL
		($3)::int, 	-- $3: LOAN_DOC_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::int 	-- $8: TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDocPrinted/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDocPrinted_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDocPrinted_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDocPrinted_HIST;
SELECT * FROM STG.WINCHK_LoanDocPrinted_HIST;
[STATUS=tbd]
*/

-- // TABLE 640: LoanDocType
COPY INTO ARES.STG.SRC_LoanDocType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOAN_DOC_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: LOAN_DOC_TYPE_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LOAN_DOC_TYPE_ID VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: LOAN_DOC_TYPE_NICKNAME VARCHAR(8000) NULL
		($5)::varchar 	-- $5: LOAN_DOC_TYPE_DISPLAY_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDocType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDocType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDocType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDocType_HIST;
SELECT * FROM STG.WINCHK_LoanDocType_HIST;
[STATUS=tbd]
*/

-- // TABLE 641: LoanDocUpload
COPY INTO ARES.STG.SRC_LoanDocUpload_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DOC_UPLOAD_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: UPLOAD_DATE TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NOT NULL
		($6)::varchar, 	-- $6: LOAN_DOC_FILE_NAME VARCHAR(8000) NOT NULL
		($7)::varchar 	-- $7: ZIP_FILE_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDocUpload/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDocUpload_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDocUpload_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDocUpload_HIST;
SELECT * FROM STG.WINCHK_LoanDocUpload_HIST;
[STATUS=tbd]
*/

-- // TABLE 642: LoanDocUsed
COPY INTO ARES.STG.SRC_LoanDocUsed_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_DOC_USED_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: PRODUCT_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: LOAN_TYPE CHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: USE_VEH_STATE BOOLEAN NOT NULL
		($6)::int, 	-- $6: LOAN_DOC_KEY INT NULL
		($7)::smallint, 	-- $7: LOAN_DOC_TYPE_KEY SMALLINT NULL
		($8)::smallint, 	-- $8: PRINT_COPIES SMALLINT NOT NULL
		($9)::boolean, 	-- $9: PRINT_ON_NEW BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: PRINT_ON_ROLL_NEW BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: PRINT_ON_PAYOFF BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: PRINT_ON_CLOSE BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: PRINT_ON_WA_PPLAN BOOLEAN NOT NULL
		($14)::smallint, 	-- $14: PRINT_ORDER SMALLINT NOT NULL
		($15)::boolean, 	-- $15: PRINT_ON_ROLL_PAID BOOLEAN NOT NULL
		($16)::smallint, 	-- $16: PRINT_FOR_LIEN SMALLINT NOT NULL
		($17)::char, 	-- $17: PRINT_FOR_DEPOSIT_METHOD CHAR(8000) NOT NULL
		($18)::smallint, 	-- $18: DAYS_BETWEEN_PRINTING_PER_CUSTOMER smallint NOT NULL
		($19)::boolean, 	-- $19: SCAN_REQUIRED BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: PRINT_ON_DENIAL_SRC BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: PRINT_ON_DENIAL_STATE BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: CLEAR_TITLE_PRESENT BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: CLEAR_TITLE_MISSING BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: PRINT_FOR_EMAIL_STATEMENTS BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: PRINT_FOR_NOT_EMAIL_STATEMENTS BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: PRINT_FOR_GIFT_CARDS BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: PRINT_FOR_NOT_GIFT_CARDS BOOLEAN NOT NULL
		($28)::number, 	-- $28: PRINT_ONLY_LOAN_AMT_MIN NUMBER(10,4) NOT NULL
		($29)::smallint, 	-- $29: NO_SIGNATURE_ACTION smallint NOT NULL
		($30)::boolean, 	-- $30: ESIGN_ALLOW_SEND_TO_PRINTER BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: PRINT_FOR_TITLE_CO_PLEDGER BOOLEAN NOT NULL
		($32)::boolean, 	-- $32: PRINT_FOR_TITLE_DUAL_OWNER BOOLEAN NOT NULL
		($33)::int, 	-- $33: LOAN_PRODUCT_KEY INT NULL
		($34)::boolean, 	-- $34: HAS_BARCODE BOOLEAN NOT NULL
		($35)::boolean, 	-- $35: DO_NOT_PRINT_WHEN_ESIGN BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: ONLY_PRINT_FOR_FIRST_TIME_CUSTOMER BOOLEAN NOT NULL
		($37)::boolean, 	-- $37: PRINT_ON_INSURANCE_ENROLLMENT BOOLEAN NOT NULL
		($38)::boolean, 	-- $38: PRINT_ON_FUNDING BOOLEAN NOT NULL
		($39)::boolean 	-- $39: INCLUDE_IN_MISSING_DOCS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDocUsed/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDocUsed_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDocUsed_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDocUsed_HIST;
SELECT * FROM STG.WINCHK_LoanDocUsed_HIST;
[STATUS=tbd]
*/

-- // TABLE 643: LoanDueDateChange
COPY INTO ARES.STG.SRC_LoanDueDateChange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: DUEDATE_CHANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: DATE_ENTERED datetime NOT NULL
		($7)::date, 	-- $7: ADJUSTED_DUE_DATE DATE NOT NULL
		($8)::int, 	-- $8: TRANS_DETAIL_KEY INT NULL
		($9)::varchar, 	-- $9: CHANGE_NOTE VARCHAR(8000) NULL
		($10)::int, 	-- $10: OPEN_END_LOAN_STMT_KEY INT NULL
		($11)::boolean, 	-- $11: IS_DUEDATE_CHANGED BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: DUE_DATE_CHANGE_WAS_AUTHORIZED BOOLEAN NOT NULL
		($13)::date 	-- $13: PREVIOUS_ADJUSTED_DUE_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanDueDateChange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanDueDateChange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanDueDateChange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanDueDateChange_HIST;
SELECT * FROM STG.WINCHK_LoanDueDateChange_HIST;
[STATUS=tbd]
*/

-- // TABLE 644: LoanExpense
COPY INTO ARES.STG.SRC_LoanExpense_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_EXPENSE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int 	-- $3: CUSTOMER_EXPENSE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanExpense/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanExpense_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanExpense_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanExpense_HIST;
SELECT * FROM STG.WINCHK_LoanExpense_HIST;
[STATUS=tbd]
*/

-- // TABLE 645: LoanFunding
COPY INTO ARES.STG.SRC_LoanFunding_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_FUNDING_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: APPROVED_LOAN_PAYMENT_KEY INT NOT NULL
		($4)::number, 	-- $4: FUNDING_AMT NUMBER(10,4) NOT NULL
		($5)::smallint, 	-- $5: REQUESTED_FUNDING_METHOD_KEY smallint NOT NULL
		($6)::smallint, 	-- $6: ACTUAL_FUNDING_METHOD_KEY smallint NOT NULL
		($7)::smallint, 	-- $7: FUNDING_STATUS_KEY smallint NULL
		($8)::int, 	-- $8: FUNDING_LOAN_PAYMENT_KEY INT NULL
		($9)::int, 	-- $9: VOID_LOAN_PAYMENT_KEY INT NULL
		to_timestamp_ntz($10), 	-- $10: REQUESTED_FUNDING_METHOD_CHANGE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($11), 	-- $11: HOLD_UNTIL TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12), 	-- $12: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($13)::boolean, 	-- $13: IS_SPLIT_FUNDING BOOLEAN NOT NULL
		($14)::int 	-- $14: FUNDING_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFunding/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFunding_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFunding_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFunding_HIST;
SELECT * FROM STG.WINCHK_LoanFunding_HIST;
[STATUS=tbd]
*/

-- // TABLE 646: LoanFundingAchHistoryXRef
COPY INTO ARES.STG.SRC_LoanFundingAchHistoryXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_HISTORY_KEY INT NOT NULL
		($2)::int 	-- $2: LOAN_FUNDING_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingAchHistoryXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingAchHistoryXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingAchHistoryXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingAchHistoryXRef_HIST;
SELECT * FROM STG.WINCHK_LoanFundingAchHistoryXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 647: LoanFundingAchProcessingQueueXRef
COPY INTO ARES.STG.SRC_LoanFundingAchProcessingQueueXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_PROCESSING_QUEUE_KEY INT NOT NULL
		($2)::int 	-- $2: LOAN_FUNDING_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingAchProcessingQueueXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingAchProcessingQueueXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingAchProcessingQueueXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingAchProcessingQueueXRef_HIST;
SELECT * FROM STG.WINCHK_LoanFundingAchProcessingQueueXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 648: LoanFundingHistory
COPY INTO ARES.STG.SRC_LoanFundingHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_FUNDING_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_FUNDING_KEY INT NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::datetime 	-- $4: ENTERED_DATE datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingHistory_HIST;
SELECT * FROM STG.WINCHK_LoanFundingHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 649: LoanFundingHistoryDetail
COPY INTO ARES.STG.SRC_LoanFundingHistoryDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_FUNDING_HISTORY_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_FUNDING_HISTORY_KEY INT NOT NULL
		($3)::varchar, 	-- $3: COLUMN_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: OLD_VALUE VARCHAR(8000) NULL
		($5)::varchar 	-- $5: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingHistoryDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingHistoryDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingHistoryDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingHistoryDetail_HIST;
SELECT * FROM STG.WINCHK_LoanFundingHistoryDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 650: LoanFundingMethodHistory
COPY INTO ARES.STG.SRC_LoanFundingMethodHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_FUNDING_METHOD_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: FUNDING_METHOD SMALLINT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::nchar 	-- $5: TELLER nchar NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingMethodHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingMethodHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingMethodHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingMethodHistory_HIST;
SELECT * FROM STG.WINCHK_LoanFundingMethodHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 651: LoanFundingStatus
COPY INTO ARES.STG.SRC_LoanFundingStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: FUNDING_STATUS_KEY smallint NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingStatus_HIST;
SELECT * FROM STG.WINCHK_LoanFundingStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 652: LoanFundingType
COPY INTO ARES.STG.SRC_LoanFundingType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: FUNDING_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanFundingType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanFundingType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanFundingType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanFundingType_HIST;
SELECT * FROM STG.WINCHK_LoanFundingType_HIST;
[STATUS=tbd]
*/

-- // TABLE 653: LoanImport
COPY INTO ARES.STG.SRC_LoanImport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_IMPORT_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: COMPANY_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: CUSTOMER_IMPORT_FILE VARCHAR(8000) NOT NULL
		($6)::varchar 	-- $6: LOAN_IMPORT_FILE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanImport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanImport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanImport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanImport_HIST;
SELECT * FROM STG.WINCHK_LoanImport_HIST;
[STATUS=tbd]
*/

-- // TABLE 654: LoanIncome
COPY INTO ARES.STG.SRC_LoanIncome_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_INCOME_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int 	-- $3: CUSTOMER_INCOME_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanIncome/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanIncome_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanIncome_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanIncome_HIST;
SELECT * FROM STG.WINCHK_LoanIncome_HIST;
[STATUS=tbd]
*/

-- // TABLE 655: LoanNote
COPY INTO ARES.STG.SRC_LoanNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::varchar, 	-- $4: NOTE VARCHAR(8000) NOT NULL
		($5)::text, 	-- $5: RTF_NOTE text NOT NULL
		($6)::boolean, 	-- $6: IS_FLASH BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: DELETED_BY CHAR(8000) NULL
		($10)::int, 	-- $10: NEW_LOAN_NOTE_KEY INT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($12)::char, 	-- $12: ENTERED_BY CHAR(8000) NOT NULL
		($13)::date 	-- $13: FLASH_EXPIRATION_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanNote_HIST;
SELECT * FROM STG.WINCHK_LoanNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 656: LoanNSFFee
COPY INTO ARES.STG.SRC_LoanNSFFee_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::boolean, 	-- $2: CAN_CHARGE_NSF_FEE BOOLEAN NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::datetime 	-- $4: LAST_CHANGE_DATE datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanNSFFee/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanNSFFee_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanNSFFee_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanNSFFee_HIST;
SELECT * FROM STG.WINCHK_LoanNSFFee_HIST;
[STATUS=tbd]
*/

-- // TABLE 657: LoanOriginationCode
COPY INTO ARES.STG.SRC_LoanOriginationCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: LoanOriginationCodeKey CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanOriginationCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanOriginationCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanOriginationCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanOriginationCode_HIST;
SELECT * FROM STG.WINCHK_LoanOriginationCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 658: LoanOverride
COPY INTO ARES.STG.SRC_LoanOverride_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_OVERRIDE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_NOTE_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: LOAN_OVERRIDE_TYPE CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOAN_OVERRIDE_REASON SMALLINT NOT NULL
		($6)::numeric, 	-- $6: ORIG_VALUE NUMERIC NOT NULL
		($7)::numeric 	-- $7: OVERRIDE_VALUE NUMERIC NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanOverride/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanOverride_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanOverride_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanOverride_HIST;
SELECT * FROM STG.WINCHK_LoanOverride_HIST;
[STATUS=tbd]
*/

-- // TABLE 659: LoanOverrideReason
COPY INTO ARES.STG.SRC_LoanOverrideReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOAN_OVERRIDE_REASON_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanOverrideReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanOverrideReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanOverrideReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanOverrideReason_HIST;
SELECT * FROM STG.WINCHK_LoanOverrideReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 660: LoanOverrideType
COPY INTO ARES.STG.SRC_LoanOverrideType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: LOAN_OVERRIDE_TYPE_KEY CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::smallint 	-- $4: NUMERIC_VALUE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanOverrideType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanOverrideType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanOverrideType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanOverrideType_HIST;
SELECT * FROM STG.WINCHK_LoanOverrideType_HIST;
[STATUS=tbd]
*/

-- // TABLE 661: LoanPayment
COPY INTO ARES.STG.SRC_LoanPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::varchar, 	-- $6: NOTE VARCHAR(8000) NOT NULL
		($7)::number, 	-- $7: PAID_AMT NUMBER(10,4) NOT NULL
		($8)::boolean, 	-- $8: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($9), 	-- $9: REVERSED_DATE TIMESTAMP_LTZ NULL
		($10)::smallint, 	-- $10: PAYMENT_METHOD smallint NOT NULL
		($11)::int, 	-- $11: TRANS_DETAIL_KEY INT NOT NULL
		($12)::smallint, 	-- $12: TRANS_CODE SMALLINT NOT NULL
		($13)::char, 	-- $13: PRODUCT_TYPE CHAR(8000) NOT NULL
		($14)::char 	-- $14: LOAN_TYPE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPayment_HIST;
SELECT * FROM STG.WINCHK_LoanPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 662: LoanPaymentAchQueueDetail
COPY INTO ARES.STG.SRC_LoanPaymentAchQueueDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_ACH_QUEUE_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::number, 	-- $3: ACH_AMOUNT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($9)::number 	-- $9: INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentAchQueueDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentAchQueueDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentAchQueueDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentAchQueueDetail_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentAchQueueDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 663: LoanPaymentAddToQueue
COPY INTO ARES.STG.SRC_LoanPaymentAddToQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_ADD_TO_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::number, 	-- $3: ADD_TO_INSURANCE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($4)::number 	-- $4: ADD_TO_DUE_DATE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentAddToQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentAddToQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentAddToQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentAddToQueue_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentAddToQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 664: LoanPaymentCashAdvance
COPY INTO ARES.STG.SRC_LoanPaymentCashAdvance_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_CASH_ADVANCE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::number, 	-- $3: EST_PAYMENT_PRINC_AMT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: EST_PAYMENT_INT_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: EST_PAYMENT_CAB_LENDER_INT_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: EST_PAYMENT_TOT_FEES_AMT NUMBER(10,4) NULL
		($7)::number 	-- $7: EST_PAYMENT_TOT_AMT NUMBER(10,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentCashAdvance/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentCashAdvance_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentCashAdvance_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentCashAdvance_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentCashAdvance_HIST;
[STATUS=tbd]
*/

-- // TABLE 665: LoanPaymentCheckPaymentTypeXref
COPY INTO ARES.STG.SRC_LoanPaymentCheckPaymentTypeXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_CHECK_PAYMENT_TYPE_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: CHECK_PAYMENT_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentCheckPaymentTypeXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentCheckPaymentTypeXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentCheckPaymentTypeXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentCheckPaymentTypeXref_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentCheckPaymentTypeXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 666: LoanPaymentDecreaseAmountOwed
COPY INTO ARES.STG.SRC_LoanPaymentDecreaseAmountOwed_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_DECREASE_AMOUNT_OWED_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::char, 	-- $3: DECREASE_AMOUNT_OWED_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: DECREASE_AMOUNT_OWED_REASON CHAR(8000) NOT NULL
		($5)::number, 	-- $5: APPLY_BUCKET_AMT NUMBER(10,4) NOT NULL
		($6)::char, 	-- $6: APPLY_DUE_TYPE CHAR(8000) NOT NULL
		($7)::char 	-- $7: APPLY_BUCKET_TYPE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentDecreaseAmountOwed/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentDecreaseAmountOwed_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentDecreaseAmountOwed_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentDecreaseAmountOwed_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentDecreaseAmountOwed_HIST;
[STATUS=tbd]
*/

-- // TABLE 667: LoanPaymentDueDate
COPY INTO ARES.STG.SRC_LoanPaymentDueDate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_DUE_DATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::date, 	-- $3: ORIG_DUE_DATE DATE NOT NULL
		($4)::date, 	-- $4: ADJUSTED_DUE_DATE DATE NOT NULL
		($5)::number, 	-- $5: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: COLLECTIONS_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PENDING_ACH_AMT NUMBER(10,4) NOT NULL
		($8)::boolean 	-- $8: PAYMENT_AUTHORIZED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentDueDate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentDueDate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentDueDate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentDueDate_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentDueDate_HIST;
[STATUS=tbd]
*/

-- // TABLE 668: LoanPaymentForgiven
COPY INTO ARES.STG.SRC_LoanPaymentForgiven_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_FORGIVEN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_PAYMENT_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: ELIGIBLE_DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: ELIGIBLE_ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentForgiven/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentForgiven_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentForgiven_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentForgiven_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentForgiven_HIST;
[STATUS=tbd]
*/

-- // TABLE 669: LoanPaymentInsuranceClaimXRef
COPY INTO ARES.STG.SRC_LoanPaymentInsuranceClaimXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_INSURANCE_CLAIM_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: INSURANCE_CLAIM_KEY INT NOT NULL
		($3)::int 	-- $3: LOAN_PAYMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentInsuranceClaimXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentInsuranceClaimXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentInsuranceClaimXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentInsuranceClaimXRef_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentInsuranceClaimXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 670: LoanPaymentMPay
COPY INTO ARES.STG.SRC_LoanPaymentMPay_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_MPAY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::boolean, 	-- $3: ADD_TO_COLL BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: REM_FROM_COLL BOOLEAN NOT NULL
		($5)::number, 	-- $5: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($6)::boolean, 	-- $6: IS_CO_EARLY_PAYOFF_REBATE BOOLEAN NOT NULL
		($7)::number, 	-- $7: COLL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: LEGAL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: LOAN_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: TRANS_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: INTEREST_DUE_PAID NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: PRINC_DUE_PAID NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: PAYMENT_DUE_PAID NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: PAYMENT_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: CAB_COLL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: CAB_INTEREST_DUE_PAID NUMBER(10,4) NOT NULL
		($17)::boolean, 	-- $17: IS_SCHEDULED_PAYMENT BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: IS_DAY_AFTER_DUE_PAYMENT BOOLEAN NOT NULL
		($19)::number, 	-- $19: NSF_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: INSURANCE_DUE_PAID NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: DUE_DATE_PAYMENT_QUEUE_PAID NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: INSURANCE_PAYMENT_QUEUE_PAID NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: DEFERRED_REVENUE_DUE_PAID NUMBER(10,4) NOT NULL
		($24)::number 	-- $24: NON_REFUNDABLE_FEE_DUE_PAID NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentMPay/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentMPay_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentMPay_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentMPay_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentMPay_HIST;
[STATUS=tbd]
*/

-- // TABLE 671: LoanPaymentMPayAuth
COPY INTO ARES.STG.SRC_LoanPaymentMPayAuth_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_MPAY_AUTH_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: MPAY_AMORT_KEY INT NOT NULL
		($4)::number 	-- $4: PAYMENT_AUTHORIZED_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentMPayAuth/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentMPayAuth_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentMPayAuth_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentMPayAuth_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentMPayAuth_HIST;
[STATUS=tbd]
*/

-- // TABLE 672: LoanPaymentOpenEnd
COPY INTO ARES.STG.SRC_LoanPaymentOpenEnd_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_OPEN_END_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::number, 	-- $3: PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PAST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PAST_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: NOT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: NOT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($24)::boolean, 	-- $24: ADD_TO_COLL BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: REM_FROM_COLL BOOLEAN NOT NULL
		($26)::int, 	-- $26: FUNDING_ACH_HISTORY_KEY INT NULL
		($27)::number, 	-- $27: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($28)::boolean, 	-- $28: IS_INTEREST_REDUCTION_PAYMENT BOOLEAN NOT NULL
		($29)::boolean, 	-- $29: IS_PRINCIPLE_ONLY_PAYMENT BOOLEAN NOT NULL
		($30)::number, 	-- $30: PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($33)::number, 	-- $33: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($34)::number, 	-- $34: NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($35)::int, 	-- $35: ACH_PROCESSING_QUEUE_KEY INT NULL
		($36)::boolean, 	-- $36: IS_REBOOTED BOOLEAN NOT NULL
		($37)::number, 	-- $37: PAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: NOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: DUE_DATE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: INSURANCE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: INTEREST_AMT NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: PRINC_AMT NUMBER(10,4) NOT NULL
		($50)::number, 	-- $50: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		($51)::number, 	-- $51: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		($52)::number, 	-- $52: NOT_DUE_AMT NUMBER(10,4) NOT NULL
		($53)::number, 	-- $53: DEFERRED_REVENUE_DUE_AMT NUMBER(10,4) NOT NULL
		($54)::number, 	-- $54: PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
		($55)::number, 	-- $55: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($56)::number 	-- $56: TOTAL_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentOpenEnd/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentOpenEnd_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentOpenEnd_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentOpenEnd_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentOpenEnd_HIST;
[STATUS=tbd]
*/

-- // TABLE 673: LoanPaymentOpenEndStream
COPY INTO ARES.STG.SRC_LoanPaymentOpenEndStream_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_OPEN_END_STREAM_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: OPEN_END_LOAN_STREAM_KEY INT NOT NULL
		($4)::number, 	-- $4: PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: PAST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: PAST_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: NOT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($28)::number, 	-- $28: NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: NOT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($30)::number, 	-- $30: PAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($33)::number, 	-- $33: NOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($34)::number, 	-- $34: DUE_DATE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: INSURANCE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($37)::number, 	-- $37: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: INTEREST_AMT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: PRINC_AMT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: NOT_DUE_AMT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($48)::number 	-- $48: TOTAL_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentOpenEndStream/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentOpenEndStream_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentOpenEndStream_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentOpenEndStream_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentOpenEndStream_HIST;
[STATUS=tbd]
*/

-- // TABLE 674: LoanPaymentPTPDetail
COPY INTO ARES.STG.SRC_LoanPaymentPTPDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: PTP_DETAIL_KEY INT NOT NULL
		($3)::number 	-- $3: PAID_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentPTPDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentPTPDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentPTPDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentPTPDetail_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentPTPDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 675: LoanPaymentRefund
COPY INTO ARES.STG.SRC_LoanPaymentRefund_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_REFUND_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::boolean, 	-- $6: REVERSED BOOLEAN NOT NULL
		($7)::int, 	-- $7: REVERSE_TRANS_DETAIL_KEY INT NULL
		($8)::int, 	-- $8: REFUNDED_LOAN_PAYMENT_KEY INT NOT NULL
		($9)::number, 	-- $9: AMOUNT NUMBER(10,4) NOT NULL
		($10)::boolean, 	-- $10: IS_CHARGEBACK_TO_COLLECTIONS BOOLEAN NOT NULL
		($11)::int 	-- $11: REFUNDED_TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentRefund/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentRefund_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentRefund_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentRefund_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentRefund_HIST;
[STATUS=tbd]
*/

-- // TABLE 676: LoanPaymentRescind
COPY INTO ARES.STG.SRC_LoanPaymentRescind_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_RESCIND_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: CASH_ADVANCE_LOAN_PAYMENT_KEY INT NOT NULL
		($4)::number, 	-- $4: RESCIND_AMOUNT NUMBER(10,4) NOT NULL
		($5)::numeric, 	-- $5: INTEREST_REBATE NUMERIC NOT NULL
		($6)::numeric 	-- $6: CAB_LENDER_INTEREST_REBATE NUMERIC NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentRescind/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentRescind_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentRescind_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentRescind_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentRescind_HIST;
[STATUS=tbd]
*/

-- // TABLE 677: LoanPaymentSkip
COPY INTO ARES.STG.SRC_LoanPaymentSkip_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_SKIP_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: PAYMENT_NUM INT NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentSkip/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentSkip_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentSkip_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentSkip_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentSkip_HIST;
[STATUS=tbd]
*/

-- // TABLE 678: LoanPaymentSPay
COPY INTO ARES.STG.SRC_LoanPaymentSPay_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_SPAY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::number, 	-- $3: COLL_FEE_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: LEGAL_FEE_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: LOAN_FEE_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: INTEREST_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: CAB_INTEREST_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PRINC_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: CAB_LENDER_COLL_FEE_PAST_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: NSF_FEE_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: TRANS_FEE_DUE_PAID_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($13)::number 	-- $13: DEFERRED_REVENUE_DUE_PAID_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentSPay/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentSPay_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentSPay_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentSPay_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentSPay_HIST;
[STATUS=tbd]
*/

-- // TABLE 679: LoanPaymentStaged
COPY INTO ARES.STG.SRC_LoanPaymentStaged_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::number, 	-- $5: AMOUNT NUMBER(19,4) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DUE_DATE TIMESTAMP_LTZ NOT NULL
		($7)::int, 	-- $7: LOAN_PAYMENT_STAGED_STATUS_KEY INT NOT NULL
		($8)::int 	-- $8: PRESENTMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStaged/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStaged_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStaged_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStaged_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStaged_HIST;
[STATUS=tbd]
*/

-- // TABLE 680: LoanPaymentStagedCommunication
COPY INTO ARES.STG.SRC_LoanPaymentStagedCommunication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_COMMUNICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_STAGED_KEY INT NOT NULL
		($3)::int, 	-- $3: NOTIFICATION_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::int, 	-- $5: CHANNEL_KEY INT NOT NULL
		($6)::date, 	-- $6: SEND_DATE DATE NOT NULL
		($7)::bigint, 	-- $7: MESSAGE_KEY BIGINT NULL
		($8)::int 	-- $8: DOCUWARE_DOCUMENT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStagedCommunication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStagedCommunication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStagedCommunication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStagedCommunication_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStagedCommunication_HIST;
[STATUS=tbd]
*/

-- // TABLE 681: LoanPaymentStagedCommunicationAccount
COPY INTO ARES.STG.SRC_LoanPaymentStagedCommunicationAccount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_COMMUNICATION_KEY INT NOT NULL
		($2)::int 	-- $2: BANK_ACCOUNT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStagedCommunicationAccount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStagedCommunicationAccount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStagedCommunicationAccount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStagedCommunicationAccount_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStagedCommunicationAccount_HIST;
[STATUS=tbd]
*/

-- // TABLE 682: LoanPaymentStagedCommunicationCard
COPY INTO ARES.STG.SRC_LoanPaymentStagedCommunicationCard_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_COMMUNICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CARD_TOKEN INT NOT NULL
		($3)::int, 	-- $3: BIN INT NOT NULL
		($4)::smallint, 	-- $4: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($5)::smallint, 	-- $5: EXP_MONTH SMALLINT NOT NULL
		($6)::int 	-- $6: EXP_YEAR INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStagedCommunicationCard/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStagedCommunicationCard_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStagedCommunicationCard_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStagedCommunicationCard_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStagedCommunicationCard_HIST;
[STATUS=tbd]
*/

-- // TABLE 683: LoanPaymentStagedNotSent
COPY INTO ARES.STG.SRC_LoanPaymentStagedNotSent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_NOT_SENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_STAGED_KEY INT NOT NULL
		($3)::int 	-- $3: LOAN_PAYMENT_STAGED_NOT_SENT_REASON_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStagedNotSent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStagedNotSent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStagedNotSent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStagedNotSent_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStagedNotSent_HIST;
[STATUS=tbd]
*/

-- // TABLE 684: LoanPaymentStagedNotSentReason
COPY INTO ARES.STG.SRC_LoanPaymentStagedNotSentReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_NOT_SENT_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: REASON VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStagedNotSentReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStagedNotSentReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStagedNotSentReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStagedNotSentReason_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStagedNotSentReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 685: LoanPaymentStagedStatus
COPY INTO ARES.STG.SRC_LoanPaymentStagedStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_STAGED_STATUS_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentStagedStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentStagedStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentStagedStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentStagedStatus_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentStagedStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 686: LoanPaymentSuspendInterest
COPY INTO ARES.STG.SRC_LoanPaymentSuspendInterest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_SUSPEND_INTEREST_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_SUSPEND_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PAYMENT_RESUME_KEY INT NULL
		($4)::date, 	-- $4: RESUME_INTEREST_DATE DATE NULL
		($5)::char, 	-- $5: STATUS CHAR(8000) NOT NULL
		($6)::smallint 	-- $6: RESUME_INTEREST_TYPE_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentSuspendInterest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentSuspendInterest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentSuspendInterest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentSuspendInterest_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentSuspendInterest_HIST;
[STATUS=tbd]
*/

-- // TABLE 687: LoanPaymentWaiveRIFee
COPY INTO ARES.STG.SRC_LoanPaymentWaiveRIFee_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_WAIVE_RI_FEE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::char 	-- $3: WAIVE_RI_FEE_REASON_CODE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPaymentWaiveRIFee/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPaymentWaiveRIFee_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPaymentWaiveRIFee_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPaymentWaiveRIFee_HIST;
SELECT * FROM STG.WINCHK_LoanPaymentWaiveRIFee_HIST;
[STATUS=tbd]
*/

-- // TABLE 688: LoanPayoffDate
COPY INTO ARES.STG.SRC_LoanPayoffDate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYOFF_DATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: PAYOFF_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanPayoffDate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanPayoffDate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanPayoffDate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanPayoffDate_HIST;
SELECT * FROM STG.WINCHK_LoanPayoffDate_HIST;
[STATUS=tbd]
*/

-- // TABLE 689: LoanProduct
COPY INTO ARES.STG.SRC_LoanProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: PRODUCT_NAME VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: PRODUCT_TYPE CHAR(8000) NOT NULL
		($4)::char, 	-- $4: LOAN_TYPE CHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_EXPRESS BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IS_BUSINESS BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_EASYPAY BOOLEAN NOT NULL
		($10)::char, 	-- $10: BUSINESS_STATE CHAR(8000) NULL
		($11)::varchar, 	-- $11: NOTE VARCHAR(8000) NOT NULL
		($12)::datetime, 	-- $12: DATE_UPDATED datetime NULL
		($13)::char, 	-- $13: UPDATED_BY CHAR(8000) NULL
		($14)::boolean, 	-- $14: IS_PRIME BOOLEAN NOT NULL
		($15)::int 	-- $15: LOAN_PRODUCT_FINANCIAL_GROUP_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProduct_HIST;
SELECT * FROM STG.WINCHK_LoanProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 690: LoanProductBlocked
COPY INTO ARES.STG.SRC_LoanProductBlocked_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_BLOCKED_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: SPECIFIC_START_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($3), 	-- $3: SPECIFIC_END_DATE TIMESTAMP_LTZ NULL
		($4)::smallint, 	-- $4: DAY_OF_WEEK SMALLINT NOT NULL
		($5)::smallint, 	-- $5: TYPE_OF_BLOCK SMALLINT NOT NULL
		($6)::varchar, 	-- $6: BLOCKED_UNTIL_TIME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: BLOCKED_AFTER_TIME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_TO_DELETE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($9), 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($10)::char, 	-- $10: ENTERED_BY CHAR(8000) NOT NULL
		($11)::int, 	-- $11: LOAN_PRODUCT_KEY INT NOT NULL
		($12)::smallint 	-- $12: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductBlocked/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductBlocked_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductBlocked_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductBlocked_HIST;
SELECT * FROM STG.WINCHK_LoanProductBlocked_HIST;
[STATUS=tbd]
*/

-- // TABLE 691: LoanProductBlockType
COPY INTO ARES.STG.SRC_LoanProductBlockType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOAN_PRODUCT_BLOCK_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductBlockType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductBlockType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductBlockType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductBlockType_HIST;
SELECT * FROM STG.WINCHK_LoanProductBlockType_HIST;
[STATUS=tbd]
*/

-- // TABLE 692: LoanProductConfig
COPY INTO ARES.STG.SRC_LoanProductConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NOT NULL
		($2)::int, 	-- $2: CALL_CAMPAIGN_KEY INT NOT NULL
		($3)::int, 	-- $3: ORIG_CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NULL
		($4)::int, 	-- $4: VISITOR_KEY INT NULL
		($5)::varchar, 	-- $5: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NULL
		($7)::varchar, 	-- $7: FIRST_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: LAST_NAME VARCHAR(8000) NOT NULL
		($9)::int, 	-- $9: CALL_CAMPAIGN_QUEUE_STATUS_KEY INT NOT NULL
		($10)::smallint, 	-- $10: CAMPAIGN_LOCATION smallint NOT NULL
		($11)::smallint, 	-- $11: TARGET_LOCATION smallint NOT NULL
		($12)::char, 	-- $12: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14), 	-- $14: CALL_AFTER TIMESTAMP_LTZ NULL
		to_timestamp_ntz($15), 	-- $15: EXPIRE_DATE TIMESTAMP_LTZ NOT NULL
		($16)::varchar, 	-- $16: NOTE VARCHAR(8000) NULL
		($17)::int, 	-- $17: CALL_CAMPAIGN_QUEUE_STATUS_REASON_KEY INT NOT NULL
		($18)::varchar 	-- $18: MARKETING_DETAILS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfig_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 693: LoanProductConfigAnnualRateBandLoanAmtRange
COPY INTO ARES.STG.SRC_LoanProductConfigAnnualRateBandLoanAmtRange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_ANNUAL_RATE_BAND_LOAN_AMT_RANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: BAND_NUMBER SMALLINT NOT NULL
		($4)::number, 	-- $4: LOAN_AMT_FROM NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: LOAN_AMT_TO NUMBER(10,4) NOT NULL
		($6)::decimal 	-- $6: ANNUAL_RATE DECIMAL(38,0) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigAnnualRateBandLoanAmtRange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigAnnualRateBandLoanAmtRange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigAnnualRateBandLoanAmtRange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigAnnualRateBandLoanAmtRange_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigAnnualRateBandLoanAmtRange_HIST;
[STATUS=tbd]
*/

-- // TABLE 694: LoanProductConfigApprovalRate
COPY INTO ARES.STG.SRC_LoanProductConfigApprovalRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_APPROVAL_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::number, 	-- $3: INCOME_TO_AMT NUMBER(10,4) NOT NULL
		($4)::decimal, 	-- $4: APPROVAL_VAL DECIMAL(38,0) NOT NULL
		($5)::char, 	-- $5: APPROVAL_PCT_OR_AMT CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_UPDATED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigApprovalRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigApprovalRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigApprovalRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigApprovalRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigApprovalRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 695: LoanProductConfigBumpUp
COPY INTO ARES.STG.SRC_LoanProductConfigBumpUp_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_BUMP_UP_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: BUMP_UP_TIER_TYPE_KEY SMALLINT NOT NULL
		($4)::number, 	-- $4: INCREASE_AMOUNT NUMBER(10,4) NOT NULL
		($5)::smallint, 	-- $5: NUMBER_OF_SUCCESSFUL_PAYMENTS SMALLINT NOT NULL
		($6)::boolean, 	-- $6: RESTART_AFTER_RI BOOLEAN NOT NULL
		($7)::smallint, 	-- $7: MIN_DAYS_BETWEEN_LOANS SMALLINT NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::smallint, 	-- $10: MAX_BUMP_UP_PER_LOAN SMALLINT NOT NULL
		($11)::boolean 	-- $11: IS_DELETED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigBumpUp/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigBumpUp_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigBumpUp_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigBumpUp_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigBumpUp_HIST;
[STATUS=tbd]
*/

-- // TABLE 696: LoanProductConfigBumpUpIncomeTypePriority
COPY INTO ARES.STG.SRC_LoanProductConfigBumpUpIncomeTypePriority_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_BUMP_UP_KEY INT NOT NULL
		($2)::smallint, 	-- $2: INCOME_PRIORITY SMALLINT NOT NULL
		($3)::char, 	-- $3: INCOME_AMOUNT_TYPE CHAR(8000) NULL
		($4)::boolean 	-- $4: IS_DIRECT_DEPOSIT BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigBumpUpIncomeTypePriority/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigBumpUpIncomeTypePriority_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigBumpUpIncomeTypePriority_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigBumpUpIncomeTypePriority_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigBumpUpIncomeTypePriority_HIST;
[STATUS=tbd]
*/

-- // TABLE 697: LoanProductConfigEdit
COPY INTO ARES.STG.SRC_LoanProductConfigEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::varchar, 	-- $5: TABLE_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigEdit_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 698: LoanProductConfigEligibilityLoanHistory
COPY INTO ARES.STG.SRC_LoanProductConfigEligibilityLoanHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_ELIGIBILITY_LOAN_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOAN_COUNT smallint NOT NULL
		($5)::smallint, 	-- $5: DAYS_TO_LOOK_BACK smallint NOT NULL
		($6)::boolean 	-- $6: IS_ELIGIBLE_IF_COUNT_MET BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigEligibilityLoanHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigEligibilityLoanHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigEligibilityLoanHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigEligibilityLoanHistory_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigEligibilityLoanHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 699: LoanProductConfigEligibilityLoanHistoryProducts
COPY INTO ARES.STG.SRC_LoanProductConfigEligibilityLoanHistoryProducts_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_ELIGIBILITY_LOAN_HISTORY_PRODUCTS_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_ELIGIBILITY_LOAN_HISTORY_KEY INT NOT NULL
		($3)::int 	-- $3: LOAN_PRODUCT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigEligibilityLoanHistoryProducts/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigEligibilityLoanHistoryProducts_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigEligibilityLoanHistoryProducts_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigEligibilityLoanHistoryProducts_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigEligibilityLoanHistoryProducts_HIST;
[STATUS=tbd]
*/

-- // TABLE 700: LoanProductConfigExpenseType
COPY INTO ARES.STG.SRC_LoanProductConfigExpenseType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_EXPENSE_TYPE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: EXPENSE_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: DAYS_TO_REREQUEST_EXPENSES INT NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_UPDATED datetime NOT NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigExpenseType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigExpenseType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigExpenseType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigExpenseType_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigExpenseType_HIST;
[STATUS=tbd]
*/

-- // TABLE 701: LoanProductConfigFixedPaymentCount
COPY INTO ARES.STG.SRC_LoanProductConfigFixedPaymentCount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_FIXED_PAYMENT_COUNT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PAY_CYCLE_KEY smallint NOT NULL
		($4)::smallint 	-- $4: PAYMENT_COUNT smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigFixedPaymentCount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigFixedPaymentCount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigFixedPaymentCount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigFixedPaymentCount_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigFixedPaymentCount_HIST;
[STATUS=tbd]
*/

-- // TABLE 702: LoanProductConfigInsuranceRate
COPY INTO ARES.STG.SRC_LoanProductConfigInsuranceRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_INSURANCE_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::decimal, 	-- $3: FEE_PER_PAYMENT_PCT DECIMAL(38,0) NOT NULL
		($4)::number, 	-- $4: LOAN_UP_TO_AMT NUMBER(10,4) NOT NULL
		($5)::char, 	-- $5: PAYMENT_CYCLE CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_UPDATED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigInsuranceRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigInsuranceRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigInsuranceRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigInsuranceRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigInsuranceRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 703: LoanProductConfigInterestRate
COPY INTO ARES.STG.SRC_LoanProductConfigInterestRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_INTEREST_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::number, 	-- $3: LOAN_UP_TO_AMT NUMBER(10,4) NOT NULL
		($4)::decimal, 	-- $4: INTEREST_RATE_PCT DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigInterestRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigInterestRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigInterestRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigInterestRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigInterestRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 704: LoanProductConfigLoanFeeRate
COPY INTO ARES.STG.SRC_LoanProductConfigLoanFeeRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_LOAN_FEE_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::number, 	-- $3: LOAN_UP_TO_AMT NUMBER(10,4) NOT NULL
		($4)::decimal, 	-- $4: LOAN_FEE_PCT DECIMAL(38,0) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigLoanFeeRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigLoanFeeRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigLoanFeeRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigLoanFeeRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigLoanFeeRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 705: LoanProductConfigLoanStats
COPY INTO ARES.STG.SRC_LoanProductConfigLoanStats_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_LOAN_STATS_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: LOANS_COUNT INT NOT NULL
		($5)::int, 	-- $5: OPEN_LOANS_COUNT INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigLoanStats/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigLoanStats_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigLoanStats_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigLoanStats_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigLoanStats_HIST;
[STATUS=tbd]
*/

-- // TABLE 706: LoanProductConfigMaintenanceFeeRate
COPY INTO ARES.STG.SRC_LoanProductConfigMaintenanceFeeRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_MAINTENANCE_FEE_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::number, 	-- $3: LOAN_UP_TO_AMT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: FEE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NULL
		($9)::decimal 	-- $9: FEE_PCT DECIMAL(38,0) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigMaintenanceFeeRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigMaintenanceFeeRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigMaintenanceFeeRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigMaintenanceFeeRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigMaintenanceFeeRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 707: LoanProductConfigMaxLoanAmtRate
COPY INTO ARES.STG.SRC_LoanProductConfigMaxLoanAmtRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_MAX_LOAN_AMT_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::number, 	-- $3: INCOME_REQUIRED_AMT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: LOAN_AMT_MAX_AMT NUMBER(10,4) NOT NULL
		($5)::smallint, 	-- $5: LOAN_LENGTH_MAX_MONTHS SMALLINT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_UPDATED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: UPDATED_BY CHAR(8000) NULL
		($10)::smallint, 	-- $10: LOAN_LENGTH_MIN_MONTHS SMALLINT NOT NULL
		($11)::smallint 	-- $11: LOAN_LENGTH_DEFAULT_MONTHS SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigMaxLoanAmtRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigMaxLoanAmtRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigMaxLoanAmtRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigMaxLoanAmtRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigMaxLoanAmtRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 708: LoanProductConfigOpenEnd
COPY INTO ARES.STG.SRC_LoanProductConfigOpenEnd_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_OPEN_END_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_KEY INT NOT NULL
		($4)::smallint, 	-- $4: CAB_FEE_DAY_OFFSET SMALLINT NOT NULL
		($5)::boolean, 	-- $5: CASH_ADVANCE_DISABLED BOOLEAN NOT NULL
		($6)::number, 	-- $6: CASH_ADVANCE_LIMIT_AMT NUMBER(10,4) NOT NULL
		($7)::boolean, 	-- $7: CASH_ADVANCE_LIMIT_ENABLED BOOLEAN NOT NULL
		($8)::smallint, 	-- $8: CLOSE_WHEN_INACTIVE_DAYS smallint NOT NULL
		($9)::boolean, 	-- $9: CLOSE_WHEN_PAID_OFF BOOLEAN NOT NULL
		($10)::smallint, 	-- $10: COOLING_DAYS_AFTER_FINAL_ROLLOVER SMALLINT NOT NULL
		($11)::smallint, 	-- $11: COOLING_DAYS_CASH_ADVANCE_AFTER_PAYMENT SMALLINT NOT NULL
		($12)::smallint, 	-- $12: CYCLE_DAYS SMALLINT NOT NULL
		($13)::boolean, 	-- $13: FLAT_FEE_BIWEEKLY_RATES_ENABLED BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: FLAT_FEE_RULES_ENABLED BOOLEAN NOT NULL
		($15)::date, 	-- $15: ENFORCE_ROLLOVER_RESTRICTIONS_AS_OF_DATE DATE NULL
		($16)::boolean, 	-- $16: IS_ORDINANCE_LOCATION BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: LIMIT_ZERO_BALANCE_STATEMENTS BOOLEAN NOT NULL
		($18)::number, 	-- $18: MIN_PRINC_DUE_FOUR_WEEKS_AMT NUMBER(10,4) NOT NULL
		($19)::numeric, 	-- $19: MIN_PRINC_DUE_FOUR_WEEKS_PCT NUMERIC NOT NULL
		($20)::number, 	-- $20: MIN_PRINC_DUE_TWO_WEEKS_AMT NUMBER(10,4) NOT NULL
		($21)::numeric, 	-- $21: MIN_PRINC_DUE_TWO_WEEKS_PCT NUMERIC NOT NULL
		($22)::smallint, 	-- $22: NEW_LOAN_WITHIN_CLOSING_PREVIOUS_LOAN_DAYS SMALLINT NOT NULL
		($23)::boolean, 	-- $23: NEW_LOAN_WITHIN_CLOSING_PREVIOUS_LOAN_ONLY_ENABLED BOOLEAN NOT NULL
		($24)::smallint, 	-- $24: NON_ORDINANCE_LOCATION smallint NOT NULL
		($25)::boolean, 	-- $25: PAY_PRINC_BEFORE_NEXT_AND_NOT_DUE BOOLEAN NOT NULL
		($26)::smallint, 	-- $26: PAYMENT_DUE_CYCLE_DAYS SMALLINT NOT NULL
		($27)::boolean, 	-- $27: PRINC_AMT_INCREMENT_ENABLED BOOLEAN NOT NULL
		($28)::number, 	-- $28: PRINC_AMT_INCREMENT_AMT NUMBER(10,4) NOT NULL
		($29)::boolean, 	-- $29: STMTS_EMAIL_ENABLED BOOLEAN NOT NULL
		($30)::smallint, 	-- $30: STMTS_GEN_CYCLE_DAYS smallint NOT NULL
		($31)::boolean, 	-- $31: CASH_ADVANCE_RESCIND_DURING_GRACE_PERIOD_ENABLED BOOLEAN NOT NULL
		($32)::boolean, 	-- $32: SHOW_CREDIT_AVAILABLE_ON_STATEMENTS_ENABLED BOOLEAN NOT NULL
		($33)::int, 	-- $33: CREDIT_LIMIT_UPDATE_METHOD INT NOT NULL
		($34)::int, 	-- $34: REBOOT_FORM_LETTER_KEY INT NULL
		($35)::boolean, 	-- $35: ENABLE_ARISE_RULES BOOLEAN NOT NULL
		($36)::numeric, 	-- $36: ACTIVITY_FEE_PERCENT NUMERIC NOT NULL
		($37)::number, 	-- $37: ACTIVITY_FEE_PERCENT_MINIMUM_AMOUNT NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: ACTIVITY_FEE_PERCENT_MAXIMUM_AMOUNT NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: ACTIVITY_FEE_FLAT_AMOUNT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: ACTIVITY_FEE_TIERED_MONTHLY_FLAT_AMOUNT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: ACTIVITY_FEE_MINIMUM_BALANCE NUMBER(10,4) NOT NULL
		($42)::smallint, 	-- $42: ACTIVITY_FEE_BEGIN_AFTER_PAYMENT_CYCLE_NUMBER smallint NOT NULL
		($43)::smallint, 	-- $43: ACTIVITY_FEE_ADD_OFFSET_DAYS SMALLINT NOT NULL
		($44)::numeric, 	-- $44: TRANSACTION_FEE_PERCENT NUMERIC NOT NULL
		($45)::number, 	-- $45: TRANSACTION_FEE_PERCENT_MINIMUM_AMOUNT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: TRANSACTION_FEE_PERCENT_MAXIMUM_AMOUNT NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: TRANSACTION_FEE_FLAT_AMOUNT NUMBER(10,4) NOT NULL
		($48)::boolean, 	-- $48: ENABLE_STATEMENT_STREAMS BOOLEAN NOT NULL
		($49)::boolean, 	-- $49: ENABLE_STATEMENT_STREAM_INTEREST_REBATE BOOLEAN NOT NULL
		($50)::smallint, 	-- $50: STATEMENT_PROCESS_DAYS_AFTER_END_DATE SMALLINT NOT NULL
		($51)::number, 	-- $51: MAX_PRINC_DUE_FOUR_WEEKS_AMT NUMBER(10,4) NOT NULL
		($52)::number, 	-- $52: MAX_PRINC_DUE_TWO_WEEKS_AMT NUMBER(10,4) NOT NULL
		($53)::smallint, 	-- $53: INSURANCE_CANCEL_GRACE_PERIOD_TWO_WEEK_STATEMENT_NUM smallint NOT NULL
		($54)::smallint 	-- $54: INSURANCE_CANCEL_GRACE_PERIOD_FOUR_WEEK_STATEMENT_NUM smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigOpenEnd/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigOpenEnd_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigOpenEnd_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigOpenEnd_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigOpenEnd_HIST;
[STATUS=tbd]
*/

-- // TABLE 709: LoanProductConfigRIRate
COPY INTO ARES.STG.SRC_LoanProductConfigRIRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_RI_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::smallint, 	-- $3: FROM_NUM_DAYS smallint NOT NULL
		($4)::smallint, 	-- $4: TO_NUM_DAYS smallint NOT NULL
		($5)::decimal, 	-- $5: RI_RATE_VAL DECIMAL(38,0) NOT NULL
		($6)::char, 	-- $6: RI_RATE_PCT_OR_AMT CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::char, 	-- $8: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: DATE_UPDATED TIMESTAMP_LTZ NULL
		($10)::char, 	-- $10: UPDATED_BY CHAR(8000) NULL
		($11)::int 	-- $11: NUMBER_OF_DAYS_PER_ASSESSMENT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigRIRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigRIRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigRIRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigRIRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigRIRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 710: LoanProductConfigTitle
COPY INTO ARES.STG.SRC_LoanProductConfigTitle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_TITLE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_KEY INT NOT NULL
		($4)::decimal, 	-- $4: APPROVAL_PCT_EMPLOYED_24_PLUS_MONTHS DECIMAL(38,0) NOT NULL
		($5)::decimal, 	-- $5: APPROVAL_PCT_EMPLOYED_6_TO_23_MONTHS DECIMAL(38,0) NOT NULL
		($6)::decimal, 	-- $6: APPROVAL_PCT_EMPLOYED_UP_TO_5_MONTHS DECIMAL(38,0) NOT NULL
		($7)::decimal, 	-- $7: APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT DECIMAL(38,0) NOT NULL
		($8)::decimal, 	-- $8: APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT_DIRECT_DEPOSIT DECIMAL(38,0) NOT NULL
		($9)::decimal, 	-- $9: APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_DEBIT_CARD DECIMAL(38,0) NOT NULL
		($10)::decimal, 	-- $10: APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT DECIMAL(38,0) NOT NULL
		($11)::decimal, 	-- $11: APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT_DIRECT_DEPOSIT DECIMAL(38,0) NOT NULL
		($12)::decimal, 	-- $12: APPROVAL_PCT_WHOLESALE_UP_TO_1500_DEBIT_CARD DECIMAL(38,0) NOT NULL
		($13)::smallint, 	-- $13: LEGAL_MAX_LOAN_VEHICLE_VALUE_PCT smallint NOT NULL
		($14)::char, 	-- $14: LEGAL_MAX_LOAN_VEHICLE_VALUE_WHOLESALE_OR_RETAIL CHAR(8000) NOT NULL
		($15)::number, 	-- $15: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($16)::boolean, 	-- $16: LIEN_FEE_FINANCED_ENABLED BOOLEAN NOT NULL
		($17)::int, 	-- $17: LOAN_AMT_MGR_OVERRIDE_VEHICLE_VALUE_PCT INT NOT NULL
		($18)::char, 	-- $18: LOAN_AMT_MGR_OVERRIDE_VEHICLE_WHOLESALE_OR_RETAIL CHAR(8000) NOT NULL
		($19)::number, 	-- $19: LOAN_AMT_NO_INSURANCE_MAX_AMT NUMBER(10,4) NOT NULL
		($20)::boolean, 	-- $20: MAX_LOAN_VEHICLE_VALUE_PCT_ENABLED BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: MULT_LOANS_VIN_ENABLED BOOLEAN NOT NULL
		($22)::numeric, 	-- $22: ORIG_FEE_PCT_2ND_LIEN NUMERIC NOT NULL
		($23)::number, 	-- $23: REPO_ASSIGNMENT_MIN_BALANCE NUMBER(10,4) NOT NULL
		($24)::boolean, 	-- $24: REQUIRE_COPLEDGE_DETAILS BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: REQUIRE_COPLEDGE_EYE_COLOR BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: REQUIRE_COPLEDGE_GENDER BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: REQUIRE_COPLEDGE_HAIR_COLOR BOOLEAN NOT NULL
		($28)::boolean, 	-- $28: REQUIRE_COPLEDGE_HEIGHT BOOLEAN NOT NULL
		($29)::boolean, 	-- $29: REQUIRE_COPLEDGE_RACE BOOLEAN NOT NULL
		($30)::boolean, 	-- $30: REQUIRE_COPLEDGE_SSN BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: REQUIRE_DETAILS BOOLEAN NOT NULL
		($32)::boolean, 	-- $32: REQUIRE_EYE_COLOR BOOLEAN NOT NULL
		($33)::boolean, 	-- $33: REQUIRE_GENDER BOOLEAN NOT NULL
		($34)::boolean, 	-- $34: REQUIRE_HAIR_COLOR BOOLEAN NOT NULL
		($35)::boolean, 	-- $35: REQUIRE_HEIGHT BOOLEAN NOT NULL
		($36)::boolean, 	-- $36: REQUIRE_RACE BOOLEAN NOT NULL
		($37)::boolean, 	-- $37: USE_FUEL_TYPE BOOLEAN NOT NULL
		($38)::boolean, 	-- $38: USE_LEGAL_STATUS BOOLEAN NOT NULL
		($39)::boolean, 	-- $39: USE_LIEN_HOLDER BOOLEAN NOT NULL
		($40)::boolean, 	-- $40: USE_ODO_CODE BOOLEAN NOT NULL
		($41)::boolean, 	-- $41: USE_REGISTRATION_DATE BOOLEAN NOT NULL
		($42)::boolean, 	-- $42: USE_REGISTRATION_EXPIRES BOOLEAN NOT NULL
		($43)::boolean, 	-- $43: USE_STATE_NUM BOOLEAN NOT NULL
		($44)::boolean, 	-- $44: USE_STICKER_NUM BOOLEAN NOT NULL
		($45)::boolean, 	-- $45: USE_TITLE_NUM BOOLEAN NOT NULL
		($46)::number, 	-- $46: VEH_VALUE_MIN_AMT NUMBER(10,4) NOT NULL
		($47)::smallint, 	-- $47: MAX_LOAN_VEHICLE_VALUE_PCT SMALLINT NOT NULL
		($48)::char, 	-- $48: MAX_LOAN_VEHICLE_VALUE_PCT_WHOLESALE_OR_RETAIL CHAR(8000) NOT NULL
		($49)::boolean, 	-- $49: MAX_TOTAL_PAYMENTS_VEHICLE_VALUE_PCT_ENABLED BOOLEAN NOT NULL
		($50)::int, 	-- $50: MAX_TOTAL_PAYMENTS_VEHICLE_VALUE_PCT INT NOT NULL
		($51)::char, 	-- $51: MAX_TOTAL_PAYMENTS_VEHICLE_VALUE_PCT_WHOLESALE_OR_RETAIL CHAR(8000) NOT NULL
		($52)::boolean, 	-- $52: USE_DIRECT_DEPOSIT BOOLEAN NOT NULL
		($53)::boolean 	-- $53: LOAN_AMT_MAX_INCLUDES_LIEN_FEE_ENABLED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigTitle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigTitle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigTitle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigTitle_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigTitle_HIST;
[STATUS=tbd]
*/

-- // TABLE 711: LoanProductConfigVariableRate
COPY INTO ARES.STG.SRC_LoanProductConfigVariableRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_CONFIG_VARIABLE_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: VARIABLE_RATE_TYPE_KEY INT NOT NULL
		($4)::decimal, 	-- $4: RATE_PCT DECIMAL(38,0) NOT NULL
		($5)::date, 	-- $5: START_DATE DATE NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_UPDATED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConfigVariableRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConfigVariableRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConfigVariableRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConfigVariableRate_HIST;
SELECT * FROM STG.WINCHK_LoanProductConfigVariableRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 712: LoanProductConversion
COPY INTO ARES.STG.SRC_LoanProductConversion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_KEY_SOURCE INT NOT NULL
		($2)::int 	-- $2: LOAN_PRODUCT_CONFIG_KEY_TARGET INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductConversion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductConversion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductConversion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductConversion_HIST;
SELECT * FROM STG.WINCHK_LoanProductConversion_HIST;
[STATUS=tbd]
*/

-- // TABLE 713: LoanProductEnableNewLoan
COPY INTO ARES.STG.SRC_LoanProductEnableNewLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_ENABLE_NEW_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_TILA_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		to_timestamp_ntz($5), 	-- $5: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: END_DATE TIMESTAMP_LTZ NOT NULL
		($7)::boolean, 	-- $7: ENABLE_AGREEMENT_NUMBER BOOLEAN NOT NULL
		($8)::int, 	-- $8: NEXT_AGREEMENT_NUMBER INT NOT NULL
		($9)::datetime, 	-- $9: DATE_ENTERED datetime NOT NULL
		($10)::char, 	-- $10: ENTERED_BY CHAR(8000) NOT NULL
		($11)::datetime, 	-- $11: DATE_UPDATED datetime NULL
		($12)::char, 	-- $12: UPDATED_BY CHAR(8000) NULL
		($13)::smallint, 	-- $13: LIEN_ADDRESS_LOCATION smallint NULL
		($14)::smallint, 	-- $14: HOTKEY_NUMBER SMALLINT NULL
		($15)::smallint, 	-- $15: DISPLAY_ORDER SMALLINT NULL
		($16)::int, 	-- $16: LOAN_APPLICATION_PRODUCT_CONFIGURABLE_QUESTION_SET_KEY INT NULL
		($17)::varchar, 	-- $17: NOTE VARCHAR(8000) NULL
		($18)::int, 	-- $18: GL_ACCT_LOAN_PRODUCT_GROUP_KEY INT NOT NULL
		($19)::int 	-- $19: GL_ACCT_LOAN_PRODUCT_GROUP_KEY_SUB_TYPE INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductEnableNewLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductEnableNewLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductEnableNewLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductEnableNewLoan_HIST;
SELECT * FROM STG.WINCHK_LoanProductEnableNewLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 714: LoanProductFeature
COPY INTO ARES.STG.SRC_LoanProductFeature_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_FEATURE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_FEATURE_TYPE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: DISPLAY_COLOR INT NULL
		($6)::datetime, 	-- $6: DATE_ENTERED datetime NOT NULL
		($7)::char, 	-- $7: ENTERED_BY CHAR(8000) NOT NULL
		($8)::datetime, 	-- $8: LAST_UPDATE_DATE datetime NOT NULL
		($9)::char 	-- $9: LAST_UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductFeature/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductFeature_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductFeature_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductFeature_HIST;
SELECT * FROM STG.WINCHK_LoanProductFeature_HIST;
[STATUS=tbd]
*/

-- // TABLE 715: LoanProductFeatureType
COPY INTO ARES.STG.SRC_LoanProductFeatureType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_FEATURE_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: LAST_UPDATE_DATE datetime NOT NULL
		($7)::char 	-- $7: LAST_UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductFeatureType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductFeatureType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductFeatureType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductFeatureType_HIST;
SELECT * FROM STG.WINCHK_LoanProductFeatureType_HIST;
[STATUS=tbd]
*/

-- // TABLE 716: LoanProductFinancialGroup
COPY INTO ARES.STG.SRC_LoanProductFinancialGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_FINANCIAL_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: FINANCIAL_GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: FINANCIAL_GROUP_ID CHAR(8000) NOT NULL
		($4)::boolean 	-- $4: IS_SECURED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductFinancialGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductFinancialGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductFinancialGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductFinancialGroup_HIST;
SELECT * FROM STG.WINCHK_LoanProductFinancialGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 717: LoanProductInternetZipCodeExclusion
COPY INTO ARES.STG.SRC_LoanProductInternetZipCodeExclusion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_INTERNET_ZIPCODE_EXCLUSION_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::varchar, 	-- $3: ZIPCODE VARCHAR(8000) NOT NULL
		($4)::int 	-- $4: LOAN_PRODUCT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductInternetZipCodeExclusion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductInternetZipCodeExclusion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductInternetZipCodeExclusion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductInternetZipCodeExclusion_HIST;
SELECT * FROM STG.WINCHK_LoanProductInternetZipCodeExclusion_HIST;
[STATUS=tbd]
*/

-- // TABLE 718: LoanProductRollover
COPY INTO ARES.STG.SRC_LoanProductRollover_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_ROLLOVER_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_KEY_PAID_LOAN INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_KEY_NEW_LOAN INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_UPDATED datetime NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductRollover/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductRollover_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductRollover_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductRollover_HIST;
SELECT * FROM STG.WINCHK_LoanProductRollover_HIST;
[STATUS=tbd]
*/

-- // TABLE 719: LoanProductTila
COPY INTO ARES.STG.SRC_LoanProductTila_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PRODUCT_TILA_KEY INT NOT NULL
		($2)::varchar, 	-- $2: TILA_ADDR_STREET VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: TILA_ADDRESS1 VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: TILA_BUILDING_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: TILA_BUILDING_NUM VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: TILA_CERT_NUM VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: TILA_CITY VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: TILA_COUNTRY CHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: TILA_COUNTY VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: TILA_FLAT_NUM VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: TILA_NAME VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: TILA_PHONE VARCHAR(8000) NOT NULL
		($13)::char, 	-- $13: TILA_STATE CHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: TILA_ZIPCODE VARCHAR(8000) NOT NULL
		($15)::char, 	-- $15: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($16)::smallint, 	-- $16: LOCATION smallint NOT NULL
		($17)::int, 	-- $17: LOANS_COUNT INT NOT NULL
		($18)::datetime, 	-- $18: DATE_ENTERED datetime NOT NULL
		($19)::char, 	-- $19: ENTERED_BY CHAR(8000) NOT NULL
		($20)::datetime, 	-- $20: DATE_UPDATED datetime NULL
		($21)::char, 	-- $21: UPDATED_BY CHAR(8000) NULL
		($22)::varchar, 	-- $22: TILA_ADDRESS_CSZ VARCHAR(8000) NULL
		($23)::varchar, 	-- $23: TILA_ADDRESS_LINE VARCHAR(8000) NULL
		($24)::varchar, 	-- $24: TILA_ADDRESS_LINE_1 VARCHAR(8000) NULL
		($25)::varchar, 	-- $25: TILA_ADDRESS_LINE_2 VARCHAR(8000) NULL
		($26)::varchar 	-- $26: TILA_ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanProductTila/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanProductTila_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanProductTila_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanProductTila_HIST;
SELECT * FROM STG.WINCHK_LoanProductTila_HIST;
[STATUS=tbd]
*/

-- // TABLE 720: LoanRateSource
COPY INTO ARES.STG.SRC_LoanRateSource_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOAN_RATE_SOURCE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanRateSource/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanRateSource_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanRateSource_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanRateSource_HIST;
SELECT * FROM STG.WINCHK_LoanRateSource_HIST;
[STATUS=tbd]
*/

-- // TABLE 721: LoanService
COPY INTO ARES.STG.SRC_LoanService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: SERVICE_DETAIL_KEY INT NOT NULL
		($4)::decimal, 	-- $4: SERVICE_COST DECIMAL(38,0) NOT NULL
		($5)::decimal, 	-- $5: PRICE DECIMAL(38,0) NOT NULL
		($6)::decimal, 	-- $6: MARK_DOWN DECIMAL(38,0) NOT NULL
		($7)::decimal, 	-- $7: SALES_TAX DECIMAL(38,0) NOT NULL
		($8)::decimal 	-- $8: DOWN_PAYMENT DECIMAL(38,0) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanService_HIST;
SELECT * FROM STG.WINCHK_LoanService_HIST;
[STATUS=tbd]
*/

-- // TABLE 722: LoanStatus
COPY INTO ARES.STG.SRC_LoanStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: LoanStatusKey CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanStatus_HIST;
SELECT * FROM STG.WINCHK_LoanStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 723: LoanStatusChange
COPY INTO ARES.STG.SRC_LoanStatusChange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_STATUS_CHANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: OLD_LOAN_STATUS CHAR(8000) NOT NULL
		($6)::char, 	-- $6: NEW_LOAN_STATUS CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: OLD_LOAN_DEFAULTED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: NEW_LOAN_DEFAULTED BOOLEAN NOT NULL
		($9)::char, 	-- $9: REASON_DEFAULTED CHAR(8000) NULL
		($10)::boolean, 	-- $10: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($11) 	-- $11: REVERSED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanStatusChange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanStatusChange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanStatusChange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanStatusChange_HIST;
SELECT * FROM STG.WINCHK_LoanStatusChange_HIST;
[STATUS=tbd]
*/

-- // TABLE 724: LoanType
COPY INTO ARES.STG.SRC_LoanType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: LoanTypeKey CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LoanType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LoanType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LoanType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LoanType_HIST;
SELECT * FROM STG.WINCHK_LoanType_HIST;
[STATUS=tbd]
*/

-- // TABLE 725: LocaleSetting
COPY INTO ARES.STG.SRC_LocaleSetting_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOCALE_SETTING_KEY INT NOT NULL
		($2)::char, 	-- $2: CURRENCY_SYMBOL CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: PHONE_FORMAT VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: ZIP_FORMAT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: ADDRESS_FORMAT VARCHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: DEBIT_CARD_MAX_LEN SMALLINT NOT NULL
		($7)::char, 	-- $7: SSN_OR_NIN CHAR(8000) NOT NULL
		($8)::boolean, 	-- $8: SHOW_ITEM BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: ENABLE_VERIFY_BANK BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: ENABLE_KBB BOOLEAN NOT NULL
		($11)::boolean 	-- $11: ENABLE_IAT BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LocaleSetting/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LocaleSetting_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LocaleSetting_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LocaleSetting_HIST;
SELECT * FROM STG.WINCHK_LocaleSetting_HIST;
[STATUS=tbd]
*/

-- // TABLE 726: LocaleTranslator
COPY INTO ARES.STG.SRC_LocaleTranslator_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOCALE_TRANSLATOR_KEY INT NOT NULL
		($2)::char, 	-- $2: COUNTRY_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: ENGLISH_VALUE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: LOCALE_VALUE VARCHAR(8000) NOT NULL
		($5)::boolean 	-- $5: EXACT_MATCH_ONLY BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LocaleTranslator/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LocaleTranslator_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LocaleTranslator_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LocaleTranslator_HIST;
SELECT * FROM STG.WINCHK_LocaleTranslator_HIST;
[STATUS=tbd]
*/

-- // TABLE 727: LocationTransactionProcessor
COPY INTO ARES.STG.SRC_LocationTransactionProcessor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::int, 	-- $2: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($3)::boolean 	-- $3: IS_ADASTRA BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/LocationTransactionProcessor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LocationTransactionProcessor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LocationTransactionProcessor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LocationTransactionProcessor_HIST;
SELECT * FROM STG.WINCHK_LocationTransactionProcessor_HIST;
[STATUS=tbd]
*/

-- // TABLE 728: LocationUS_ZipcodesXRef
COPY INTO ARES.STG.SRC_LocationUS_ZipcodesXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::varchar, 	-- $2: ZIPCODE VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: LENDER_KEY SMALLINT NOT NULL
		($4)::boolean, 	-- $4: ENABLED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: ENTERED_BY VARCHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: LAST_UPDATED TIMESTAMP_LTZ NULL
		($8)::varchar 	-- $8: UPDATED_BY VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/LocationUS_ZipcodesXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*LocationUS_ZipcodesXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_LocationUS_ZipcodesXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_LocationUS_ZipcodesXRef_HIST;
SELECT * FROM STG.WINCHK_LocationUS_ZipcodesXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 729: MaritalStatus
COPY INTO ARES.STG.SRC_MaritalStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: MARITAL_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MaritalStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MaritalStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MaritalStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MaritalStatus_HIST;
SELECT * FROM STG.WINCHK_MaritalStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 730: MarketingInvitation
COPY INTO ARES.STG.SRC_MarketingInvitation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MARKETING_INVITATION_KEY INT NOT NULL
		($2)::bigint, 	-- $2: RESERVATION_CODE BIGINT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NULL
		($4)::int, 	-- $4: LOAN_APPLICATION_KEY INT NULL
		($5)::varchar, 	-- $5: FULL_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: NAME_PREFIX VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: FIRST_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: MIDDLE_INITIAL VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: LAST_NAME VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: NAME_SUFFIX VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: SECONDARY_ADDRESS VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: PRIMARY_ADDRESS VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: STREET_NUMBER VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: STREET_PRE_DIRECTIONAL VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: STREET_NAME VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: STREET_SUFFIX VARCHAR(8000) NULL
		($17)::varchar, 	-- $17: STREET_POST_DIRECTIONAL VARCHAR(8000) NULL
		($18)::varchar, 	-- $18: UNIT_DESIGNATOR VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: UNIT_NUMBER VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: CITY_STATE_ZIP_ZIP_4 VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: CITY VARCHAR(8000) NOT NULL
		($22)::char, 	-- $22: STATE CHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: ZIP_CODE VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: ZIP_4 VARCHAR(8000) NULL
		($25)::varchar, 	-- $25: CARRIER_ROUTE_TYPE_WITH_NUMBER VARCHAR(8000) NULL
		($26)::int, 	-- $26: DELIVERY_POINT_BARCODE INT NULL
		($27)::varchar, 	-- $27: LINE_OF_TRAVEL VARCHAR(8000) NULL
		($28)::int, 	-- $28: STATE_COUNTY_CODE INT NULL
		($29)::boolean, 	-- $29: DISASTER_ZIP_FLAG BOOLEAN NULL
		($30)::varchar, 	-- $30: COUNTY_NAME VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: KEY_CODE VARCHAR(8000) NULL
		($32)::char, 	-- $32: MAIL_TYPE CHAR(8000) NULL
		($33)::date, 	-- $33: MAIL_DATE DATE NULL
		($34)::date, 	-- $34: EXPIRATION_DATE DATE NOT NULL
		($35)::decimal, 	-- $35: APPROVED_AMOUNT DECIMAL(38,0) NULL
		($36)::varchar, 	-- $36: IDENTIFICATION_INFO VARCHAR(8000) NOT NULL
		($37)::int, 	-- $37: LOAN_KEY INT NULL
		($38)::number, 	-- $38: MINIMUM_INCOME NUMBER(10,4) NULL
		($39)::int, 	-- $39: LOAN_PRODUCT_KEY INT NOT NULL
		($40)::boolean, 	-- $40: IS_FOR_TESTING BOOLEAN NOT NULL
		($41)::boolean, 	-- $41: IS_FOR_BRICK_MORTAR_STORES BOOLEAN NOT NULL
		($42)::boolean, 	-- $42: IS_FOR_INTERNET_LENDING BOOLEAN NOT NULL
		($43)::int 	-- $43: PERCENT_OF_INCOME INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MarketingInvitation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MarketingInvitation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MarketingInvitation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MarketingInvitation_HIST;
SELECT * FROM STG.WINCHK_MarketingInvitation_HIST;
[STATUS=tbd]
*/

-- // TABLE 731: MarketingInvitationHistory
COPY INTO ARES.STG.SRC_MarketingInvitationHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MARKETING_INVITATION_HISTORY_KEY INT NOT NULL
		($2)::bigint, 	-- $2: RESERVATION_CODE BIGINT NOT NULL
		($3)::datetime, 	-- $3: DATE_ENTERED datetime NOT NULL
		($4)::int, 	-- $4: ATTRIBUTES INT NOT NULL
		($5)::varchar 	-- $5: COMMENTS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/MarketingInvitationHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MarketingInvitationHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MarketingInvitationHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MarketingInvitationHistory_HIST;
SELECT * FROM STG.WINCHK_MarketingInvitationHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 732: MarketingInvitationOverrideType
COPY INTO ARES.STG.SRC_MarketingInvitationOverrideType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: MarketingInvitationOverrideTypeKey CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MarketingInvitationOverrideType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MarketingInvitationOverrideType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MarketingInvitationOverrideType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MarketingInvitationOverrideType_HIST;
SELECT * FROM STG.WINCHK_MarketingInvitationOverrideType_HIST;
[STATUS=tbd]
*/

-- // TABLE 733: MarketingInvitationSummary
COPY INTO ARES.STG.SRC_MarketingInvitationSummary_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MARKETING_INVITATION_SUMMARY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: KEY_CODE VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: STATE CHAR(8000) NOT NULL
		($4)::date, 	-- $4: MAIL_DATE DATE NULL
		($5)::date, 	-- $5: EXPIRATION_DATE DATE NOT NULL
		($6)::boolean, 	-- $6: IS_FOR_TESTING BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_FOR_BRICK_MORTAR_STORES BOOLEAN NOT NULL
		($8)::boolean 	-- $8: IS_FOR_INTERNET_LENDING BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MarketingInvitationSummary/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MarketingInvitationSummary_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MarketingInvitationSummary_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MarketingInvitationSummary_HIST;
SELECT * FROM STG.WINCHK_MarketingInvitationSummary_HIST;
[STATUS=tbd]
*/

-- // TABLE 734: Markets
COPY INTO ARES.STG.SRC_Markets_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: MARKET_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: MARKET_DESC VARCHAR(8000) NULL
		($3)::int 	-- $3: LOCALE_SETTING_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Markets/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Markets_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Markets_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Markets_HIST;
SELECT * FROM STG.WINCHK_Markets_HIST;
[STATUS=tbd]
*/

-- // TABLE 735: Message
COPY INTO ARES.STG.SRC_Message_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MESSAGE_KEY INT NOT NULL
		($2)::int, 	-- $2: MESSAGE_CLASS_KEY INT NOT NULL
		($3)::int, 	-- $3: MESSAGE_SCENARIO_KEY INT NOT NULL
		($4)::varchar, 	-- $4: MESSAGE_TEXT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: MESSAGE_DIRECTIVE VARCHAR(8000) NULL
		($6)::smallint 	-- $6: CLIENT_APPLICATION_KEY SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Message/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Message_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Message_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Message_HIST;
SELECT * FROM STG.WINCHK_Message_HIST;
[STATUS=tbd]
*/

-- // TABLE 736: MessageClass
COPY INTO ARES.STG.SRC_MessageClass_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MESSAGE_CLASS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: MESSAGE_CLASS_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: MESSAGE_CLASS_DESCRIPTION VARCHAR(8000) NULL
		($4)::int 	-- $4: MESSAGE_CLASS_ID INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MessageClass/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MessageClass_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MessageClass_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MessageClass_HIST;
SELECT * FROM STG.WINCHK_MessageClass_HIST;
[STATUS=tbd]
*/

-- // TABLE 737: MessageScenario
COPY INTO ARES.STG.SRC_MessageScenario_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MESSAGE_SCENARIO_KEY INT NOT NULL
		($2)::varchar, 	-- $2: MESSAGE_SCENARIO_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: MESSAGE_SCENARIO_DESCRIPTION VARCHAR(8000) NULL
		($4)::int, 	-- $4: MESSAGE_SCENARIO_ID INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MessageScenario/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MessageScenario_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MessageScenario_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MessageScenario_HIST;
SELECT * FROM STG.WINCHK_MessageScenario_HIST;
[STATUS=tbd]
*/

-- // TABLE 738: MimeType
COPY INTO ARES.STG.SRC_MimeType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: MIME_TYPE_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: MIME_TYPE VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: FILE_EXTENSION VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/MimeType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MimeType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MimeType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MimeType_HIST;
SELECT * FROM STG.WINCHK_MimeType_HIST;
[STATUS=tbd]
*/

-- // TABLE 739: MoneyGramLookupLog
COPY INTO ARES.STG.SRC_MoneyGramLookupLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MONEYGRAM_LOOKUP_LOG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: MONEYGRAM_LOOKUP_TYPE_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: REQUEST_CONTENT VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: RESPONSE_CONTENT VARCHAR(8000) NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyGramLookupLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyGramLookupLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyGramLookupLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyGramLookupLog_HIST;
SELECT * FROM STG.WINCHK_MoneyGramLookupLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 740: MoneyGramLookupType
COPY INTO ARES.STG.SRC_MoneyGramLookupType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: MONEYGRAM_LOOKUP_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyGramLookupType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyGramLookupType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyGramLookupType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyGramLookupType_HIST;
SELECT * FROM STG.WINCHK_MoneyGramLookupType_HIST;
[STATUS=tbd]
*/

-- // TABLE 741: MoneyGramTransmissionLog
COPY INTO ARES.STG.SRC_MoneyGramTransmissionLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MONEYGRAM_TRANSMISSION_LOG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: MONEYGRAM_TRANSMISSION_TYPE_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: REQUEST_CONTENT VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: RESPONSE_CONTENT VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: REFERENCE_NUMBER VARCHAR(8000) NULL
		($6)::int, 	-- $6: CUSTOMER_KEY INT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::int, 	-- $8: TRANS_DETAIL_KEY INT NULL
		to_timestamp_ntz($9), 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($10)::char 	-- $10: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyGramTransmissionLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyGramTransmissionLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyGramTransmissionLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyGramTransmissionLog_HIST;
SELECT * FROM STG.WINCHK_MoneyGramTransmissionLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 742: MoneyGramTransmissionType
COPY INTO ARES.STG.SRC_MoneyGramTransmissionType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: MONEYGRAM_TRANSMISSION_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyGramTransmissionType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyGramTransmissionType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyGramTransmissionType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyGramTransmissionType_HIST;
SELECT * FROM STG.WINCHK_MoneyGramTransmissionType_HIST;
[STATUS=tbd]
*/

-- // TABLE 743: MoneyOrderDailyTotal
COPY INTO ARES.STG.SRC_MoneyOrderDailyTotal_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MONEY_ORDER_DAILY_TOTAL_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE_ENTERED DATE NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::number 	-- $4: ISSUED_AMOUNT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyOrderDailyTotal/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyOrderDailyTotal_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyOrderDailyTotal_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyOrderDailyTotal_HIST;
SELECT * FROM STG.WINCHK_MoneyOrderDailyTotal_HIST;
[STATUS=tbd]
*/

-- // TABLE 744: MoneyOrderPrinter
COPY INTO ARES.STG.SRC_MoneyOrderPrinter_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MONEY_ORDER_PRINTER_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::varchar, 	-- $3: HOST_NAME VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: PORT_NUMBER INT NOT NULL
		($5)::int, 	-- $5: PROFILE_UNIT_NUMBER INT NOT NULL
		($6)::varchar, 	-- $6: API_VERSION VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_ENABLED BOOLEAN NOT NULL
		($8)::boolean 	-- $8: IS_PRODUCTION_PRINTER BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyOrderPrinter/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyOrderPrinter_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyOrderPrinter_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyOrderPrinter_HIST;
SELECT * FROM STG.WINCHK_MoneyOrderPrinter_HIST;
[STATUS=tbd]
*/

-- // TABLE 745: MoneyOrderPrinterStoreWindows
COPY INTO ARES.STG.SRC_MoneyOrderPrinterStoreWindows_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MONEY_ORDER_PRINTER_STORE_WINDOWS_KEY INT NOT NULL
		($2)::int, 	-- $2: MONEY_ORDER_PRINTER_KEY INT NOT NULL
		($3)::int 	-- $3: Store_Windows_Key INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MoneyOrderPrinterStoreWindows/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MoneyOrderPrinterStoreWindows_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MoneyOrderPrinterStoreWindows_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MoneyOrderPrinterStoreWindows_HIST;
SELECT * FROM STG.WINCHK_MoneyOrderPrinterStoreWindows_HIST;
[STATUS=tbd]
*/

-- // TABLE 746: MOStatus
COPY INTO ARES.STG.SRC_MOStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: Error VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: MONumber VARCHAR(8000) NULL
		($3)::smallint, 	-- $3: PrinterNumber SMALLINT NOT NULL
		($4)::char, 	-- $4: Teller CHAR(8000) NOT NULL
		($5)::number, 	-- $5: Amount NUMBER(19,4) NOT NULL
		($6)::smallint, 	-- $6: StatusCode smallint NOT NULL
		($7)::datetime, 	-- $7: SubmitTime datetime NOT NULL
		($8)::smallint, 	-- $8: Location smallint NOT NULL
		($9)::int, 	-- $9: SequenceNo INT NOT NULL
		($10)::varchar, 	-- $10: TELLER_FIRSTNAME VARCHAR(8000) NOT NULL
		($11)::varchar 	-- $11: TELLER_LASTNAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MOStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MOStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MOStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MOStatus_HIST;
SELECT * FROM STG.WINCHK_MOStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 747: MOStatusHistory
COPY INTO ARES.STG.SRC_MOStatusHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: Error VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: MONumber VARCHAR(8000) NULL
		($3)::smallint, 	-- $3: PrinterNumber SMALLINT NOT NULL
		($4)::char, 	-- $4: Teller CHAR(8000) NOT NULL
		($5)::number, 	-- $5: Amount NUMBER(19,4) NOT NULL
		($6)::smallint, 	-- $6: StatusCode smallint NOT NULL
		($7)::datetime, 	-- $7: SubmitTime datetime NOT NULL
		($8)::smallint, 	-- $8: Location smallint NOT NULL
		($9)::int, 	-- $9: SequenceNo INT NOT NULL
		($10)::varchar, 	-- $10: TELLER_FIRSTNAME VARCHAR(8000) NOT NULL
		($11)::varchar 	-- $11: TELLER_LASTNAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MOStatusHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MOStatusHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MOStatusHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MOStatusHistory_HIST;
SELECT * FROM STG.WINCHK_MOStatusHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 748: MPayAmort
COPY INTO ARES.STG.SRC_MPayAmort_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_AMORT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PAYMENT_NUM SMALLINT NOT NULL
		to_timestamp_ntz($4), 	-- $4: PAYMENT_DATE TIMESTAMP_LTZ NOT NULL
		($5)::number, 	-- $5: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PRINC_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: INTEREST_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: BALANCE NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: LOAN_FEE_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: CAB_INTEREST_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: DISCOUNT_AMT NUMBER(10,4) NOT NULL
		($13)::date, 	-- $13: ADJUSTED_PAYMENT_DATE DATE NOT NULL
		($14)::number, 	-- $14: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: ORIG_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($16)::int 	-- $16: SCHEDULED_PAYMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayAmort/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayAmort_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayAmort_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayAmort_HIST;
SELECT * FROM STG.WINCHK_MPayAmort_HIST;
[STATUS=tbd]
*/

-- // TABLE 749: MPayAmortDueDateChange
COPY INTO ARES.STG.SRC_MPayAmortDueDateChange_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_AMORT_DUE_DATE_CHANGE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: MPAY_AMORT_KEY INT NOT NULL
		($4)::date, 	-- $4: ADJUSTED_DUE_DATE DATE NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
		($9)::char 	-- $9: DELETED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayAmortDueDateChange/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayAmortDueDateChange_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayAmortDueDateChange_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayAmortDueDateChange_HIST;
SELECT * FROM STG.WINCHK_MPayAmortDueDateChange_HIST;
[STATUS=tbd]
*/

-- // TABLE 750: MPayInterest
COPY INTO ARES.STG.SRC_MPayInterest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_INTEREST_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number, 	-- $3: PRINC_DUE NUMBER(10,4) NOT NULL
		($4)::numeric, 	-- $4: INTEREST_ADDED NUMERIC NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: INTEREST_DATE TIMESTAMP_LTZ NOT NULL
		($7)::number, 	-- $7: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($8)::boolean, 	-- $8: IS_ACH_ADJ BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_ERR_ADJ BOOLEAN NOT NULL
		($10)::numeric, 	-- $10: TRANS_FEE_ADDED NUMERIC NOT NULL
		($11)::numeric, 	-- $11: CAB_INTEREST_ADDED NUMERIC NOT NULL
		($12)::boolean, 	-- $12: IS_DISCOUNT BOOLEAN NOT NULL
		($13)::number, 	-- $13: COLLECTIONS_AMT NUMBER(10,4) NULL
		($14)::int 	-- $14: TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayInterest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayInterest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayInterest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayInterest_HIST;
SELECT * FROM STG.WINCHK_MPayInterest_HIST;
[STATUS=tbd]
*/

-- // TABLE 751: MPayLoan
COPY INTO ARES.STG.SRC_MPayLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::numeric, 	-- $3: ANNUAL_RATE_PCT NUMERIC NOT NULL
		($4)::numeric, 	-- $4: MONTHLY_RATE_PCT NUMERIC NOT NULL
		($5)::numeric, 	-- $5: DAILY_RATE_PCT NUMERIC NOT NULL
		($6)::numeric, 	-- $6: ACTUARIAL_APR NUMERIC NOT NULL
		($7)::smallint, 	-- $7: ODD_DAYS_INTEREST_CNT smallint NOT NULL
		($8)::number, 	-- $8: ODD_DAYS_INTEREST_AMT NUMBER(10,4) NOT NULL
		($9)::decimal, 	-- $9: TRANS_FEE_PCT DECIMAL(38,0) NOT NULL
		($10)::smallint, 	-- $10: CYCLE_DAYS smallint NOT NULL
		($11)::smallint, 	-- $11: COLLECTION_DAYS smallint NOT NULL
		($12)::smallint, 	-- $12: AMORT_PAYMENT_CNT smallint NOT NULL
		($13)::number, 	-- $13: SCHED_LAST_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($14)::date, 	-- $14: SCHED_LAST_PAYMENT_DATE DATE NULL
		($15)::number, 	-- $15: LAST_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($16)::date, 	-- $16: LAST_PAYMENT_DATE DATE NULL
		($17)::number, 	-- $17: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		($18)::date, 	-- $18: NEXT_DUE_DATE DATE NULL
		($19)::number, 	-- $19: EST_FINANCE_CHARGE NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: CREDIT_LIMIT NUMBER(10,4) NOT NULL
		($21)::date, 	-- $21: CLOSED_DATE DATE NULL
		($22)::boolean, 	-- $22: IS_INTEREST_SUSPENDED BOOLEAN NOT NULL
		($23)::number, 	-- $23: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: PAYMENT_PLAN_FEE NUMBER(10,4) NOT NULL
		($26)::int, 	-- $26: PAYMENT_PLAN_LOAN_KEY INT NULL
		($27)::boolean, 	-- $27: IS_BUSINESS_LOAN BOOLEAN NOT NULL
		($28)::char, 	-- $28: TRANS_FEE_METHOD CHAR(8000) NOT NULL
		($29)::number, 	-- $29: TRANS_FEE_COLORADO_POSTPONE_AMT NUMBER(10,4) NOT NULL
		($30)::boolean, 	-- $30: DECLINED_AUTO_PAY BOOLEAN NOT NULL
		($31)::smallint, 	-- $31: SET_INACTIVE_ON_DAY smallint NOT NULL
		($32)::smallint, 	-- $32: SET_INACTIVE_ON_MISSED_PAYMENT_COUNT smallint NOT NULL
		($33)::smallint, 	-- $33: SET_INACTIVE_ON_DAY_AFTER_MISSED_PAYMENT_COUNT smallint NOT NULL
		($34)::smallint, 	-- $34: SELECTED_CYCLE_WEEKS smallint NOT NULL
		($35)::number, 	-- $35: COLL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: LEGAL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($37)::number, 	-- $37: LOAN_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: TRANS_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: INTEREST_DUE_BAL NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: PRINC_DUE_BAL NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: PAYMENT_DUE_BAL NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: PAYMENT_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($43)::numeric, 	-- $43: CAB_ANNUAL_RATE_PCT NUMERIC NOT NULL
		($44)::numeric, 	-- $44: CAB_MONTHLY_RATE_PCT NUMERIC NOT NULL
		($45)::numeric, 	-- $45: CAB_DAILY_RATE_PCT NUMERIC NOT NULL
		($46)::number, 	-- $46: CAB_COLL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: CAB_INTEREST_DUE_BAL NUMBER(10,4) NOT NULL
		($48)::date, 	-- $48: RESUME_INTEREST_DATE DATE NULL
		($49)::char, 	-- $49: APPLY_DISCOUNT_TO CHAR(8000) NOT NULL
		($50)::date, 	-- $50: INACTIVE_DATE DATE NULL
		($51)::number, 	-- $51: RI_FEE_PER_DEFAULT NUMBER(10,4) NOT NULL
		($52)::smallint, 	-- $52: RI_FEES_PER_LOAN smallint NOT NULL
		($53)::number, 	-- $53: NSF_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($54)::boolean, 	-- $54: CYCLE_DAYS_FIXED BOOLEAN NOT NULL
		($55)::boolean, 	-- $55: CYCLE_DUE_DATE_MATCH BOOLEAN NOT NULL
		($56)::boolean, 	-- $56: IS_DAY_AFTER_DUE BOOLEAN NOT NULL
		($57)::smallint, 	-- $57: MAX_RI_FEES_PER_LOAN_SERIES smallint NOT NULL
		($58)::boolean, 	-- $58: RI_FEE_REQUIRES_BANK_ACCOUNT BOOLEAN NOT NULL
		($59)::date, 	-- $59: ORIG_MATURITY_DATE DATE NULL
		($60)::date, 	-- $60: ADJUSTED_MATURITY_DATE DATE NOT NULL
		($61)::int, 	-- $61: CYCLES_PAST_DUE INT NOT NULL
		($62)::number, 	-- $62: INSURANCE_DUE_BAL NUMBER(10,4) NOT NULL
		($63)::number, 	-- $63: LOAN_FEE_CSO_AMORT_TOTAL NUMBER(10,4) NOT NULL
		($64)::number, 	-- $64: DUE_DATE_PAYMENT_QUEUE_BAL NUMBER(10,4) NOT NULL
		($65)::int, 	-- $65: WRITE_OFF_LOAN_PAYMENT_KEY INT NULL
		($66)::number, 	-- $66: INSURANCE_PAYMENT_QUEUE_BAL NUMBER(10,4) NOT NULL
		($67)::number, 	-- $67: COLLECTIONS_BAL NUMBER(10,4) NOT NULL
		($68)::numeric, 	-- $68: DAILY_INTEREST_AMT NUMERIC NOT NULL
		($69)::number, 	-- $69: DEFERRED_REVENUE_DUE_BAL NUMBER(10,4) NOT NULL
		($70)::number, 	-- $70: DEFERRED_REVENUE_TOTAL_BAL NUMBER(10,4) NOT NULL
		($71)::smallint, 	-- $71: SET_INACTIVE_ON_DAYS_PAST_DUE smallint NOT NULL
		($72)::boolean, 	-- $72: INTEREST_AMORT_TABLE_CAP_ENABLED BOOLEAN NOT NULL
		($73)::boolean, 	-- $73: INTEREST_BASED_ON_PAST_DUE_ENABLED BOOLEAN NOT NULL
		($74)::boolean, 	-- $74: INTEREST_CHARGED_AFTER_MATURITY_ENABLED BOOLEAN NOT NULL
		($75)::boolean, 	-- $75: INTEREST_CHARGED_ON_CAB_FEES BOOLEAN NOT NULL
		($76)::decimal, 	-- $76: LOAN_FEE_CSO_NON_REFUNDABLE_PCT DECIMAL(38,0) NOT NULL
		($77)::number, 	-- $77: NON_REFUNDABLE_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($78)::boolean, 	-- $78: APPLY_OVERPAYMENTS_TO_FUTURE_DUE_DATES BOOLEAN NOT NULL
		($79)::smallint, 	-- $79: SET_INACTIVE_ON_DAY_AFTER_MISSED_PARTIAL_PAYMENT_DAYS smallint NOT NULL
		($80)::smallint, 	-- $80: SET_INACTIVE_ON_DAY_AFTER_MISSED_PARTIAL_PAYMENT_PCT SMALLINT NOT NULL
		($81)::smallint 	-- $81: RESUME_INTEREST_TYPE_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayLoan_HIST;
SELECT * FROM STG.WINCHK_MPayLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 752: MPayLoanInSyncAdj
COPY INTO ARES.STG.SRC_MPayLoanInSyncAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_LOAN_IN_SYNC_ADJ_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::char, 	-- $5: LOAN_STATUS CHAR(8000) NOT NULL
		($6)::number, 	-- $6: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: RI_BALANCE NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PRINC_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: CASH_AMT NUMBER(19,4) NOT NULL
		($10)::number, 	-- $10: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($11)::boolean, 	-- $11: CHARGE_TRANS_FEE BOOLEAN NOT NULL
		($12)::number, 	-- $12: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($13)::boolean, 	-- $13: CHARGE_LIEN_FEE BOOLEAN NOT NULL
		to_timestamp_ntz($14), 	-- $14: ORIG_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($15), 	-- $15: ADJUSTED_DUE_DATE TIMESTAMP_LTZ NULL
		($16)::boolean, 	-- $16: DEFAULTED BOOLEAN NOT NULL
		to_timestamp_ntz($17), 	-- $17: DEFAULT_DATE TIMESTAMP_LTZ NULL
		($18)::number, 	-- $18: LAST_PAYMENT_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($19), 	-- $19: LAST_PAYMENT_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($20), 	-- $20: NEXT_DUE_DATE TIMESTAMP_LTZ NULL
		($21)::number, 	-- $21: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($22), 	-- $22: PENDING_SCHED_ACH_SENT TIMESTAMP_LTZ NULL
		($23)::number, 	-- $23: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($24)::char, 	-- $24: C_LOAN_STATUS CHAR(8000) NOT NULL
		($25)::number, 	-- $25: C_LOAN_BALANCE NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: C_RI_BALANCE NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: C_PRINC_AMT NUMBER(10,4) NOT NULL
		($28)::number, 	-- $28: C_CASH_AMT NUMBER(19,4) NOT NULL
		($29)::number, 	-- $29: C_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($30)::boolean, 	-- $30: C_CHARGE_TRANS_FEE BOOLEAN NOT NULL
		($31)::number, 	-- $31: C_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($32)::boolean, 	-- $32: C_CHARGE_LIEN_FEE BOOLEAN NOT NULL
		to_timestamp_ntz($33), 	-- $33: C_ORIG_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($34), 	-- $34: C_ADJUSTED_DUE_DATE TIMESTAMP_LTZ NULL
		($35)::boolean, 	-- $35: C_DEFAULTED BOOLEAN NOT NULL
		to_timestamp_ntz($36), 	-- $36: C_DEFAULT_DATE TIMESTAMP_LTZ NULL
		($37)::number, 	-- $37: C_LAST_PAYMENT_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($38), 	-- $38: C_LAST_PAYMENT_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($39), 	-- $39: C_NEXT_DUE_DATE TIMESTAMP_LTZ NULL
		($40)::number, 	-- $40: C_NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($41), 	-- $41: C_PENDING_SCHED_ACH_SENT TIMESTAMP_LTZ NULL
		($42)::number, 	-- $42: C_PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($43)::int, 	-- $43: C_ADJ_CNT_INT INT NOT NULL
		($44)::int, 	-- $44: C_ADJ_CNT_PENDING_ACH_INT INT NOT NULL
		($45)::int, 	-- $45: C_ADJ_CNT_LP_MPAY_RECORD INT NOT NULL
		($46)::number, 	-- $46: TRANS_FEE_COLORADO_POSTPONE_AMT NUMBER(10,4) NULL
		($47)::number, 	-- $47: C_TRANS_FEE_COLORADO_POSTPONE_AMT NUMBER(10,4) NULL
		($48)::number, 	-- $48: COLL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: LEGAL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($50)::number, 	-- $50: LOAN_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($51)::number, 	-- $51: TRANS_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($52)::number, 	-- $52: INTEREST_DUE_BAL NUMBER(10,4) NOT NULL
		($53)::number, 	-- $53: PRINC_DUE_BAL NUMBER(10,4) NOT NULL
		($54)::number, 	-- $54: C_COLL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($55)::number, 	-- $55: C_LEGAL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($56)::number, 	-- $56: C_LOAN_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($57)::number, 	-- $57: C_TRANS_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($58)::number, 	-- $58: C_INTEREST_DUE_BAL NUMBER(10,4) NOT NULL
		($59)::number, 	-- $59: C_PRINC_DUE_BAL NUMBER(10,4) NOT NULL
		($60)::number, 	-- $60: PAYMENT_DUE_BAL NUMBER(10,4) NOT NULL
		($61)::number, 	-- $61: PAYMENT_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($62)::number, 	-- $62: C_PAYMENT_DUE_BAL NUMBER(10,4) NOT NULL
		($63)::number, 	-- $63: C_PAYMENT_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($64)::number, 	-- $64: INVENTORY_AMT NUMBER(10,4) NOT NULL
		($65)::number, 	-- $65: C_INVENTORY_AMT NUMBER(10,4) NOT NULL
		($66)::number, 	-- $66: CAB_INTEREST_DUE_BAL NUMBER(10,4) NOT NULL
		($67)::number, 	-- $67: CAB_COLL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($68)::number, 	-- $68: C_CAB_INTEREST_DUE_BAL NUMBER(10,4) NOT NULL
		($69)::number, 	-- $69: C_CAB_COLL_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($70)::number, 	-- $70: LOAN_AMT NUMBER(10,4) NOT NULL
		($71)::number, 	-- $71: C_LOAN_AMT NUMBER(10,4) NOT NULL
		($72)::number, 	-- $72: NSF_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($73)::number, 	-- $73: C_NSF_FEE_PAST_DUE_BAL NUMBER(10,4) NOT NULL
		($74)::number, 	-- $74: REBATE_AMT NUMBER(10,4) NULL
		($75)::number, 	-- $75: C_REBATE_AMT NUMBER(10,4) NULL
		($76)::number, 	-- $76: DISC_AMT NUMBER(10,4) NULL
		($77)::number, 	-- $77: C_DISC_AMT NUMBER(10,4) NULL
		($78)::boolean, 	-- $78: IS_IN_LEGAL_STATUS BOOLEAN NULL
		($79)::int, 	-- $79: CYCLES_PAST_DUE INT NOT NULL
		($80)::int, 	-- $80: C_CYCLES_PAST_DUE INT NOT NULL
		($81)::number, 	-- $81: PENDING_PMT_AMT NUMBER(10,4) NOT NULL
		($82)::number, 	-- $82: C_PENDING_PMT_AMT NUMBER(10,4) NOT NULL
		($83)::date, 	-- $83: PENDING_PMT_DATE DATE NULL
		($84)::date, 	-- $84: C_PENDING_PMT_DATE DATE NULL
		($85)::number, 	-- $85: PENDING_PMT_PRINC NUMBER(10,4) NOT NULL
		($86)::number, 	-- $86: C_PENDING_PMT_PRINC NUMBER(10,4) NOT NULL
		($87)::number, 	-- $87: PENDING_PMT_INTEREST_CAP NUMBER(10,4) NOT NULL
		($88)::number, 	-- $88: C_PENDING_PMT_INTEREST_CAP NUMBER(10,4) NOT NULL
		($89)::number, 	-- $89: PENDING_PMT_CAB_INTEREST_CAP NUMBER(10,4) NOT NULL
		($90)::number, 	-- $90: C_PENDING_PMT_CAB_INTEREST_CAP NUMBER(10,4) NOT NULL
		($91)::number, 	-- $91: INSURANCE_DUE_BAL NUMBER(10,4) NOT NULL
		($92)::number, 	-- $92: C_INSURANCE_DUE_BAL NUMBER(10,4) NOT NULL
		($93)::number, 	-- $93: DUE_DATE_PAYMENT_QUEUE_BAL NUMBER(10,4) NOT NULL
		($94)::number, 	-- $94: C_DUE_DATE_PAYMENT_QUEUE_BAL NUMBER(10,4) NOT NULL
		($95)::number, 	-- $95: INSURANCE_PAYMENT_QUEUE_BAL NUMBER(10,4) NOT NULL
		($96)::number, 	-- $96: C_INSURANCE_PAYMENT_QUEUE_BAL NUMBER(10,4) NOT NULL
		($97)::number, 	-- $97: NON_REFUNDABLE_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($98)::number, 	-- $98: C_NON_REFUNDABLE_FEE_DUE_BAL NUMBER(10,4) NOT NULL
		($99)::int 	-- $99: C_ADJ_CNT_AMORT_RECORD INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayLoanInSyncAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayLoanInSyncAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayLoanInSyncAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayLoanInSyncAdj_HIST;
SELECT * FROM STG.WINCHK_MPayLoanInSyncAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 753: MPayRecalcAmortAdj
COPY INTO ARES.STG.SRC_MPayRecalcAmortAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_RECALC_AMORT_ADJ_KEY INT NOT NULL
		($2)::int, 	-- $2: MPAY_AMORT_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::number, 	-- $6: PAYMENT_AMT NUMBER(10,4) NOT NULL
		($7)::number 	-- $7: C_PAYMENT_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayRecalcAmortAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayRecalcAmortAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayRecalcAmortAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayRecalcAmortAdj_HIST;
SELECT * FROM STG.WINCHK_MPayRecalcAmortAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 754: MPayRecalcInterestAdj
COPY INTO ARES.STG.SRC_MPayRecalcInterestAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_RECALC_INTEREST_ADJ_KEY INT NOT NULL
		($2)::int, 	-- $2: MPAY_INTEREST_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::date, 	-- $6: INTEREST_DATE DATE NULL
		($7)::date, 	-- $7: C_INTEREST_DATE DATE NOT NULL
		($8)::numeric, 	-- $8: INTEREST_ADDED NUMERIC NOT NULL
		($9)::numeric, 	-- $9: C_INTEREST_ADDED NUMERIC NOT NULL
		($10)::numeric, 	-- $10: CAB_INTEREST_ADDED NUMERIC NOT NULL
		($11)::numeric, 	-- $11: C_CAB_INTEREST_ADDED NUMERIC NOT NULL
		($12)::numeric, 	-- $12: TRANS_FEE_ADDED NUMERIC NOT NULL
		($13)::numeric, 	-- $13: C_TRANS_FEE_ADDED NUMERIC NOT NULL
		($14)::number, 	-- $14: PRINC_DUE NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: C_PRINC_DUE NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: C_LOAN_BALANCE NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: COLLECTIONS_AMT NUMBER(10,4) NOT NULL
		($19)::number 	-- $19: C_COLLECTIONS_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayRecalcInterestAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayRecalcInterestAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayRecalcInterestAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayRecalcInterestAdj_HIST;
SELECT * FROM STG.WINCHK_MPayRecalcInterestAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 755: MPayRecalcLoanPaymentAdj
COPY INTO ARES.STG.SRC_MPayRecalcLoanPaymentAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: MPAY_RECALC_LOAN_PAYMENT_ADJ_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::smallint, 	-- $6: TRANSCODE SMALLINT NULL
		($7)::smallint, 	-- $7: C_TRANSCODE SMALLINT NOT NULL
		($8)::boolean, 	-- $8: ADD_TO_COLL BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: C_ADD_TO_COLL BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: REM_FROM_COLL BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: C_REM_FROM_COLL BOOLEAN NOT NULL
		($12)::number, 	-- $12: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: C_PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: COLL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: C_COLL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: LEGAL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: C_LEGAL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: LOAN_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: C_LOAN_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: TRANS_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: C_TRANS_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: INTEREST_DUE_PAID NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: C_INTEREST_DUE_PAID NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: PRINC_DUE_PAID NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: C_PRINC_DUE_PAID NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: PAYMENT_DUE_PAID NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: C_PAYMENT_DUE_PAID NUMBER(10,4) NOT NULL
		($28)::number, 	-- $28: PAYMENT_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: C_PAYMENT_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($30)::number, 	-- $30: CAB_COLL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: C_CAB_COLL_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: CAB_INTEREST_DUE_PAID NUMBER(10,4) NOT NULL
		($33)::number, 	-- $33: C_CAB_INTEREST_DUE_PAID NUMBER(10,4) NOT NULL
		($34)::number, 	-- $34: NSF_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: C_NSF_FEE_PAST_DUE_PAID NUMBER(10,4) NOT NULL
		to_timestamp_ntz($36), 	-- $36: LPDD_ORIG_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($37), 	-- $37: C_LPDD_ORIG_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($38), 	-- $38: LPDD_ADJUSTED_DUE_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($39), 	-- $39: C_LPDD_ADJUSTED_DUE_DATE TIMESTAMP_LTZ NULL
		($40)::number, 	-- $40: LPDD_PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: C_LPDD_PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: LPDD_COLLECTIONS_AMT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: C_LPDD_COLLECTIONS_AMT NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: LPDD_PENDING_ACH_AMT NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: C_LPDD_PENDING_ACH_AMT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: INSURANCE_DUE_PAID NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: C_INSURANCE_DUE_PAID NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: NON_REFUNDABLE_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: C_NON_REFUNDABLE_FEE_DUE_PAID NUMBER(10,4) NOT NULL
		($50)::number, 	-- $50: PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($51)::number, 	-- $51: C_PRINC_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($52)::number, 	-- $52: FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($53)::number, 	-- $53: C_FEES_AMT_FOR_INTEREST_CREDIT NUMBER(10,4) NOT NULL
		($54)::number, 	-- $54: INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($55)::number, 	-- $55: C_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($56)::number, 	-- $56: CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($57)::number, 	-- $57: C_CAB_INTEREST_DUE_CAP NUMBER(10,4) NOT NULL
		($58)::number, 	-- $58: LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($59)::number, 	-- $59: C_LOAN_FEE_DUE_CAP NUMBER(10,4) NOT NULL
		($60)::number, 	-- $60: INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
		($61)::number 	-- $61: C_INSURANCE_DUE_CAP NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MPayRecalcLoanPaymentAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MPayRecalcLoanPaymentAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MPayRecalcLoanPaymentAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MPayRecalcLoanPaymentAdj_HIST;
SELECT * FROM STG.WINCHK_MPayRecalcLoanPaymentAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 756: MSA
COPY INTO ARES.STG.SRC_MSA_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: MSA_CODE VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: TYP VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: CMSA VARCHAR(8000) NULL
		($5)::float 	-- $5: POPULATION FLOAT NULL
    FROM @ETL.INBOUND/SRC/Backfill/MSA/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*MSA_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_MSA_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_MSA_HIST;
SELECT * FROM STG.WINCHK_MSA_HIST;
[STATUS=tbd]
*/

-- // TABLE 757: NetSpendTrans
COPY INTO ARES.STG.SRC_NetSpendTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: NET_SPEND_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NULL
		($3)::smallint, 	-- $3: RESULT_NUM smallint NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: RESULT_STR VARCHAR(8000) NOT NULL
		($7)::int, 	-- $7: CARD_NUMBER_TOKEN INT NOT NULL
		($8)::int, 	-- $8: BIN INT NOT NULL
		($9)::smallint 	-- $9: CARD_NUMBER_LAST_FOUR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/NetSpendTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*NetSpendTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_NetSpendTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_NetSpendTrans_HIST;
SELECT * FROM STG.WINCHK_NetSpendTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 758: NoAdverseActionLetter
COPY INTO ARES.STG.SRC_NoAdverseActionLetter_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: NOAA_LETTER_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::varchar, 	-- $3: FIRST_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: LAST_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: ADDRESS VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: CITY VARCHAR(8000) NOT NULL
		($7)::char, 	-- $7: STATE CHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: ZIPCODE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($10)::char, 	-- $10: QUEUED_BY CHAR(8000) NOT NULL
		($11)::int, 	-- $11: RUN_MASTER_KEY INT NULL
		to_timestamp_ntz($12), 	-- $12: SENT_DATE TIMESTAMP_LTZ NULL
		($13)::varchar, 	-- $13: DENIAL_REASON_1 VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: DENIAL_REASON_2 VARCHAR(8000) NULL
		($15)::varchar 	-- $15: EXPORT_FILE_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/NoAdverseActionLetter/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*NoAdverseActionLetter_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_NoAdverseActionLetter_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_NoAdverseActionLetter_HIST;
SELECT * FROM STG.WINCHK_NoAdverseActionLetter_HIST;
[STATUS=tbd]
*/

-- // TABLE 759: NobleConfiguration
COPY INTO ARES.STG.SRC_NobleConfiguration_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: NOBLE_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: COLLECTIONS_EXCLUSION_TABLE_NAME VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: COLLECTIONS_TABLE_NAME VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: COURTESY_TABLE_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: INTERNET_LENDING_TABLE_NAME VARCHAR(8000) NULL
		($6)::int, 	-- $6: INTERNET_LENDING_LIST_ID INT NULL
		($7)::char, 	-- $7: TABLE_NAME_PREFIX CHAR(8000) NULL
		($8)::smallint, 	-- $8: TIME_OFFSET_FROM_NOBLE SMALLINT NOT NULL
		($9)::char, 	-- $9: TELLER_ID CHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/NobleConfiguration/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*NobleConfiguration_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_NobleConfiguration_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_NobleConfiguration_HIST;
SELECT * FROM STG.WINCHK_NobleConfiguration_HIST;
[STATUS=tbd]
*/

-- // TABLE 760: NobleConfigurationHistory
COPY INTO ARES.STG.SRC_NobleConfigurationHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: NOBLE_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: COLLECTIONS_EXCLUSION_TABLE_NAME VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: COLLECTIONS_TABLE_NAME VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: COURTESY_TABLE_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: INTERNET_LENDING_TABLE_NAME VARCHAR(8000) NULL
		($6)::int, 	-- $6: INTERNET_LENDING_LIST_ID INT NULL
		($7)::char, 	-- $7: TABLE_NAME_PREFIX CHAR(8000) NULL
		($8)::smallint, 	-- $8: TIME_OFFSET_FROM_NOBLE SMALLINT NOT NULL
		($9)::char, 	-- $9: TELLER_ID CHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/NobleConfigurationHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*NobleConfigurationHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_NobleConfigurationHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_NobleConfigurationHistory_HIST;
SELECT * FROM STG.WINCHK_NobleConfigurationHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 761: NoteType
COPY INTO ARES.STG.SRC_NoteType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: NOTE_TYPE_KEY INT NOT NULL
		($2)::int, 	-- $2: NOTE_TYPE_VALUE INT NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::date, 	-- $4: DATE_ENTERED DATE NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/NoteType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*NoteType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_NoteType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_NoteType_HIST;
SELECT * FROM STG.WINCHK_NoteType_HIST;
[STATUS=tbd]
*/

-- // TABLE 762: NotificationType
COPY INTO ARES.STG.SRC_NotificationType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: NOTIFICATION_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/NotificationType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*NotificationType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_NotificationType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_NotificationType_HIST;
SELECT * FROM STG.WINCHK_NotificationType_HIST;
[STATUS=tbd]
*/

-- // TABLE 763: OCRRegion
COPY INTO ARES.STG.SRC_OCRRegion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OCRREGION_KEY INT NOT NULL
		($2)::smallint, 	-- $2: SNIPPET SMALLINT NOT NULL
		($3)::boolean, 	-- $3: ENABLE BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: FRONT BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: MILLIMETERS BOOLEAN NOT NULL
		($6)::smallint, 	-- $6: X smallint NOT NULL
		($7)::smallint, 	-- $7: Y smallint NOT NULL
		($8)::smallint, 	-- $8: WIDTH smallint NOT NULL
		($9)::smallint, 	-- $9: HEIGHT smallint NOT NULL
		($10)::smallint, 	-- $10: ORIENTATION SMALLINT NOT NULL
		($11)::smallint, 	-- $11: COLOR SMALLINT NOT NULL
		($12)::smallint, 	-- $12: SIDE SMALLINT NOT NULL
		($13)::smallint, 	-- $13: OCRFLAGS smallint NOT NULL
		($14)::smallint 	-- $14: COMPRESSION SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OCRRegion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OCRRegion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OCRRegion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OCRRegion_HIST;
SELECT * FROM STG.WINCHK_OCRRegion_HIST;
[STATUS=tbd]
*/

-- // TABLE 764: OEndLoanInSyncAdj
COPY INTO ARES.STG.SRC_OEndLoanInSyncAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_CatRarrAlias_Key INT NOT NULL
		($2)::varchar, 	-- $2: Alias_Name VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: Web_Call_Category_Key INT NULL
		($4)::int, 	-- $4: WEB_CALL_REASON_KEY INT NULL
		($5)::int, 	-- $5: WEB_CALL_ACTION_KEY INT NULL
		($6)::int, 	-- $6: WEB_CALL_RESULT1_KEY INT NULL
		($7)::int, 	-- $7: WEB_CALL_RESULT2_KEY INT NULL
		($8)::int 	-- $8: WEB_CALL_RARR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OEndLoanInSyncAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OEndLoanInSyncAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OEndLoanInSyncAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OEndLoanInSyncAdj_HIST;
SELECT * FROM STG.WINCHK_OEndLoanInSyncAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 765: OEndLoanInSyncAdjDetail
COPY INTO ARES.STG.SRC_OEndLoanInSyncAdjDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OEND_LOAN_INSYNC_ADJ_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: OEND_LOAN_INSYNC_ADJ_KEY INT NOT NULL
		($3)::varchar, 	-- $3: TABLE_NAME VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: TABLE_KEY INT NOT NULL
		($5)::varchar, 	-- $5: COLUMN_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NULL
		($7)::varchar 	-- $7: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/OEndLoanInSyncAdjDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OEndLoanInSyncAdjDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OEndLoanInSyncAdjDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OEndLoanInSyncAdjDetail_HIST;
SELECT * FROM STG.WINCHK_OEndLoanInSyncAdjDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 766: OpenEndInterest
COPY INTO ARES.STG.SRC_OpenEndInterest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_INTEREST_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number, 	-- $3: PRINC_DUE NUMBER(10,4) NOT NULL
		($4)::numeric, 	-- $4: INTEREST_ADDED NUMERIC NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: INTEREST_DATE TIMESTAMP_LTZ NOT NULL
		($7)::int, 	-- $7: OPEN_END_LOAN_STMT_KEY INT NULL
		($8)::number, 	-- $8: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($9)::numeric, 	-- $9: CSO_LENDER_INTEREST_ADDED NUMERIC NOT NULL
		($10)::boolean, 	-- $10: IS_ACH_ADJ BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_ERR_ADJ BOOLEAN NOT NULL
		($12)::number, 	-- $12: CAB_FEE_BALANCE NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: COLLECTIONS_AMT NUMBER(10,4) NULL
		($14)::boolean, 	-- $14: IS_GRACE_PERIOD_ADJ BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: IS_STATEMENT_ADJ BOOLEAN NOT NULL
		($16)::boolean, 	-- $16: IS_REBOOTED BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: IS_ACH_VOID_ADJ BOOLEAN NOT NULL
		($18)::smallint, 	-- $18: INTEREST_TYPE_KEY SMALLINT NOT NULL
		($19)::int 	-- $19: TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndInterest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndInterest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndInterest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndInterest_HIST;
SELECT * FROM STG.WINCHK_OpenEndInterest_HIST;
[STATUS=tbd]
*/

-- // TABLE 767: OpenEndInterestRate
COPY INTO ARES.STG.SRC_OpenEndInterestRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_INTEREST_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::date, 	-- $3: INTEREST_START_DATE DATE NOT NULL
		($4)::numeric, 	-- $4: ANNUAL_RATE_PCT NUMERIC NOT NULL
		($5)::numeric, 	-- $5: MONTHLY_RATE_PCT NUMERIC NOT NULL
		($6)::numeric, 	-- $6: DAILY_RATE_PCT NUMERIC NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8) 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndInterestRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndInterestRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndInterestRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndInterestRate_HIST;
SELECT * FROM STG.WINCHK_OpenEndInterestRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 768: OpenEndInterestStream
COPY INTO ARES.STG.SRC_OpenEndInterestStream_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_INTEREST_STREAM_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_INTEREST_KEY INT NOT NULL
		($3)::int, 	-- $3: OPEN_END_LOAN_STREAM_KEY INT NOT NULL
		($4)::decimal, 	-- $4: INTEREST_ADDED DECIMAL(38,0) NOT NULL
		($5)::decimal, 	-- $5: CSO_LENDER_INTEREST_ADDED DECIMAL(38,0) NOT NULL
		($6)::number, 	-- $6: PRINC_DUE NUMBER(10,4) NOT NULL
		($7)::number 	-- $7: LOAN_BALANCE NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndInterestStream/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndInterestStream_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndInterestStream_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndInterestStream_HIST;
SELECT * FROM STG.WINCHK_OpenEndInterestStream_HIST;
[STATUS=tbd]
*/

-- // TABLE 769: OpenEndLoan
COPY INTO ARES.STG.SRC_OpenEndLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CUSTOMER_LEAD_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NULL
		($3)::char, 	-- $3: LEAD_SOURCE CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: ORIG_LOCATION smallint NOT NULL
		($5)::smallint, 	-- $5: SUPERSTORE smallint NOT NULL
		($6)::smallint, 	-- $6: SATELLITE smallint NULL
		($7)::int, 	-- $7: CUSTOMER_LEAD_STATUS_KEY INT NOT NULL
		($8)::date, 	-- $8: STATUS_CHANGE_DATE DATE NOT NULL
		($9)::int, 	-- $9: CUSTOMER_LEAD_REASON_KEY INT NULL
		($10)::int, 	-- $10: LOAN_APPLICATION_KEY INT NULL
		($11)::int, 	-- $11: CUSTOMER_KEY INT NULL
		($12)::int, 	-- $12: LOAN_KEY INT NULL
		($13)::varchar, 	-- $13: FIRSTNAME VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: MIDNAME VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: LASTNAME VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: SSN VARCHAR(8000) NULL
		($17)::date, 	-- $17: DOB DATE NULL
		($18)::varchar, 	-- $18: HOME_ADDR_NUM VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: HOME_ADDR_PRE_DIR VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: HOME_ADDR_STREET VARCHAR(8000) NULL
		($21)::varchar, 	-- $21: HOME_ADDR_SUFFIX VARCHAR(8000) NULL
		($22)::varchar, 	-- $22: HOME_ADDR_POST_DIR VARCHAR(8000) NULL
		($23)::varchar, 	-- $23: HOME_ADDR_SUITE VARCHAR(8000) NULL
		($24)::varchar, 	-- $24: HOME_ADDR_SUITE_NUM VARCHAR(8000) NULL
		($25)::varchar, 	-- $25: HOME_CITY VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: HOME_STATE VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: HOME_ZIPCODE VARCHAR(8000) NULL
		($28)::date, 	-- $28: RESIDENCE_SINCE DATE NULL
		($29)::smallint, 	-- $29: OWNRENTOTHER SMALLINT NULL
		($30)::varchar, 	-- $30: HOME_PHONE VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: CELL_PHONE VARCHAR(8000) NULL
		($32)::int, 	-- $32: MOBILE_CARRIER INT NULL
		($33)::varchar, 	-- $33: WORK_PHONE VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: WORK_PHONE_EXT VARCHAR(8000) NULL
		($35)::char, 	-- $35: PREFERRED_CONTACT CHAR(8000) NULL
		($36)::varchar, 	-- $36: EMAIL VARCHAR(8000) NULL
		($37)::char, 	-- $37: PAY_CYCLE CHAR(8000) NULL
		($38)::decimal, 	-- $38: GROSS_INCOME DECIMAL(38,0) NULL
		($39)::decimal, 	-- $39: NET_INCOME DECIMAL(38,0) NULL
		($40)::decimal, 	-- $40: PVBD_INCOME DECIMAL(38,0) NULL
		($41)::varchar, 	-- $41: BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($43)::date, 	-- $43: APPT_FOLLOW_DATE DATE NULL
		($44)::char, 	-- $44: APPT_FOLLOW_TIME CHAR(8000) NULL
		to_timestamp_ntz($45), 	-- $45: DATE_UPDATED TIMESTAMP_LTZ NULL
		($46)::char, 	-- $46: TELLER_UPDATED CHAR(8000) NULL
		($47)::int, 	-- $47: VISITOR_KEY INT NULL
		($48)::boolean, 	-- $48: MARKETING_CONSENT BOOLEAN NULL
		($49)::int, 	-- $49: WEB_LEAD_KEY INT NULL
		($50)::char, 	-- $50: LOAN_TYPE CHAR(8000) NULL
		($51)::char, 	-- $51: PRODUCT_TYPE CHAR(8000) NULL
		to_timestamp_ntz($52), 	-- $52: FIRST_OPENED_DATE TIMESTAMP_LTZ NULL
		($53)::varchar, 	-- $53: HOME_ADDRESS_LINE VARCHAR(8000) NULL
		($54)::varchar 	-- $54: SSN_LAST_FOUR VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoan_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 770: OpenEndLoanCycle
COPY INTO ARES.STG.SRC_OpenEndLoanCycle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_CYCLE_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: PAY_CYCLE CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: PAY_CYCLE_DAY SMALLINT NOT NULL
		($6)::smallint, 	-- $6: PAY_CYCLE_1ST SMALLINT NOT NULL
		($7)::smallint, 	-- $7: PAY_CYCLE_2ND SMALLINT NOT NULL
		($8)::date, 	-- $8: BIWEEK_BASE DATE NULL
		($9)::char, 	-- $9: PAY_CYCLE_MONTH_INT CHAR(8000) NOT NULL
		($10)::boolean, 	-- $10: PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH BOOLEAN NOT NULL
		($11)::int, 	-- $11: LOAN_PAYMENT_KEY INT NOT NULL
		($12)::boolean, 	-- $12: IS_USE_PAY_CYCLE BOOLEAN NOT NULL
		($13)::int, 	-- $13: STATEMENT_DAYS INT NOT NULL
		($14)::int 	-- $14: PAYMENT_DAYS INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanCycle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanCycle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanCycle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanCycle_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanCycle_HIST;
[STATUS=tbd]
*/

-- // TABLE 771: OpenEndLoanCycleCustomerSnapshot
COPY INTO ARES.STG.SRC_OpenEndLoanCycleCustomerSnapshot_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_CYCLE_CUSTOMER_SNAPSHOT_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_LOAN_CYCLE_KEY INT NOT NULL
		($3)::char, 	-- $3: PAY_CYCLE CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: PAY_CYCLE_DAY SMALLINT NOT NULL
		($5)::smallint, 	-- $5: PAY_CYCLE_1ST SMALLINT NOT NULL
		($6)::smallint, 	-- $6: PAY_CYCLE_2ND SMALLINT NOT NULL
		($7)::date, 	-- $7: BIWEEK_BASE DATE NULL
		($8)::char, 	-- $8: PAY_CYCLE_MONTH_INT CHAR(8000) NOT NULL
		($9)::boolean 	-- $9: PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanCycleCustomerSnapshot/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanCycleCustomerSnapshot_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanCycleCustomerSnapshot_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanCycleCustomerSnapshot_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanCycleCustomerSnapshot_HIST;
[STATUS=tbd]
*/

-- // TABLE 772: OpenEndLoanStatement
COPY INTO ARES.STG.SRC_OpenEndLoanStatement_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_STMT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PAYMENT_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NOT NULL
		($6)::datetime, 	-- $6: DATE_ENTERED datetime NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::smallint, 	-- $8: STATEMENT_NUM smallint NOT NULL
		($9)::number, 	-- $9: CREDIT_LIMIT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: CREDIT_AVAIL NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: AVG_DAILY_BAL NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: PER_FIN_CHARGE NUMBER(10,4) NOT NULL
		($13)::numeric, 	-- $13: EFFECTIVE_APR NUMERIC NULL
		to_timestamp_ntz($14), 	-- $14: START_DATE TIMESTAMP_LTZ NOT NULL
		($15)::number, 	-- $15: START_BALANCE NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: START_PRINC NUMBER(10,4) NOT NULL
		to_timestamp_ntz($17), 	-- $17: END_DATE TIMESTAMP_LTZ NOT NULL
		($18)::number, 	-- $18: END_BALANCE NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: END_PRINC NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($21), 	-- $21: PAST_DUE_DATE TIMESTAMP_LTZ NULL
		($22)::number, 	-- $22: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($27), 	-- $27: CURR_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($28)::number, 	-- $28: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($30)::number, 	-- $30: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($33), 	-- $33: NEXT_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($34)::number, 	-- $34: NEW_TRANS_FEES NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: NEW_LIEN_FEES NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: NEW_ACTIVITY_FEES NUMBER(10,4) NOT NULL
		($37)::number, 	-- $37: NEW_COLL_FEES NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: NEW_INTEREST NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: NEW_LOAN_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: NEW_PAST_DUE_PAYMENTS NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: NEW_FEE_PAYMENTS NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: NEW_INTEREST_PAYMENTS NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: NEW_PRINC_PAYMENTS NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: NEW_PAYMENTS NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: TOT_TRANS_FEES NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: TOT_LIEN_FEES NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: TOT_ACTIVITY_FEES NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: TOT_COLL_FEES NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: TOT_INTEREST NUMBER(10,4) NOT NULL
		($50)::number, 	-- $50: TOT_LOAN_AMT NUMBER(19,4) NOT NULL
		($51)::number, 	-- $51: TOT_PAYMENTS NUMBER(19,4) NOT NULL
		($52)::number, 	-- $52: YTD_TRANS_FEES_AMT NUMBER(10,4) NOT NULL
		($53)::number, 	-- $53: YTD_ACTIVITY_FEES_AMT NUMBER(10,4) NOT NULL
		($54)::number, 	-- $54: YTD_COLL_FEES_AMT NUMBER(10,4) NOT NULL
		($55)::number, 	-- $55: YTD_INTEREST_AMT NUMBER(10,4) NOT NULL
		($56)::smallint, 	-- $56: MAIL_STATUS SMALLINT NOT NULL
		($57)::boolean, 	-- $57: MAILED_WITH_IMAGE BOOLEAN NOT NULL
		($58)::number, 	-- $58: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($59)::number, 	-- $59: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($60)::number, 	-- $60: NEW_CSO_LENDER_INTEREST NUMBER(10,4) NOT NULL
		($61)::number, 	-- $61: TOT_CSO_LENDER_INTEREST NUMBER(10,4) NOT NULL
		($62)::number, 	-- $62: YTD_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($63)::number, 	-- $63: NEW_CSO_LENDER_INTEREST_PAYMENTS NUMBER(10,4) NOT NULL
		($64)::boolean, 	-- $64: IS_FINAL_STATEMENT BOOLEAN NOT NULL
		($65)::datetime, 	-- $65: ADJUSTED_DUE_DATE datetime NOT NULL
		($66)::number, 	-- $66: FINAL_EST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($67)::number, 	-- $67: FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($68)::int, 	-- $68: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NULL
		($69)::date, 	-- $69: DATE_TO_PROCESS DATE NOT NULL
		to_timestamp_ntz($70), 	-- $70: PROCESSED_DATE TIMESTAMP_LTZ NULL
		($71)::number, 	-- $71: START_BALANCE_WITH_GRACE NUMBER(10,4) NULL
		($72)::number, 	-- $72: END_BALANCE_WITH_GRACE NUMBER(10,4) NULL
		($73)::number, 	-- $73: NEW_INTEREST_FROM_CURRENT_CYCLE_ADVANCES NUMBER(10,4) NULL
		($74)::number, 	-- $74: NEW_INTEREST_FROM_PREVIOUS_CYCLE_ADVANCES NUMBER(10,4) NULL
		($75)::number, 	-- $75: NEW_INTEREST_WAIVABLE NUMBER(10,4) NULL
		($76)::number, 	-- $76: NEW_INTEREST_PAYMENTS_PREVIOUS_CYCLE_ADVANCES NUMBER(10,4) NULL
		($77)::number, 	-- $77: NEW_INTEREST_PAYMENTS_CURRENT_CYCLE_ADVANCES NUMBER(10,4) NULL
		($78)::number, 	-- $78: PREVIOUS_NEW_INTEREST_POSTED NUMBER(10,4) NULL
		($79)::numeric, 	-- $79: EFFECTIVE_APR_NEW_INTEREST_FROM_PREVIOUS_CYCLE_ADVANCES NUMERIC NULL
		($80)::numeric, 	-- $80: EFFECTIVE_APR_PREVIOUS_NEW_INTEREST_POSTED NUMERIC NULL
		($81)::number, 	-- $81: YTD_INTEREST_POSTED_AMT NUMBER(10,4) NULL
		($82)::number, 	-- $82: AVG_DAILY_BAL_CURRENT_CYCLE_ADVANCES NUMBER(10,4) NULL
		($83)::number, 	-- $83: AVG_DAILY_BAL_PREVIOUS_CYCLE_ADVANCES NUMBER(10,4) NULL
		($84)::number, 	-- $84: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($85)::number, 	-- $85: NEW_INSURANCE_FEES NUMBER(10,4) NOT NULL
		($86)::number, 	-- $86: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($87)::number, 	-- $87: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($88)::number, 	-- $88: YTD_INSURANCE_FEES NUMBER(10,4) NOT NULL
		($89)::number, 	-- $89: TOT_INSURANCE_FEES NUMBER(10,4) NOT NULL
		($90)::number, 	-- $90: DUE_DATE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($91)::number, 	-- $91: INSURANCE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($92)::int, 	-- $92: REBOOT_LOAN_PAYMENT_KEY INT NULL
		to_timestamp_ntz($93), 	-- $93: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($94) 	-- $94: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanStatement/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanStatement_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanStatement_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanStatement_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanStatement_HIST;
[STATUS=tbd]
*/

-- // TABLE 773: OpenEndLoanStatementHistory
COPY INTO ARES.STG.SRC_OpenEndLoanStatementHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_STMT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PAYMENT_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NOT NULL
		($6)::datetime, 	-- $6: DATE_ENTERED datetime NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::smallint, 	-- $8: STATEMENT_NUM smallint NOT NULL
		($9)::number, 	-- $9: CREDIT_LIMIT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: CREDIT_AVAIL NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: AVG_DAILY_BAL NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: PER_FIN_CHARGE NUMBER(10,4) NOT NULL
		($13)::numeric, 	-- $13: EFFECTIVE_APR NUMERIC NULL
		to_timestamp_ntz($14), 	-- $14: START_DATE TIMESTAMP_LTZ NOT NULL
		($15)::number, 	-- $15: START_BALANCE NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: START_PRINC NUMBER(10,4) NOT NULL
		to_timestamp_ntz($17), 	-- $17: END_DATE TIMESTAMP_LTZ NOT NULL
		($18)::number, 	-- $18: END_BALANCE NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: END_PRINC NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($21), 	-- $21: PAST_DUE_DATE TIMESTAMP_LTZ NULL
		($22)::number, 	-- $22: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($27), 	-- $27: CURR_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($28)::number, 	-- $28: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($30)::number, 	-- $30: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($33), 	-- $33: NEXT_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($34)::number, 	-- $34: NEW_TRANS_FEES NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: NEW_LIEN_FEES NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: NEW_ACTIVITY_FEES NUMBER(10,4) NOT NULL
		($37)::number, 	-- $37: NEW_COLL_FEES NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: NEW_INTEREST NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: NEW_LOAN_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: NEW_PAST_DUE_PAYMENTS NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: NEW_FEE_PAYMENTS NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: NEW_INTEREST_PAYMENTS NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: NEW_PRINC_PAYMENTS NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: NEW_PAYMENTS NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: TOT_TRANS_FEES NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: TOT_LIEN_FEES NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: TOT_ACTIVITY_FEES NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: TOT_COLL_FEES NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: TOT_INTEREST NUMBER(10,4) NOT NULL
		($50)::number, 	-- $50: TOT_LOAN_AMT NUMBER(19,4) NOT NULL
		($51)::number, 	-- $51: TOT_PAYMENTS NUMBER(19,4) NOT NULL
		($52)::number, 	-- $52: YTD_TRANS_FEES_AMT NUMBER(10,4) NOT NULL
		($53)::number, 	-- $53: YTD_ACTIVITY_FEES_AMT NUMBER(10,4) NOT NULL
		($54)::number, 	-- $54: YTD_COLL_FEES_AMT NUMBER(10,4) NOT NULL
		($55)::number, 	-- $55: YTD_INTEREST_AMT NUMBER(10,4) NOT NULL
		($56)::smallint, 	-- $56: MAIL_STATUS SMALLINT NOT NULL
		($57)::boolean, 	-- $57: MAILED_WITH_IMAGE BOOLEAN NOT NULL
		($58)::number, 	-- $58: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($59)::number, 	-- $59: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($60)::number, 	-- $60: NEW_CSO_LENDER_INTEREST NUMBER(10,4) NOT NULL
		($61)::number, 	-- $61: TOT_CSO_LENDER_INTEREST NUMBER(10,4) NOT NULL
		($62)::number, 	-- $62: YTD_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($63)::number, 	-- $63: NEW_CSO_LENDER_INTEREST_PAYMENTS NUMBER(10,4) NOT NULL
		($64)::boolean, 	-- $64: IS_FINAL_STATEMENT BOOLEAN NOT NULL
		($65)::datetime, 	-- $65: ADJUSTED_DUE_DATE datetime NOT NULL
		($66)::number, 	-- $66: FINAL_EST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($67)::number, 	-- $67: FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($68)::int, 	-- $68: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NULL
		($69)::date, 	-- $69: DATE_TO_PROCESS DATE NOT NULL
		to_timestamp_ntz($70), 	-- $70: PROCESSED_DATE TIMESTAMP_LTZ NULL
		($71)::number, 	-- $71: START_BALANCE_WITH_GRACE NUMBER(10,4) NULL
		($72)::number, 	-- $72: END_BALANCE_WITH_GRACE NUMBER(10,4) NULL
		($73)::number, 	-- $73: NEW_INTEREST_FROM_CURRENT_CYCLE_ADVANCES NUMBER(10,4) NULL
		($74)::number, 	-- $74: NEW_INTEREST_FROM_PREVIOUS_CYCLE_ADVANCES NUMBER(10,4) NULL
		($75)::number, 	-- $75: NEW_INTEREST_WAIVABLE NUMBER(10,4) NULL
		($76)::number, 	-- $76: NEW_INTEREST_PAYMENTS_PREVIOUS_CYCLE_ADVANCES NUMBER(10,4) NULL
		($77)::number, 	-- $77: NEW_INTEREST_PAYMENTS_CURRENT_CYCLE_ADVANCES NUMBER(10,4) NULL
		($78)::number, 	-- $78: PREVIOUS_NEW_INTEREST_POSTED NUMBER(10,4) NULL
		($79)::numeric, 	-- $79: EFFECTIVE_APR_NEW_INTEREST_FROM_PREVIOUS_CYCLE_ADVANCES NUMERIC NULL
		($80)::numeric, 	-- $80: EFFECTIVE_APR_PREVIOUS_NEW_INTEREST_POSTED NUMERIC NULL
		($81)::number, 	-- $81: YTD_INTEREST_POSTED_AMT NUMBER(10,4) NULL
		($82)::number, 	-- $82: AVG_DAILY_BAL_CURRENT_CYCLE_ADVANCES NUMBER(10,4) NULL
		($83)::number, 	-- $83: AVG_DAILY_BAL_PREVIOUS_CYCLE_ADVANCES NUMBER(10,4) NULL
		($84)::number, 	-- $84: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($85)::number, 	-- $85: NEW_INSURANCE_FEES NUMBER(10,4) NOT NULL
		($86)::number, 	-- $86: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($87)::number, 	-- $87: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($88)::number, 	-- $88: YTD_INSURANCE_FEES NUMBER(10,4) NOT NULL
		($89)::number, 	-- $89: TOT_INSURANCE_FEES NUMBER(10,4) NOT NULL
		($90)::number, 	-- $90: DUE_DATE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($91)::number, 	-- $91: INSURANCE_PAYMENT_QUEUE_AMT NUMBER(10,4) NOT NULL
		($92)::int, 	-- $92: REBOOT_LOAN_PAYMENT_KEY INT NULL
		to_timestamp_ntz($93), 	-- $93: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($94) 	-- $94: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanStatementHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanStatementHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanStatementHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanStatementHistory_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanStatementHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 774: OpenEndLoanStatementSnapshot
COPY INTO ARES.STG.SRC_OpenEndLoanStatementSnapshot_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NOT NULL
		($2)::number, 	-- $2: PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($3)::number, 	-- $3: PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($4)::number, 	-- $4: PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PAST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: PAST_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: NOT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: NOT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($28)::date, 	-- $28: NEXT_STATEMENT_DATE DATE NULL
		($29)::date, 	-- $29: NEXT_DUE_DATE DATE NULL
		($30)::number, 	-- $30: PENDING_SCHED_ACH_AMT NUMBER(10,4) NOT NULL
		($31)::date, 	-- $31: PENDING_SCHED_ACH_SENT DATE NULL
		($32)::number, 	-- $32: PENDING_COLL_ACH_AMT NUMBER(10,4) NOT NULL
		($33)::date, 	-- $33: PENDING_COLL_ACH_SENT DATE NULL
		($34)::number, 	-- $34: PAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($37)::number, 	-- $37: NOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: INTEREST_AMT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: PRINC_AMT NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: NOT_DUE_AMT NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($50)::number 	-- $50: TOTAL_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanStatementSnapshot/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanStatementSnapshot_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanStatementSnapshot_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanStatementSnapshot_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanStatementSnapshot_HIST;
[STATUS=tbd]
*/

-- // TABLE 775: OpenEndLoanStream
COPY INTO ARES.STG.SRC_OpenEndLoanStream_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_STREAM_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::date, 	-- $3: PERIOD_START_DATE DATE NOT NULL
		($4)::date, 	-- $4: PERIOD_END_DATE DATE NULL
		($5)::int, 	-- $5: LOAN_KEY INT NOT NULL
		($6)::int, 	-- $6: OPEN_END_LOAN_STMT_KEY INT NULL
		($7)::number, 	-- $7: CASH_AMT NUMBER(19,4) NOT NULL
		($8)::boolean, 	-- $8: IS_WAIVABLE BOOLEAN NOT NULL
		($9)::number, 	-- $9: WAIVABLE_INTEREST_PAID NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: INTEREST_REBATE_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: PAST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: PAST_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($28)::number, 	-- $28: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($30)::number, 	-- $30: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($33)::number, 	-- $33: NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($34)::number, 	-- $34: NOT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: NOT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($37)::boolean, 	-- $37: IS_REBOOTED BOOLEAN NOT NULL
		($38)::number, 	-- $38: PAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: NOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: INTEREST_AMT NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: PRINC_AMT NUMBER(10,4) NOT NULL
		($49)::number, 	-- $49: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		($50)::number, 	-- $50: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		($51)::number, 	-- $51: NOT_DUE_AMT NUMBER(10,4) NOT NULL
		($52)::number, 	-- $52: PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
		($53)::number, 	-- $53: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($54)::number 	-- $54: TOTAL_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanStream/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanStream_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanStream_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanStream_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanStream_HIST;
[STATUS=tbd]
*/

-- // TABLE 776: OpenEndLoanStreamInterestRate
COPY INTO ARES.STG.SRC_OpenEndLoanStreamInterestRate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_STREAM_INTEREST_RATE_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_LOAN_STREAM_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::decimal, 	-- $4: ANNUAL_RATE_PCT DECIMAL(38,0) NOT NULL
		($5)::decimal, 	-- $5: DAILY_RATE_PCT DECIMAL(38,0) NOT NULL
		($6)::date, 	-- $6: INTEREST_START_DATE DATE NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8) 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanStreamInterestRate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanStreamInterestRate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanStreamInterestRate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanStreamInterestRate_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanStreamInterestRate_HIST;
[STATUS=tbd]
*/

-- // TABLE 777: OpenEndLoanStreamStatementSnapshot
COPY INTO ARES.STG.SRC_OpenEndLoanStreamStatementSnapshot_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_LOAN_STREAM_STATEMENT_SNAPSHOT_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NOT NULL
		($3)::int, 	-- $3: OPEN_END_LOAN_STREAM_KEY INT NOT NULL
		($4)::number, 	-- $4: PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: PAST_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: PAST_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: CURR_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: CURR_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: NEXT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($27)::number, 	-- $27: NOT_DUE_INTEREST_AMT NUMBER(10,4) NOT NULL
		($28)::number, 	-- $28: NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: NOT_DUE_PRINC_AMT NUMBER(10,4) NOT NULL
		($30)::boolean, 	-- $30: IS_WAIVABLE BOOLEAN NOT NULL
		($31)::number, 	-- $31: WAIVABLE_INTEREST_PAID NUMBER(10,4) NOT NULL
		($32)::number, 	-- $32: INTEREST_REBATE_AMT NUMBER(10,4) NOT NULL
		($33)::number, 	-- $33: PAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($34)::number, 	-- $34: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($35)::number, 	-- $35: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($36)::number, 	-- $36: NOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($37)::number, 	-- $37: TRANS_FEE_AMT NUMBER(10,4) NOT NULL
		($38)::number, 	-- $38: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($39)::number, 	-- $39: ACTIVITY_FEE_AMT NUMBER(10,4) NOT NULL
		($40)::number, 	-- $40: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($41)::number, 	-- $41: INTEREST_AMT NUMBER(10,4) NOT NULL
		($42)::number, 	-- $42: CSO_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($43)::number, 	-- $43: PRINC_AMT NUMBER(10,4) NOT NULL
		($44)::number, 	-- $44: CURR_DUE_AMT NUMBER(10,4) NOT NULL
		($45)::number, 	-- $45: NEXT_DUE_AMT NUMBER(10,4) NOT NULL
		($46)::number, 	-- $46: NOT_DUE_AMT NUMBER(10,4) NOT NULL
		($47)::number, 	-- $47: PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
		($48)::number, 	-- $48: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($49)::number 	-- $49: TOTAL_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndLoanStreamStatementSnapshot/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndLoanStreamStatementSnapshot_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndLoanStreamStatementSnapshot_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndLoanStreamStatementSnapshot_HIST;
SELECT * FROM STG.WINCHK_OpenEndLoanStreamStatementSnapshot_HIST;
[STATUS=tbd]
*/

-- // TABLE 778: OpenEndQueueLoanCycleUpdate
COPY INTO ARES.STG.SRC_OpenEndQueueLoanCycleUpdate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_QUEUE_LOAN_CYCLE_UPDATE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: OPEN_END_LOAN_CYCLE_KEY INT NULL
		($4)::smallint, 	-- $4: PAY_CYCLE_KEY smallint NOT NULL
		($5)::smallint, 	-- $5: PAY_CYCLE_DAY SMALLINT NOT NULL
		($6)::smallint, 	-- $6: PAY_CYCLE_1ST SMALLINT NOT NULL
		($7)::smallint, 	-- $7: PAY_CYCLE_2ND SMALLINT NOT NULL
		($8)::date, 	-- $8: BIWEEK_BASE DATE NULL
		($9)::char, 	-- $9: PAY_CYCLE_MONTH_INT CHAR(8000) NOT NULL
		($10)::boolean, 	-- $10: PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH BOOLEAN NOT NULL
		($11)::char, 	-- $11: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($12) 	-- $12: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndQueueLoanCycleUpdate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndQueueLoanCycleUpdate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndQueueLoanCycleUpdate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndQueueLoanCycleUpdate_HIST;
SELECT * FROM STG.WINCHK_OpenEndQueueLoanCycleUpdate_HIST;
[STATUS=tbd]
*/

-- // TABLE 779: OpenEndRebootAdj
COPY INTO ARES.STG.SRC_OpenEndRebootAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_DIRECT_DEPOSIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::number, 	-- $5: DEPOSIT_AMT NUMBER(10,4) NOT NULL
		($6)::boolean, 	-- $6: IS_ELIGIBLE_DEPOSIT BOOLEAN NOT NULL
		($7)::int 	-- $7: OPTPLUS_MERCHANT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndRebootAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndRebootAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndRebootAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndRebootAdj_HIST;
SELECT * FROM STG.WINCHK_OpenEndRebootAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 780: OpenEndRecalcInterestAdj
COPY INTO ARES.STG.SRC_OpenEndRecalcInterestAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_RECALC_INTEREST_ADJ_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_INTEREST_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::date, 	-- $6: INTEREST_DATE DATE NULL
		($7)::date, 	-- $7: C_INTEREST_DATE DATE NOT NULL
		($8)::numeric, 	-- $8: INTEREST_ADDED NUMERIC NOT NULL
		($9)::numeric, 	-- $9: C_INTEREST_ADDED NUMERIC NOT NULL
		($10)::numeric, 	-- $10: CAB_INTEREST_ADDED NUMERIC NOT NULL
		($11)::numeric, 	-- $11: C_CAB_INTEREST_ADDED NUMERIC NOT NULL
		($12)::number, 	-- $12: PRINC_DUE NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: C_PRINC_DUE NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: C_LOAN_BALANCE NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: CAB_FEE_BALANCE NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: C_CAB_FEE_BALANCE NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: COLLECTIONS_AMT NUMBER(10,4) NOT NULL
		($19)::number 	-- $19: C_COLLECTIONS_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndRecalcInterestAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndRecalcInterestAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndRecalcInterestAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndRecalcInterestAdj_HIST;
SELECT * FROM STG.WINCHK_OpenEndRecalcInterestAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 781: OpenEndRecalcLoanPaymentAdj
COPY INTO ARES.STG.SRC_OpenEndRecalcLoanPaymentAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_PAYMENT_SUSPEND_INTEREST_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PAYMENT_SUSPEND_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PAYMENT_RESUME_KEY INT NULL
		($4)::date, 	-- $4: RESUME_INTEREST_DATE DATE NULL
		($5)::char, 	-- $5: STATUS CHAR(8000) NOT NULL
		($6)::smallint 	-- $6: RESUME_INTEREST_TYPE_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndRecalcLoanPaymentAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndRecalcLoanPaymentAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndRecalcLoanPaymentAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndRecalcLoanPaymentAdj_HIST;
SELECT * FROM STG.WINCHK_OpenEndRecalcLoanPaymentAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 782: OpenEndRecalcStatementAdj
COPY INTO ARES.STG.SRC_OpenEndRecalcStatementAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_THREAD_KEY INT NOT NULL
		($2)::int, 	-- $2: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ACTIVE TIMESTAMP_LTZ NOT NULL
		($7)::boolean, 	-- $7: IF_NO_ADDRESS BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IF_NO_CELL_PHONE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IF_NO_HOME_PHONE BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IF_NO_WORK_PHONE BOOLEAN NOT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_LAST_CONTACT TIMESTAMP_LTZ NULL
		($12)::smallint, 	-- $12: PASS_COUNTER SMALLINT NOT NULL
		($13)::smallint, 	-- $13: STEP_NUMBER SMALLINT NOT NULL
		($14)::int, 	-- $14: SKIP_TRACE_STEP_KEY INT NULL
		($15)::smallint, 	-- $15: VENDOR_NUMBER SMALLINT NOT NULL
		($16)::int, 	-- $16: SKIP_TRACE_VENDOR_KEY INT NULL
		($17)::char 	-- $17: TRACE_STATUS CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndRecalcStatementAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndRecalcStatementAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndRecalcStatementAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndRecalcStatementAdj_HIST;
SELECT * FROM STG.WINCHK_OpenEndRecalcStatementAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 783: OpenEndRecalcStatementSnapshot
COPY INTO ARES.STG.SRC_OpenEndRecalcStatementSnapshot_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_RECALC_STATEMENT_SNAPSHOT_KEY INT NOT NULL
		($2)::int, 	-- $2: OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY INT NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::number, 	-- $5: PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($6)::number, 	-- $6: C_PAST_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($7)::number, 	-- $7: PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($8)::number, 	-- $8: C_PAST_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($9)::number, 	-- $9: PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($10)::number, 	-- $10: C_PAST_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($11)::number, 	-- $11: PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NULL
		($12)::number, 	-- $12: C_PAST_DUE_COLL_FEE_AMT NUMBER(10,4) NULL
		($13)::number, 	-- $13: PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NULL
		($14)::number, 	-- $14: C_PAST_DUE_CSO_LENDER_COLL_FEE_AMT NUMBER(10,4) NULL
		($15)::number, 	-- $15: PAST_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($16)::number, 	-- $16: C_PAST_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($17)::number, 	-- $17: PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($18)::number, 	-- $18: C_PAST_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($19)::number, 	-- $19: PAST_DUE_PRINC_AMT NUMBER(10,4) NULL
		($20)::number, 	-- $20: C_PAST_DUE_PRINC_AMT NUMBER(10,4) NULL
		($21)::number, 	-- $21: CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($22)::number, 	-- $22: C_CURR_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($23)::number, 	-- $23: CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($24)::number, 	-- $24: C_CURR_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($25)::number, 	-- $25: CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($26)::number, 	-- $26: C_CURR_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($27)::number, 	-- $27: CURR_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($28)::number, 	-- $28: C_CURR_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($29)::number, 	-- $29: CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($30)::number, 	-- $30: C_CURR_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($31)::number, 	-- $31: CURR_DUE_PRINC_AMT NUMBER(10,4) NULL
		($32)::number, 	-- $32: C_CURR_DUE_PRINC_AMT NUMBER(10,4) NULL
		($33)::number, 	-- $33: NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($34)::number, 	-- $34: C_NEXT_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($35)::number, 	-- $35: NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($36)::number, 	-- $36: C_NEXT_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($37)::number, 	-- $37: NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($38)::number, 	-- $38: C_NEXT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($39)::number, 	-- $39: NEXT_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($40)::number, 	-- $40: C_NEXT_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($41)::number, 	-- $41: NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($42)::number, 	-- $42: C_NEXT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($43)::number, 	-- $43: NEXT_DUE_PRINC_AMT NUMBER(10,4) NULL
		($44)::number, 	-- $44: C_NEXT_DUE_PRINC_AMT NUMBER(10,4) NULL
		($45)::number, 	-- $45: NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($46)::number, 	-- $46: C_NOT_DUE_TRANS_FEE_AMT NUMBER(10,4) NULL
		($47)::number, 	-- $47: NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($48)::number, 	-- $48: C_NOT_DUE_LIEN_FEE_AMT NUMBER(10,4) NULL
		($49)::number, 	-- $49: NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($50)::number, 	-- $50: C_NOT_DUE_ACTIVITY_FEE_AMT NUMBER(10,4) NULL
		($51)::number, 	-- $51: NOT_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($52)::number, 	-- $52: C_NOT_DUE_INTEREST_AMT NUMBER(10,4) NULL
		($53)::number, 	-- $53: NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($54)::number, 	-- $54: C_NOT_DUE_CSO_LENDER_INTEREST_AMT NUMBER(10,4) NULL
		($55)::number, 	-- $55: NOT_DUE_PRINC_AMT NUMBER(10,4) NULL
		($56)::number, 	-- $56: C_NOT_DUE_PRINC_AMT NUMBER(10,4) NULL
		($57)::date, 	-- $57: NEXT_STATEMENT_DATE DATE NULL
		($58)::date, 	-- $58: C_NEXT_STATEMENT_DATE DATE NULL
		($59)::date, 	-- $59: NEXT_DUE_DATE DATE NULL
		($60)::date, 	-- $60: C_NEXT_DUE_DATE DATE NULL
		($61)::number, 	-- $61: PENDING_SCHED_ACH_AMT NUMBER(10,4) NULL
		($62)::number, 	-- $62: C_PENDING_SCHED_ACH_AMT NUMBER(10,4) NULL
		($63)::date, 	-- $63: PENDING_SCHED_ACH_SENT DATE NULL
		($64)::date, 	-- $64: C_PENDING_SCHED_ACH_SENT DATE NULL
		($65)::number, 	-- $65: PENDING_COLL_ACH_AMT NUMBER(10,4) NULL
		($66)::number, 	-- $66: C_PENDING_COLL_ACH_AMT NUMBER(10,4) NULL
		($67)::date, 	-- $67: PENDING_COLL_ACH_SENT DATE NULL
		($68)::date, 	-- $68: C_PENDING_COLL_ACH_SENT DATE NULL
		($69)::number, 	-- $69: PAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($70)::number, 	-- $70: CPAST_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($71)::number, 	-- $71: CURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($72)::number, 	-- $72: CCURR_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($73)::number, 	-- $73: NEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($74)::number, 	-- $74: CNEXT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($75)::number, 	-- $75: NOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($76)::number, 	-- $76: CNOT_DUE_INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($77)::number, 	-- $77: PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
		($78)::number 	-- $78: C_PAST_DUE_NSF_FEE_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndRecalcStatementSnapshot/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndRecalcStatementSnapshot_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndRecalcStatementSnapshot_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndRecalcStatementSnapshot_HIST;
SELECT * FROM STG.WINCHK_OpenEndRecalcStatementSnapshot_HIST;
[STATUS=tbd]
*/

-- // TABLE 784: OpenEndScheduledPayment
COPY INTO ARES.STG.SRC_OpenEndScheduledPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPEN_END_SCHEDULED_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: PAYMENT_NUM INT NOT NULL
		($4)::date, 	-- $4: STATEMENT_DATE DATE NOT NULL
		($5)::int, 	-- $5: OPEN_END_LOAN_STMT_KEY INT NULL
		($6)::date, 	-- $6: ORIG_PAYMENT_DATE DATE NOT NULL
		($7)::date, 	-- $7: ADJUSTED_PAYMENT_DATE DATE NOT NULL
		($8)::int, 	-- $8: LOAN_PAYMENT_DUE_DATE_KEY INT NULL
		($9)::number, 	-- $9: PRINC_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: INTEREST_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: CAB_LENDER_INTEREST_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: CAB_FEE_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: LIEN_FEE_AMT NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: INSURANCE_FEE_AMT NUMBER(10,4) NOT NULL
		($15)::number 	-- $15: PRINC_BAL NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OpenEndScheduledPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OpenEndScheduledPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OpenEndScheduledPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OpenEndScheduledPayment_HIST;
SELECT * FROM STG.WINCHK_OpenEndScheduledPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 785: OptPlusBinProduct
COPY INTO ARES.STG.SRC_OptPlusBinProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_BIN_PRODUCT_KEY INT NOT NULL
		($2)::int, 	-- $2: PREPAID_CARD_BIN_KEY INT NOT NULL
		($3)::int, 	-- $3: OPTPLUS_PRODUCT_KEY INT NOT NULL
		($4)::int, 	-- $4: VENDOR_PRODUCT_ID INT NULL
		($5)::int, 	-- $5: VENDOR_PACKAGE_ID INT NULL
		($6)::int, 	-- $6: TEST_VENDOR_PRODUCT_ID INT NULL
		($7)::int 	-- $7: TEST_VENDOR_PACKAGE_ID INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusBinProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusBinProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusBinProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusBinProduct_HIST;
SELECT * FROM STG.WINCHK_OptPlusBinProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 786: OptPlusBinService
COPY INTO ARES.STG.SRC_OptPlusBinService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPT_PLUS_BIN_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: SERVICE_DETAIL_KEY INT NOT NULL
		($3)::int 	-- $3: OPT_PLUS_BIN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusBinService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusBinService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusBinService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusBinService_HIST;
SELECT * FROM STG.WINCHK_OptPlusBinService_HIST;
[STATUS=tbd]
*/

-- // TABLE 787: OptPlusCardDetail
COPY INTO ARES.STG.SRC_OptPlusCardDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_CARD_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: OPTPLUS_PRODUCT_KEY INT NOT NULL
		($3)::boolean, 	-- $3: OVERDRAFT_OPTED_IN BOOLEAN NOT NULL
		($4)::number, 	-- $4: OVERDRAFT_AMOUNT NUMBER(10,4) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::int, 	-- $7: ISSUER_KEY INT NULL
		($8)::varchar, 	-- $8: CARD_ID VARCHAR(8000) NULL
		($9)::boolean, 	-- $9: IS_DEACTIVATED BOOLEAN NULL
		($10)::int, 	-- $10: OPTPLUS_PREVIOUS_PRODUCT_KEY INT NULL
		($11)::number, 	-- $11: PENDING_COLL_ACH_AMT NUMBER(10,4) NULL
		to_timestamp_ntz($12), 	-- $12: PENDING_COLL_ACH_SENT TIMESTAMP_LTZ NULL
		($13)::int, 	-- $13: PERSON_ID INT NULL
		($14)::varchar, 	-- $14: PAN_PROXY_NUM VARCHAR(8000) NULL
		($15)::int, 	-- $15: PARENT_OPT_PLUS_CARD_DETAIL_KEY INT NULL
		($16)::boolean, 	-- $16: IS_EMBOSSED BOOLEAN NOT NULL
		to_timestamp_ntz($17), 	-- $17: PRODUCT_FLIP_DATE TIMESTAMP_LTZ NULL
		($18)::varchar, 	-- $18: BANK_ACCESS_NUMBER VARCHAR(8000) NULL
		($19)::char, 	-- $19: VENDOR_CARD_STATUS CHAR(8000) NULL
		($20)::varchar, 	-- $20: ORIGINAL_BANK_ACCESS_NUMBER VARCHAR(8000) NULL
		($21)::boolean, 	-- $21: IS_DELETED BOOLEAN NOT NULL
		($22)::int, 	-- $22: CUSTOMER_KEY INT NOT NULL
		($23)::int, 	-- $23: CARD_TOKEN INT NOT NULL
		($24)::int, 	-- $24: CARD_NUMBER_TOKEN INT NOT NULL
		($25)::smallint, 	-- $25: EXPIRATION_MONTH SMALLINT NOT NULL
		($26)::smallint, 	-- $26: EXPIRATION_YEAR smallint NOT NULL
		($27)::int, 	-- $27: BIN INT NOT NULL
		($28)::smallint, 	-- $28: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($29)::smallint, 	-- $29: CARD_BRAND SMALLINT NOT NULL
		($30)::smallint, 	-- $30: CARD_TYPE SMALLINT NOT NULL
		($31)::varchar, 	-- $31: STREET_ADDRESS VARCHAR(8000) NOT NULL
		($32)::varchar, 	-- $32: CITY VARCHAR(8000) NOT NULL
		($33)::char, 	-- $33: STATE CHAR(8000) NOT NULL
		($34)::varchar, 	-- $34: ZIPCODE VARCHAR(8000) NOT NULL
		($35)::smallint, 	-- $35: LOCATION smallint NOT NULL
		($36)::varchar, 	-- $36: NAME_ON_CARD VARCHAR(8000) NOT NULL
		($37)::char, 	-- $37: DELETED_BY CHAR(8000) NULL
		to_timestamp_ntz($38) 	-- $38: DATE_DELETED TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusCardDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusCardDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusCardDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusCardDetail_HIST;
SELECT * FROM STG.WINCHK_OptPlusCardDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 788: OptPlusCarrier
COPY INTO ARES.STG.SRC_OptPlusCarrier_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_CARRIER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CARRIER_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CARRIER_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: EMAIL_GATEWAY VARCHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_TERMINATED TIMESTAMP_LTZ NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusCarrier/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusCarrier_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusCarrier_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusCarrier_HIST;
SELECT * FROM STG.WINCHK_OptPlusCarrier_HIST;
[STATUS=tbd]
*/

-- // TABLE 789: OptPlusCarrierHistory
COPY INTO ARES.STG.SRC_OptPlusCarrierHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_CARRIER_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CARRIER_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: CARRIER_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: EMAIL_GATEWAY VARCHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_TERMINATED TIMESTAMP_LTZ NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusCarrierHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusCarrierHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusCarrierHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusCarrierHistory_HIST;
SELECT * FROM STG.WINCHK_OptPlusCarrierHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 790: OptPlusDirectDeposit
COPY INTO ARES.STG.SRC_OptPlusDirectDeposit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_DIRECT_DEPOSIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::number, 	-- $5: DEPOSIT_AMT NUMBER(10,4) NOT NULL
		($6)::boolean, 	-- $6: IS_ELIGIBLE_DEPOSIT BOOLEAN NOT NULL
		($7)::int 	-- $7: OPTPLUS_MERCHANT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusDirectDeposit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusDirectDeposit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusDirectDeposit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusDirectDeposit_HIST;
SELECT * FROM STG.WINCHK_OptPlusDirectDeposit_HIST;
[STATUS=tbd]
*/

-- // TABLE 791: OptPlusEdit
COPY INTO ARES.STG.SRC_OptPlusEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: OPTPLUS_CARD_DETAIL_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::varchar, 	-- $7: FIELD_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: OLD_VALUE VARCHAR(8000) NOT NULL
		($9)::varchar 	-- $9: NEW_VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusEdit_HIST;
SELECT * FROM STG.WINCHK_OptPlusEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 792: OptPlusEmail
COPY INTO ARES.STG.SRC_OptPlusEmail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_EMAIL_KEY INT NOT NULL
		($2)::varchar, 	-- $2: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char 	-- $4: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusEmail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusEmail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusEmail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusEmail_HIST;
SELECT * FROM STG.WINCHK_OptPlusEmail_HIST;
[STATUS=tbd]
*/

-- // TABLE 793: OptPlusEmailLocation
COPY INTO ARES.STG.SRC_OptPlusEmailLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_EMAIL_LOCATION_KEY INT NOT NULL
		($2)::int, 	-- $2: OPTPLUS_EMAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusEmailLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusEmailLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusEmailLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusEmailLocation_HIST;
SELECT * FROM STG.WINCHK_OptPlusEmailLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 794: OptPlusEmployment
COPY INTO ARES.STG.SRC_OptPlusEmployment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_EMPLOYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::varchar, 	-- $3: EMPLOYER_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: WEBSITE VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: HR_CONTACT VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: HR_PHONE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: HR_FAX VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: ADDR_NUM VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: ADDR_PRE_DIR VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: ADDR_STREET VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: ADDR_SUFFIX VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: ADDR_POST_DIR VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: ADDR_SUITE VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: ADDR_SUITE_NUM VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: CITY VARCHAR(8000) NOT NULL
		($16)::char, 	-- $16: STATE CHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: ZIPCODE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($18), 	-- $18: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($19)::char, 	-- $19: TELLER CHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: COUNTY VARCHAR(8000) NOT NULL
		($21)::char, 	-- $21: COUNTRY CHAR(8000) NOT NULL
		($22)::char, 	-- $22: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($23)::varchar, 	-- $23: FLAT_NUM VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: BUILDING_NUM VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: BUILDING_NAME VARCHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: ADDRESS_CSZ VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: ADDRESS_LINE VARCHAR(8000) NULL
		($28)::varchar, 	-- $28: ADDRESS_LINE_1 VARCHAR(8000) NULL
		($29)::varchar, 	-- $29: ADDRESS_LINE_2 VARCHAR(8000) NULL
		($30)::varchar 	-- $30: ADDRESS_LINE_3 VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusEmployment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusEmployment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusEmployment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusEmployment_HIST;
SELECT * FROM STG.WINCHK_OptPlusEmployment_HIST;
[STATUS=tbd]
*/

-- // TABLE 795: OptPlusExportInitGL
COPY INTO ARES.STG.SRC_OptPlusExportInitGL_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPT_PLUS_EXPORT_INIT_GL_KEY INT NOT NULL
		($2)::varchar, 	-- $2: OPT_PLUS_TRANS_CODE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: TRECS_TRANS_CODE VARCHAR(8000) NULL
		($4)::int, 	-- $4: D2JE1D_POS INT NOT NULL
		($5)::int, 	-- $5: D2JE1C_POS INT NOT NULL
		($6)::int, 	-- $6: D2JE2D_POS INT NOT NULL
		($7)::int, 	-- $7: D2JE2C_POS INT NOT NULL
		($8)::int, 	-- $8: D2JE1D_NEG INT NOT NULL
		($9)::int, 	-- $9: D2JE1C_NEG INT NOT NULL
		($10)::int, 	-- $10: D2JE2D_NEG INT NOT NULL
		($11)::int, 	-- $11: D2JE2C_NEG INT NOT NULL
		($12)::int 	-- $12: PREPAID_CARD_BIN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusExportInitGL/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusExportInitGL_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusExportInitGL_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusExportInitGL_HIST;
SELECT * FROM STG.WINCHK_OptPlusExportInitGL_HIST;
[STATUS=tbd]
*/

-- // TABLE 796: OptPlusExportTransCodes
COPY INTO ARES.STG.SRC_OptPlusExportTransCodes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: TRANS_CODE VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: TRECS_CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: D2JE1D VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: D2JE1C VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: D2JE2D VARCHAR(8000) NOT NULL
		($6)::varchar 	-- $6: D2JE2C VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusExportTransCodes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusExportTransCodes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusExportTransCodes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusExportTransCodes_HIST;
SELECT * FROM STG.WINCHK_OptPlusExportTransCodes_HIST;
[STATUS=tbd]
*/

-- // TABLE 797: OptPlusGlobal
COPY INTO ARES.STG.SRC_OptPlusGlobal_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_GLOBAL_KEY INT NOT NULL
		($2)::smallint, 	-- $2: OD_NUM_LAST_DIRECT_DEPOSITS smallint NOT NULL
		($3)::numeric, 	-- $3: OD_PERCENT_OF_DEPOSIT_AVG NUMERIC NOT NULL
		($4)::number, 	-- $4: OD_MAX_AMT_RECV NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: OD_MIN_DIRECT_DEPOSIT_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: OD_NON_DDP_MAX_AMT_TO_RECV NUMBER(10,4) NOT NULL
		($7)::smallint, 	-- $7: MAX_DAYS_NEG_CARD_BALANCE smallint NOT NULL
		($8)::smallint, 	-- $8: NUM_DAYS_AFTER_DDP_FOR_RI smallint NOT NULL
		($9)::number, 	-- $9: MAX_AMOUNT_PER_LOAD NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: MAX_AMOUNT_LOST_CARD_BALANCE NUMBER(10,4) NOT NULL
		($11)::varchar, 	-- $11: REVERSAL_CUTOFF_TIME VARCHAR(8000) NOT NULL
		($12)::number, 	-- $12: MAX_AMOUNT_PER_UNLOAD NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: MIN_AMOUNT_PER_LOAD NUMBER(10,4) NOT NULL
		($14)::boolean, 	-- $14: IS_ENABLE_DIRECT_DEPOSIT_ODP BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: IS_ENABLE_NONDIRECT_DEPOSIT_ODP BOOLEAN NOT NULL
		($16)::smallint, 	-- $16: OD_NON_DDP_NUM_GOOD_LOANS smallint NOT NULL
		($17)::number, 	-- $17: MAX_BALANCE NUMBER(10,4) NOT NULL
		($18)::smallint, 	-- $18: MAX_LOADS_PER_DAY SMALLINT NOT NULL
		($19)::smallint, 	-- $19: MAX_UNLOADS_PER_DAY SMALLINT NOT NULL
		($20)::number, 	-- $20: MAX_LOAD_AMOUNT_PER_DAY NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: MAX_ATM_UNLOAD_AMOUNT_PER_DAY NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: MAX_OTHER_UNLOAD_AMOUNT_PER_DAY NUMBER(10,4) NOT NULL
		($23)::int 	-- $23: PREPAID_CARD_BIN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusGlobal/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusGlobal_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusGlobal_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusGlobal_HIST;
SELECT * FROM STG.WINCHK_OptPlusGlobal_HIST;
[STATUS=tbd]
*/

-- // TABLE 798: OptPlusMerchant
COPY INTO ARES.STG.SRC_OptPlusMerchant_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_MERCHANT_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: MERCHANT_NUM VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: MERCHANT_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: MERCHANT_CATEGORY VARCHAR(8000) NOT NULL
		($7)::varchar 	-- $7: MERCHANT_COUNTRY VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusMerchant/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusMerchant_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusMerchant_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusMerchant_HIST;
SELECT * FROM STG.WINCHK_OptPlusMerchant_HIST;
[STATUS=tbd]
*/

-- // TABLE 799: OptPlusProduct
COPY INTO ARES.STG.SRC_OptPlusProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_PRODUCT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: PRODUCT_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: PRODUCT_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: PRODUCT_DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: IS_WEB_PRODUCT BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_EMPLOYEE BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_OVERDRAFT BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char, 	-- $9: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($10), 	-- $10: DATE_TERMINATED TIMESTAMP_LTZ NULL
		($11)::boolean 	-- $11: IS_ACTIVE_FOR_CHANGE_PRODUCT BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusProduct_HIST;
SELECT * FROM STG.WINCHK_OptPlusProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 800: OptPlusRDFAccountCard
COPY INTO ARES.STG.SRC_OptPlusRDFAccountCard_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: PROGRAM_ID VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: GROUP_ID VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PRODUCT_ID VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: ACCOUNT_ID VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: PRN VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: EXP_DATE VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: STATUS VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: CARD_ID VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: CARD_TYPE VARCHAR(8000) NULL
		($10)::int, 	-- $10: CUSTOMER_KEY INT NULL
		($11)::int, 	-- $11: ACCOUNT_CARD_KEY INT NOT NULL
		($12)::datetime, 	-- $12: DATE_UPDATED datetime NULL
		($13)::int, 	-- $13: CARD_NUMBER_TOKEN INT NOT NULL
		($14)::int, 	-- $14: CARD_TOKEN INT NOT NULL
		($15)::int, 	-- $15: BIN INT NOT NULL
		($16)::smallint, 	-- $16: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($17)::smallint, 	-- $17: EXPIRATION_MONTH SMALLINT NOT NULL
		($18)::smallint 	-- $18: EXPIRATION_YEAR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFAccountCard/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFAccountCard_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFAccountCard_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFAccountCard_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFAccountCard_HIST;
[STATUS=tbd]
*/

-- // TABLE 801: OptPlusRDFAuthorizedTransactions
COPY INTO ARES.STG.SRC_OptPlusRDFAuthorizedTransactions_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: UNIQUE_PROGRAM_ID VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: GALILEO_ACCOUNT_ID VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: CARD_ID VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: TRANSACTION_DATE VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: TRANSACTION_CURRENCY_CODE VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: ADDRESS_VERIFICATION_RESPONSE VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: AUTHORIZATION_RESPONSE VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: AUTHORIZATION_AMOUNT VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: AUTHORIZATION_AMOUNT_SIGN VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: AUTHORIZATION_CODE VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: NETWORK_CODE VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: MERCHANT_NUMBER VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: MERCHANT_NAME VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: MERCHANT_CATEGORY_CODE VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: TRANSACTION_CODE VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: MERCHANT_COUNTRY_CODE VARCHAR(8000) NULL
		($17)::int, 	-- $17: CUSTOMER_KEY INT NULL
		($18)::datetime, 	-- $18: DATE_UPDATED datetime NULL
		($19)::int 	-- $19: AUTHORIZED_TRANSACTIONS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFAuthorizedTransactions/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFAuthorizedTransactions_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFAuthorizedTransactions_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFAuthorizedTransactions_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFAuthorizedTransactions_HIST;
[STATUS=tbd]
*/

-- // TABLE 802: OptPlusRDFConsent
COPY INTO ARES.STG.SRC_OptPlusRDFConsent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OPTPLUS_RDF_CONSENT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BANK_ACCESS_NUMBER VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: OPT_IN CHAR(8000) NOT NULL
		($4)::char, 	-- $4: SOURCE CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NULL
		($6)::int, 	-- $6: CREDIT_CARD_KEY INT NULL
		($7)::int, 	-- $7: CUSTOMER_KEY INT NULL
		($8)::int 	-- $8: VISITOR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFConsent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFConsent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFConsent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFConsent_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFConsent_HIST;
[STATUS=tbd]
*/

-- // TABLE 803: OptPlusRDFCustomerMaster
COPY INTO ARES.STG.SRC_OptPlusRDFCustomerMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: PROGRAM_ID VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: ISSUE_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: PRIMARY_ID VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: PRIMARY_IDTYPE VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: FIRST_NAME VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: LAST_NAME VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: ADDRESS_LINE1 VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: ADDRESS_LINE2 VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: CITY VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: STATE VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: ZIPCODE VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: HOME_PHONE VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: WORK_PHONE VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: STATUS VARCHAR(8000) NULL
		($15)::number, 	-- $15: CURR_BAL_AMT NUMBER(10,4) NULL
		($16)::char, 	-- $16: CURR_BAL_SIGN CHAR(8000) NULL
		($17)::varchar, 	-- $17: DATE_ENTERED VARCHAR(8000) NULL
		($18)::varchar, 	-- $18: NEG_BAL_DATE VARCHAR(8000) NULL
		($19)::number, 	-- $19: NEG_BAL_FEE_AMT NUMBER(10,4) NULL
		($20)::boolean, 	-- $20: IS_RELOADABLE BOOLEAN NULL
		($21)::varchar, 	-- $21: ACCOUNT_ID VARCHAR(8000) NULL
		($22)::varchar, 	-- $22: ACCOUNT_TYPE VARCHAR(8000) NULL
		($23)::number, 	-- $23: AVAIL_BAL_AMT NUMBER(10,4) NULL
		($24)::char, 	-- $24: AVAIL_BAL_SIGN CHAR(8000) NULL
		($25)::varchar, 	-- $25: EXT_ACCT_NUM VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: LAST_TRANS_DATE VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: DOB VARCHAR(8000) NULL
		($28)::smallint, 	-- $28: BILL_CYCLE_DAY smallint NULL
		($29)::varchar, 	-- $29: LOCATION_ID VARCHAR(8000) NULL
		($30)::varchar, 	-- $30: AGENTUSER_ID VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: SECONDARY_ID VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: SECONDARY_IDTYPE VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: USER_DATA1 VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: USER_DATA2 VARCHAR(8000) NULL
		($35)::int, 	-- $35: CUSTOMER_KEY INT NULL
		($36)::int, 	-- $36: CUSTOMER_MASTER_KEY INT NOT NULL
		($37)::datetime 	-- $37: DATE_UPDATED datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFCustomerMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFCustomerMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFCustomerMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFCustomerMaster_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFCustomerMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 804: OptPlusRDFLookUp
COPY INTO ARES.STG.SRC_OptPlusRDFLookUp_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: RDF_CODE CHAR(8000) NULL
		($2)::varchar, 	-- $2: FIELD_NAME VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: CODE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: RDF_FILE VARCHAR(8000) NULL
		($6)::int, 	-- $6: LOOKUP_KEY INT NOT NULL
		($7)::datetime 	-- $7: DATE_UPDATED datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFLookUp/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFLookUp_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFLookUp_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFLookUp_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFLookUp_HIST;
[STATUS=tbd]
*/

-- // TABLE 805: OptPlusRDFODTransition
COPY INTO ARES.STG.SRC_OptPlusRDFODTransition_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: PRN VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: ENTRY_DATE VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: ENTRY_TIME VARCHAR(8000) NULL
		($4)::smallint, 	-- $4: TRANS_CODE smallint NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NULL
		($6)::int, 	-- $6: OD_TRANSITION_KEY INT NOT NULL
		($7)::datetime 	-- $7: DATE_UPDATED datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFODTransition/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFODTransition_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFODTransition_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFODTransition_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFODTransition_HIST;
[STATUS=tbd]
*/

-- // TABLE 806: OptPlusRDFPostedTrans
COPY INTO ARES.STG.SRC_OptPlusRDFPostedTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: PROGRAM_ID VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: ACCOUNT_ID VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: CARD_ID VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: TRANS_DATE VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: TRANS_CODE VARCHAR(8000) NULL
		($6)::number, 	-- $6: TRANS_AMT NUMBER(10,4) NULL
		($7)::char, 	-- $7: TRANS_SIGN CHAR(8000) NULL
		($8)::varchar, 	-- $8: CURRENCY_CODE VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: AUTH_CODE VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: POST_DATE VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: NETWORK_CODE VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: MERCHANT_NUM VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: MERCHANT_NAME VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: MERCHANT_CATEGORY VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: MERCHANT_COUNTRY VARCHAR(8000) NULL
		($16)::number, 	-- $16: INTER_FEE_AMT NUMBER(10,4) NULL
		($17)::varchar, 	-- $17: EXT_TRANS_ID VARCHAR(8000) NULL
		($18)::varchar, 	-- $18: USER_DATA1 VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: USER_DATA2 VARCHAR(8000) NULL
		($20)::int, 	-- $20: CUSTOMER_KEY INT NULL
		($21)::int, 	-- $21: OPTPLUS_MERCHANT_KEY INT NULL
		($22)::int, 	-- $22: POSTED_TRANS_KEY INT NOT NULL
		($23)::datetime 	-- $23: DATE_UPDATED datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/OptPlusRDFPostedTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OptPlusRDFPostedTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OptPlusRDFPostedTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OptPlusRDFPostedTrans_HIST;
SELECT * FROM STG.WINCHK_OptPlusRDFPostedTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 807: OutOfWalletAlert
COPY INTO ARES.STG.SRC_OutOfWalletAlert_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OUT_OF_WALLET_ALERT_KEY INT NOT NULL
		($2)::int, 	-- $2: OUT_OF_WALLET_QUIZ_KEY INT NOT NULL
		($3)::varchar, 	-- $3: ALERT_CODE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: ALERT_TEXT VARCHAR(8000) NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletAlert/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletAlert_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletAlert_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletAlert_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletAlert_HIST;
[STATUS=tbd]
*/

-- // TABLE 808: OutOfWalletError
COPY INTO ARES.STG.SRC_OutOfWalletError_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OUT_OF_WALLET_ERROR_KEY INT NOT NULL
		($2)::int, 	-- $2: OUT_OF_WALLET_QUIZ_KEY INT NOT NULL
		($3)::varchar, 	-- $3: ERROR_CODE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: ERROR_TEXT VARCHAR(8000) NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletError/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletError_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletError_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletError_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletError_HIST;
[STATUS=tbd]
*/

-- // TABLE 809: OutOfWalletQuestion
COPY INTO ARES.STG.SRC_OutOfWalletQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OUT_OF_WALLET_QUESTION_KEY INT NOT NULL
		($2)::int, 	-- $2: OUT_OF_WALLET_QUIZ_KEY INT NOT NULL
		($3)::bigint, 	-- $3: QUESTION_ID BIGINT NOT NULL
		($4)::int, 	-- $4: TYPE INT NULL
		($5)::int, 	-- $5: TIME_PERMITTED_SECONDS INT NULL
		($6)::int, 	-- $6: ACTUAL_TIME_SECONDS INT NULL
		($7)::datetime, 	-- $7: DATE_ENTERED datetime NOT NULL
		($8)::datetime, 	-- $8: DATE_UPDATED datetime NULL
		($9)::varchar, 	-- $9: TYPE_TEXT VARCHAR(8000) NOT NULL
		($10)::varchar 	-- $10: QUESTION_TEXT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletQuestion_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 810: OutOfWalletQuestionAnswerChoice
COPY INTO ARES.STG.SRC_OutOfWalletQuestionAnswerChoice_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OUT_OF_WALLET_QUESTION_ANSWER_CHOICE_KEY INT NOT NULL
		($2)::int, 	-- $2: OUT_OF_WALLET_QUESTION_KEY INT NOT NULL
		($3)::bigint, 	-- $3: ANSWER_CHOICE_ID BIGINT NULL
		($4)::varchar, 	-- $4: ANSWER_CHOICE_TEXT VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5) 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletQuestionAnswerChoice/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletQuestionAnswerChoice_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletQuestionAnswerChoice_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletQuestionAnswerChoice_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletQuestionAnswerChoice_HIST;
[STATUS=tbd]
*/

-- // TABLE 811: OutOfWalletQuiz
COPY INTO ARES.STG.SRC_OutOfWalletQuiz_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OUT_OF_WALLET_QUIZ_KEY INT NOT NULL
		($2)::varchar, 	-- $2: VENDOR_TRACKING_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: EXTERNAL_ID VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: EARNED_POINTS INT NULL
		($5)::int, 	-- $5: POSSIBLE_POINTS INT NULL
		($6)::int, 	-- $6: RESULT_CONFIDENCE_SCORE INT NULL
		($7)::varchar, 	-- $7: RESULT_DECISION VARCHAR(8000) NULL
		($8)::datetime, 	-- $8: DATE_ENTERED datetime NOT NULL
		($9)::datetime, 	-- $9: DATE_UPDATED datetime NULL
		($10)::smallint, 	-- $10: OUT_OF_WALLET_STATUS SMALLINT NULL
		($11)::varchar, 	-- $11: QUIZ_ID VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: ORIGINAL_QUIZ_ID VARCHAR(8000) NOT NULL
		to_timestamp_ntz($13), 	-- $13: DATE_TIME_QUIZ_EXPIRES TIMESTAMP_LTZ NULL
		($14)::smallint 	-- $14: OUT_OF_WALLET_VENDOR_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletQuiz/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletQuiz_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletQuiz_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletQuiz_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletQuiz_HIST;
[STATUS=tbd]
*/

-- // TABLE 812: OutOfWalletQuizLoanApplication
COPY INTO ARES.STG.SRC_OutOfWalletQuizLoanApplication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_APPLICATION_KEY INT NOT NULL
		($2)::int 	-- $2: OUT_OF_WALLET_QUIZ_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletQuizLoanApplication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletQuizLoanApplication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletQuizLoanApplication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletQuizLoanApplication_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletQuizLoanApplication_HIST;
[STATUS=tbd]
*/

-- // TABLE 813: OutOfWalletQuizLoanFunding
COPY INTO ARES.STG.SRC_OutOfWalletQuizLoanFunding_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_FUNDING_KEY INT NOT NULL
		($2)::int 	-- $2: OUT_OF_WALLET_QUIZ_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletQuizLoanFunding/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletQuizLoanFunding_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletQuizLoanFunding_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletQuizLoanFunding_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletQuizLoanFunding_HIST;
[STATUS=tbd]
*/

-- // TABLE 814: OutOfWalletVendor
COPY INTO ARES.STG.SRC_OutOfWalletVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: OUT_OF_WALLET_VENDOR_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: VENDOR_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OutOfWalletVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OutOfWalletVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OutOfWalletVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OutOfWalletVendor_HIST;
SELECT * FROM STG.WINCHK_OutOfWalletVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 815: OverShort
COPY INTO ARES.STG.SRC_OverShort_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: OS_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::int, 	-- $6: DRAWERZ_KEY INT NULL
		($7)::int, 	-- $7: VAULT_COUNT_KEY INT NULL
		($8)::int, 	-- $8: SERVICE_DETAIL_KEY INT NULL
		($9)::number, 	-- $9: CALC_AMT NUMBER(19,4) NOT NULL
		($10)::number, 	-- $10: ENTERED_AMT NUMBER(19,4) NOT NULL
		($11)::int, 	-- $11: CALC_QTY INT NULL
		($12)::int, 	-- $12: ENTERED_QTY INT NULL
		($13)::int, 	-- $13: CURRENCY_KEY INT NULL
		($14)::number, 	-- $14: AMT_OVER NUMBER(19,4) NOT NULL
		($15)::number, 	-- $15: AMT_SHORT NUMBER(19,4) NOT NULL
		($16)::int, 	-- $16: QTY_OVER INT NOT NULL
		($17)::int, 	-- $17: QTY_SHORT INT NOT NULL
		($18)::int 	-- $18: DRAWER_BAG_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OverShort/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OverShort_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OverShort_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OverShort_HIST;
SELECT * FROM STG.WINCHK_OverShort_HIST;
[STATUS=tbd]
*/

-- // TABLE 816: OverShortCategory
COPY INTO ARES.STG.SRC_OverShortCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: OVER_SHORT_CATEGORY_CODE CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::smallint 	-- $4: SORT_VALUE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/OverShortCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*OverShortCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_OverShortCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_OverShortCategory_HIST;
SELECT * FROM STG.WINCHK_OverShortCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 817: ParseCash
COPY INTO ARES.STG.SRC_ParseCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PARSE_CASH_KEY INT NOT NULL
		($2)::number, 	-- $2: PC_100 NUMBER(19,4) NOT NULL
		($3)::number, 	-- $3: PC_50 NUMBER(19,4) NOT NULL
		($4)::number, 	-- $4: PC_20 NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: PC_10 NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: PC_05 NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PC_01 NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: PC_ROLL_HLF NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: PC_ROLL_QTR NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: PC_ROLL_DIME NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: PC_ROLL_NIC NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: PC_ROLL_PEN NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: PC_LOOSE_HLF NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: PC_LOOSE_QTR NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: PC_LOOSE_DIME NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: PC_LOOSE_NIC NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: PC_LOOSE_PEN NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: PC_MISC NUMBER(19,4) NOT NULL
		($19)::number, 	-- $19: PC_ROLL_02 NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: PC_ROLL_01 NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: PC_ROLL_2P NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: PC_ROLL_20P NUMBER(10,4) NOT NULL
		($23)::number, 	-- $23: PC_LOOSE_01 NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: PC_LOOSE_02 NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: PC_LOOSE_2P NUMBER(10,4) NOT NULL
		($26)::number, 	-- $26: PC_LOOSE_20P NUMBER(10,4) NOT NULL
		($27)::number 	-- $27: PC_TOT_CASH NUMBER(19,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ParseCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ParseCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ParseCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ParseCash_HIST;
SELECT * FROM STG.WINCHK_ParseCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 818: PasswordType
COPY INTO ARES.STG.SRC_PasswordType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PasswordTypeKey SMALLINT NOT NULL
		($2)::varchar 	-- $2: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PasswordType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PasswordType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PasswordType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PasswordType_HIST;
SELECT * FROM STG.WINCHK_PasswordType_HIST;
[STATUS=tbd]
*/

-- // TABLE 819: PayCycle
COPY INTO ARES.STG.SRC_PayCycle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAY_CYCLE_KEY smallint NOT NULL
		($2)::char, 	-- $2: CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PayCycle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PayCycle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PayCycle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PayCycle_HIST;
SELECT * FROM STG.WINCHK_PayCycle_HIST;
[STATUS=tbd]
*/

-- // TABLE 820: PaydayLoan
COPY INTO ARES.STG.SRC_PaydayLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYDAY_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CHECK_NO VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: STARTUP_CHECK BOOLEAN NULL
		($5)::numeric, 	-- $5: SPLIT_2ND_RATE_PCT NUMERIC NULL
		($6)::number, 	-- $6: SPLIT_AMOUNT NUMBER(10,4) NULL
		($7)::number, 	-- $7: SPLIT_PRV_OPEN_BAL NUMBER(10,4) NULL
		($8)::number, 	-- $8: SPLIT_1ST_FEE NUMBER(10,4) NULL
		($9)::number, 	-- $9: SPLIT_2ND_FEE NUMBER(10,4) NULL
		($10)::varchar, 	-- $10: DISPLAY_CHECK_NO VARCHAR(8000) NOT NULL
		($11)::char, 	-- $11: DEPOSIT_METHOD CHAR(8000) NOT NULL
		($12)::boolean, 	-- $12: IS_PREPAY BOOLEAN NOT NULL
		($13)::int, 	-- $13: AGREEMENT_NUMBER INT NOT NULL
		($14)::int, 	-- $14: DUEDATE_CHANGE_KEY INT NULL
		($15)::boolean 	-- $15: IS_EXPRESS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaydayLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaydayLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaydayLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaydayLoan_HIST;
SELECT * FROM STG.WINCHK_PaydayLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 821: PaydayLoanApproval
COPY INTO ARES.STG.SRC_PaydayLoanApproval_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYDAY_LOAN_APPROVAL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::number, 	-- $4: GROSS_INCOME_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: NET_INCOME_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: OPEN_LOANS_PRINC_AMT NUMBER(10,4) NOT NULL
		($7)::smallint, 	-- $7: STATE_MAX_PCT_OF_INCOME SMALLINT NOT NULL
		($8)::char, 	-- $8: STATE_MAX_NET_OR_GROSS CHAR(8000) NOT NULL
		($9)::number, 	-- $9: STATE_MAX_MULTI_LOAN_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: STATE_MAX_INCOME_AMT NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: STATE_MAX_PER_LOAN_AMT NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: STATE_MAX_AMT NUMBER(10,4) NOT NULL
		($13)::boolean, 	-- $13: APPROVAL_ENABLED BOOLEAN NOT NULL
		($14)::smallint, 	-- $14: APPROVAL_PCT_OF_INCOME SMALLINT NOT NULL
		($15)::char, 	-- $15: APPROVAL_NET_OR_GROSS CHAR(8000) NOT NULL
		($16)::number, 	-- $16: APPROVAL_BASE_INCOME_AMT NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: APPROVAL_CCARD_AMT NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: APPROVAL_DIR_DEP_AMT NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: APPROVAL_SUCCESSFUL_AMT NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: APPROVAL_BASE_AMT NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: MGR_OVERRIDE_AMT NUMBER(10,4) NOT NULL
		($22)::char, 	-- $22: MGR_OVERRIDE_INITS CHAR(8000) NOT NULL
		($23)::number, 	-- $23: PREV_PRINC_OVERRIDE_AMT NUMBER(10,4) NOT NULL
		($24)::number, 	-- $24: APPROVAL_STATE_MAX_ADJ_AMT NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: APPROVAL_AMT NUMBER(10,4) NOT NULL
		($26)::smallint, 	-- $26: SCORED_INCREMENT_AMOUNT smallint NOT NULL
		($27)::smallint, 	-- $27: SCORED_INCREMENT_NUM smallint NULL
		($28)::number, 	-- $28: INCLUDE_FEE_MAX_PRINC_AMT NUMBER(10,4) NOT NULL
		($29)::number 	-- $29: INCLUDE_FEE_MAX_LOAN_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaydayLoanApproval/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaydayLoanApproval_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaydayLoanApproval_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaydayLoanApproval_HIST;
SELECT * FROM STG.WINCHK_PaydayLoanApproval_HIST;
[STATUS=tbd]
*/

-- // TABLE 822: PaydayLoanQualification
COPY INTO ARES.STG.SRC_PaydayLoanQualification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYDAY_LOAN_QUALIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::boolean, 	-- $6: BANK_STATEMENT BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: BANK_DIRECT_DEPOSIT BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: BANK_CONTACTED BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: INCOME_STATEMENT BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: INCOME_PAY_STUB BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: INCOME_DEPOSITS BOOLEAN NOT NULL
		($12)::boolean 	-- $12: HOME_PHONE_WORKING BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaydayLoanQualification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaydayLoanQualification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaydayLoanQualification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaydayLoanQualification_HIST;
SELECT * FROM STG.WINCHK_PaydayLoanQualification_HIST;
[STATUS=tbd]
*/

-- // TABLE 823: PaymentAccountEventType
COPY INTO ARES.STG.SRC_PaymentAccountEventType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_ACCOUNT_EVENT_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentAccountEventType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentAccountEventType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentAccountEventType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentAccountEventType_HIST;
SELECT * FROM STG.WINCHK_PaymentAccountEventType_HIST;
[STATUS=tbd]
*/

-- // TABLE 824: PaymentAuthHistory
COPY INTO ARES.STG.SRC_PaymentAuthHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_AUTH_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::boolean, 	-- $5: AUTHORIZED BOOLEAN NOT NULL
		($6)::int, 	-- $6: PAYMENT_AUTH_TYPE_KEY INT NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($8), 	-- $8: DATE_DELETED TIMESTAMP_LTZ NULL
		($9)::char, 	-- $9: DELETED_BY CHAR(8000) NULL
		($10)::int 	-- $10: SCHEDULED_PAYMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentAuthHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentAuthHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentAuthHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentAuthHistory_HIST;
SELECT * FROM STG.WINCHK_PaymentAuthHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 825: PaymentAuthorizationDocumentRequirement
COPY INTO ARES.STG.SRC_PaymentAuthorizationDocumentRequirement_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAYMENT_AUTHORIZATION_DOCUMENT_REQUIREMENT_KEY SMALLINT NOT NULL
		($2)::char 	-- $2: NAME CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentAuthorizationDocumentRequirement/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentAuthorizationDocumentRequirement_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentAuthorizationDocumentRequirement_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentAuthorizationDocumentRequirement_HIST;
SELECT * FROM STG.WINCHK_PaymentAuthorizationDocumentRequirement_HIST;
[STATUS=tbd]
*/

-- // TABLE 826: PaymentAuthType
COPY INTO ARES.STG.SRC_PaymentAuthType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_AUTH_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: AUTH_DESC VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: ACTIVE BOOLEAN NOT NULL
		($4)::int 	-- $4: DISPLAY_ORDER INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentAuthType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentAuthType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentAuthType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentAuthType_HIST;
SELECT * FROM STG.WINCHK_PaymentAuthType_HIST;
[STATUS=tbd]
*/

-- // TABLE 827: PaymentMethod
COPY INTO ARES.STG.SRC_PaymentMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_METHOD_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentMethod_HIST;
SELECT * FROM STG.WINCHK_PaymentMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 828: PaymentMethodDeauthorizationReason
COPY INTO ARES.STG.SRC_PaymentMethodDeauthorizationReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAYMENT_METHOD_DEAUTHORIZATION_REASON_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentMethodDeauthorizationReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentMethodDeauthorizationReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentMethodDeauthorizationReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentMethodDeauthorizationReason_HIST;
SELECT * FROM STG.WINCHK_PaymentMethodDeauthorizationReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 829: PaymentMethodProvisionalApprovalType
COPY INTO ARES.STG.SRC_PaymentMethodProvisionalApprovalType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAYMENT_METHOD_PROVISIONAL_APPROVAL_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentMethodProvisionalApprovalType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentMethodProvisionalApprovalType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentMethodProvisionalApprovalType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentMethodProvisionalApprovalType_HIST;
SELECT * FROM STG.WINCHK_PaymentMethodProvisionalApprovalType_HIST;
[STATUS=tbd]
*/

-- // TABLE 830: PaymentPlan
COPY INTO ARES.STG.SRC_PaymentPlan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_KEY INT NOT NULL
		($2)::number, 	-- $2: PP_PRINCIPAL NUMBER(10,4) NOT NULL
		($3)::number 	-- $3: PP_COMMISSION NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlan_HIST;
SELECT * FROM STG.WINCHK_PaymentPlan_HIST;
[STATUS=tbd]
*/

-- // TABLE 831: PaymentPlanRequest
COPY INTO ARES.STG.SRC_PaymentPlanRequest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_REQUEST_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: PAYMENT_COUNT SMALLINT NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::char, 	-- $8: COURTESY_CALL CHAR(8000) NOT NULL
		($9)::char, 	-- $9: APPROVED_BY CHAR(8000) NULL
		($10)::smallint, 	-- $10: STATUS SMALLINT NOT NULL
		to_timestamp_ntz($11), 	-- $11: UPDATED_DATE TIMESTAMP_LTZ NULL
		($12)::char, 	-- $12: UPDATED_BY CHAR(8000) NULL
		($13)::date, 	-- $13: EXPIRATION_DATE DATE NULL
		($14)::int, 	-- $14: PTP_PAYMENT_PLAN_CONFIG_KEY INT NULL
		($15)::int, 	-- $15: LOAN_PRODUCT_CONFIG_KEY INT NULL
		($16)::varchar, 	-- $16: LOAN_BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($17)::varchar, 	-- $17: LOAN_BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($18)::int 	-- $18: LOAN_CREDIT_CARD_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequest_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequest_HIST;
[STATUS=tbd]
*/

-- // TABLE 832: PaymentPlanRequestDetail
COPY INTO ARES.STG.SRC_PaymentPlanRequestDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_REQUEST_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: PAYMENT_PLAN_REQUEST_KEY INT NOT NULL
		($3)::number, 	-- $3: AMOUNT NUMBER(10,4) NOT NULL
		($4)::smallint, 	-- $4: PAYMENT_NUMBER SMALLINT NOT NULL
		($5)::date, 	-- $5: ORIG_DUE_DATE DATE NOT NULL
		($6)::date 	-- $6: CURR_DUE_DATE DATE NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequestDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequestDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequestDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequestDetail_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequestDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 833: PaymentPlanRequestDetailPaymentInfo
COPY INTO ARES.STG.SRC_PaymentPlanRequestDetailPaymentInfo_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_REQUEST_DETAIL_KEY INT NOT NULL
		($2)::, 	-- $2: PAYMENT_METHOD  NOT NULL
		($3)::smallint, 	-- $3: CC_EXP_YEAR smallint NULL
		($4)::smallint, 	-- $4: CC_EXP_MONTH SMALLINT NULL
		($5)::varchar, 	-- $5: CC_NAME_ON_CARD VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: NAME_ON_ACCOUNT VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: CC_BILLING_CITY VARCHAR(8000) NOT NULL
		($10)::char, 	-- $10: CC_BILLING_STATE CHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: CC_BILLING_ZIPCODE VARCHAR(8000) NOT NULL
		($12)::smallint, 	-- $12: CC_TIME_SLOT SMALLINT NOT NULL
		($13)::varchar, 	-- $13: CC_BILLING_ADDRESS1 VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: CC_BILLING_COUNTY VARCHAR(8000) NOT NULL
		($15)::char, 	-- $15: CC_BILLING_COUNTRY CHAR(8000) NOT NULL
		($16)::smallint, 	-- $16: CARD_BRAND SMALLINT NOT NULL
		($17)::smallint, 	-- $17: CARD_TYPE SMALLINT NOT NULL
		($18)::char, 	-- $18: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: CC_BILLING_ADDR_STREET VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: CC_BILLING_FLAT_NUM VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: CC_BILLING_BUILDING_NUM VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: CC_BILLING_BUILDING_NAME VARCHAR(8000) NOT NULL
		($23)::int, 	-- $23: CARD_TOKEN INT NULL
		($24)::int, 	-- $24: CARD_NUMBER_TOKEN INT NULL
		($25)::int, 	-- $25: BIN INT NULL
		($26)::smallint 	-- $26: CARD_NUMBER_LAST_FOUR smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequestDetailPaymentInfo/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequestDetailPaymentInfo_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequestDetailPaymentInfo_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequestDetailPaymentInfo_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequestDetailPaymentInfo_HIST;
[STATUS=tbd]
*/

-- // TABLE 834: PaymentPlanRequestLoanXRef
COPY INTO ARES.STG.SRC_PaymentPlanRequestLoanXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_REQUEST_KEY INT NOT NULL
		($2)::int 	-- $2: LOAN_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequestLoanXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequestLoanXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequestLoanXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequestLoanXRef_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequestLoanXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 835: PaymentPlanRequestPTPXRef
COPY INTO ARES.STG.SRC_PaymentPlanRequestPTPXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_REQUEST_KEY INT NOT NULL
		($2)::int 	-- $2: PROMISE_TO_PAY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequestPTPXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequestPTPXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequestPTPXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequestPTPXRef_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequestPTPXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 836: PaymentPlanRequestStatus
COPY INTO ARES.STG.SRC_PaymentPlanRequestStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAYMENT_PLAN_REQUEST_STATUS_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequestStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequestStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequestStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequestStatus_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequestStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 837: PaymentPlanRequestVisitorDocumentXRef
COPY INTO ARES.STG.SRC_PaymentPlanRequestVisitorDocumentXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENT_PLAN_REQUEST_KEY INT NOT NULL
		($2)::int 	-- $2: VISITOR_DOCUMENT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanRequestVisitorDocumentXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanRequestVisitorDocumentXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanRequestVisitorDocumentXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanRequestVisitorDocumentXRef_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanRequestVisitorDocumentXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 838: PaymentPlanType
COPY INTO ARES.STG.SRC_PaymentPlanType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAYMENT_PLAN_TYPE_KEY smallint NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentPlanType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentPlanType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentPlanType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentPlanType_HIST;
SELECT * FROM STG.WINCHK_PaymentPlanType_HIST;
[STATUS=tbd]
*/

-- // TABLE 839: PaymentsPastDue
COPY INTO ARES.STG.SRC_PaymentsPastDue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::bigint, 	-- $1: PAYMENTS_PAST_DUE_KEY BIGINT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: COLLECTION_STREAM_KEY INT NOT NULL
		($4)::number, 	-- $4: LOAN_PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($5)::smallint, 	-- $5: PAYMENTS_PAST_DUE_COUNT smallint NOT NULL
		to_timestamp_ntz($6) 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentsPastDue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentsPastDue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentsPastDue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentsPastDue_HIST;
SELECT * FROM STG.WINCHK_PaymentsPastDue_HIST;
[STATUS=tbd]
*/

-- // TABLE 840: PaymentsPastDueBackfill
COPY INTO ARES.STG.SRC_PaymentsPastDueBackfill_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENTS_PAST_DUE_BACKFILL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::date, 	-- $3: AS_OF_DATE DATE NOT NULL
		($4)::int, 	-- $4: COLLECTION_STREAM_KEY INT NOT NULL
		($5)::number, 	-- $5: LOAN_PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($6)::smallint, 	-- $6: PAYMENTS_PAST_DUE_COUNT smallint NOT NULL
		to_timestamp_ntz($7) 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentsPastDueBackfill/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentsPastDueBackfill_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentsPastDueBackfill_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentsPastDueBackfill_HIST;
SELECT * FROM STG.WINCHK_PaymentsPastDueBackfill_HIST;
[STATUS=tbd]
*/

-- // TABLE 841: PaymentsPastDueDetail
COPY INTO ARES.STG.SRC_PaymentsPastDueDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::bigint, 	-- $1: PAYMENTS_PAST_DUE_DETAIL_KEY BIGINT NOT NULL
		($2)::smallint, 	-- $2: PAYMENTS_PAST_DUE_TRANSACTION_TYPE_KEY SMALLINT NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::date, 	-- $4: TRANSACTION_DATE DATE NOT NULL
		($5)::number, 	-- $5: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($6)::number 	-- $6: ORIG_DUE_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentsPastDueDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentsPastDueDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentsPastDueDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentsPastDueDetail_HIST;
SELECT * FROM STG.WINCHK_PaymentsPastDueDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 842: PaymentsPastDueDetailBackfill
COPY INTO ARES.STG.SRC_PaymentsPastDueDetailBackfill_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYMENTS_PAST_DUE_DETAIL_BACKFILL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::date, 	-- $3: AS_OF_DATE DATE NOT NULL
		($4)::date, 	-- $4: TRANSACTION_DATE DATE NOT NULL
		($5)::number, 	-- $5: PAST_DUE_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: ORIG_DUE_AMT NUMBER(10,4) NOT NULL
		($7)::smallint 	-- $7: PAYMENTS_PAST_DUE_TRANSACTION_TYPE_KEY SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentsPastDueDetailBackfill/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentsPastDueDetailBackfill_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentsPastDueDetailBackfill_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentsPastDueDetailBackfill_HIST;
SELECT * FROM STG.WINCHK_PaymentsPastDueDetailBackfill_HIST;
[STATUS=tbd]
*/

-- // TABLE 843: PaymentsPastDueTransactionType
COPY INTO ARES.STG.SRC_PaymentsPastDueTransactionType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PAYMENTS_PAST_DUE_TRANSACTION_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_DUE_DATE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaymentsPastDueTransactionType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaymentsPastDueTransactionType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaymentsPastDueTransactionType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaymentsPastDueTransactionType_HIST;
SELECT * FROM STG.WINCHK_PaymentsPastDueTransactionType_HIST;
[STATUS=tbd]
*/

-- // TABLE 844: PAYROLL1
COPY INTO ARES.STG.SRC_PAYROLL1_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: chk_type CHAR(8000) NOT NULL
		($2)::number, 	-- $2: PRICE NUMBER(19,4) NOT NULL
		($3)::number, 	-- $3: FEE NUMBER(10,4) NOT NULL
		($4)::numeric, 	-- $4: RATE NUMERIC NOT NULL
		($5)::smallint, 	-- $5: Location smallint NOT NULL
		($6)::int 	-- $6: Payroll1_key INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PAYROLL1/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PAYROLL1_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PAYROLL1_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PAYROLL1_HIST;
SELECT * FROM STG.WINCHK_PAYROLL1_HIST;
[STATUS=tbd]
*/

-- // TABLE 845: PayStub
COPY INTO ARES.STG.SRC_PayStub_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PAYSTUB_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		($4)::varchar, 	-- $4: CHECK_NUMBER VARCHAR(8000) NOT NULL
		($5)::number, 	-- $5: CHECK_AMOUNT NUMBER(10,4) NOT NULL
		($6)::date, 	-- $6: CHECK_DATE DATE NOT NULL
		($7)::char, 	-- $7: PAY_TYPE CHAR(8000) NOT NULL
		($8)::char, 	-- $8: PAY_CYCLE CHAR(8000) NOT NULL
		($9)::date, 	-- $9: PAY_PERIOD_ENDING DATE NOT NULL
		($10)::number, 	-- $10: REGULAR_HOURS NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: REGULAR_RATE NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: OVERTIME_HOURS NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: OVERTIME_RATE NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: GROSS NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: GROSS_YTD NUMBER(10,4) NOT NULL
		($16)::number, 	-- $16: TAXABLE NUMBER(10,4) NOT NULL
		($17)::number, 	-- $17: FEDERAL_TAX NUMBER(10,4) NOT NULL
		($18)::number, 	-- $18: STATE_TAX NUMBER(10,4) NOT NULL
		($19)::number, 	-- $19: SOCIAL_SECURITY_TAX NUMBER(10,4) NOT NULL
		($20)::number, 	-- $20: MEDICARE_TAX NUMBER(10,4) NOT NULL
		($21)::datetime, 	-- $21: DATE_ENTERED datetime NOT NULL
		($22)::int, 	-- $22: IMAGE_TRANSDETAIL_KEY INT NULL
		($23)::int, 	-- $23: DOCUWARE_DOCUMENT_KEY INT NULL
		($24)::smallint, 	-- $24: OTHER_EARNING_TYPE SMALLINT NOT NULL
		($25)::number 	-- $25: OTHER_EARNING_AMOUNT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PayStub/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PayStub_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PayStub_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PayStub_HIST;
SELECT * FROM STG.WINCHK_PayStub_HIST;
[STATUS=tbd]
*/

-- // TABLE 846: PaywareTsysTimezone
COPY INTO ARES.STG.SRC_PaywareTsysTimezone_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::smallint 	-- $2: TIME_ZONE smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/PaywareTsysTimezone/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PaywareTsysTimezone_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PaywareTsysTimezone_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PaywareTsysTimezone_HIST;
SELECT * FROM STG.WINCHK_PaywareTsysTimezone_HIST;
[STATUS=tbd]
*/

-- // TABLE 847: PendingReason
COPY INTO ARES.STG.SRC_PendingReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PENDING_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: DISPLAY_TEXT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PendingReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PendingReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PendingReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PendingReason_HIST;
SELECT * FROM STG.WINCHK_PendingReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 848: PendingReasonClientMessage
COPY INTO ARES.STG.SRC_PendingReasonClientMessage_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PENDING_REASON_KEY INT NOT NULL
		($2)::smallint, 	-- $2: CLIENT_APPLICATION_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: MESSAGE_HEADER VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: MESSAGE_TEXT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PendingReasonClientMessage/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PendingReasonClientMessage_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PendingReasonClientMessage_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PendingReasonClientMessage_HIST;
SELECT * FROM STG.WINCHK_PendingReasonClientMessage_HIST;
[STATUS=tbd]
*/

-- // TABLE 849: PendingReasonConfig
COPY INTO ARES.STG.SRC_PendingReasonConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PENDING_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: PRIORITY INT NOT NULL
		($3)::boolean, 	-- $3: USER_CAN_ADD BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: USER_CAN_RESOLVE BOOLEAN NOT NULL
		($5)::boolean 	-- $5: RESOLVE_ALL_PRODUCTS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PendingReasonConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PendingReasonConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PendingReasonConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PendingReasonConfig_HIST;
SELECT * FROM STG.WINCHK_PendingReasonConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 850: PendingReasonQuestionSet
COPY INTO ARES.STG.SRC_PendingReasonQuestionSet_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: LOCATION smallint NOT NULL
		($2)::int, 	-- $2: PENDING_REASON_KEY INT NOT NULL
		($3)::int 	-- $3: CONFIGURABLE_QUESTION_SET_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PendingReasonQuestionSet/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PendingReasonQuestionSet_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PendingReasonQuestionSet_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PendingReasonQuestionSet_HIST;
SELECT * FROM STG.WINCHK_PendingReasonQuestionSet_HIST;
[STATUS=tbd]
*/

-- // TABLE 851: PendingReasonResolveReason
COPY INTO ARES.STG.SRC_PendingReasonResolveReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PENDING_REASON_RESOLVE_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/PendingReasonResolveReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PendingReasonResolveReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PendingReasonResolveReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PendingReasonResolveReason_HIST;
SELECT * FROM STG.WINCHK_PendingReasonResolveReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 852: PersonTitle
COPY INTO ARES.STG.SRC_PersonTitle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PERSON_TITLE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: ABBREVIATION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PersonTitle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PersonTitle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PersonTitle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PersonTitle_HIST;
SELECT * FROM STG.WINCHK_PersonTitle_HIST;
[STATUS=tbd]
*/

-- // TABLE 853: PhoneSkillsCall
COPY INTO ARES.STG.SRC_PhoneSkillsCall_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PHONE_SKILLS_CALL_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: DISTRICT_KEY smallint NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::char, 	-- $6: STORE_MANAGER CHAR(8000) NOT NULL
		($7)::char, 	-- $7: STORE_TELLER CHAR(8000) NULL
		($8)::varchar, 	-- $8: UNKNOWN_TELLER VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: COMMENTS VARCHAR(8000) NULL
		($10)::boolean, 	-- $10: DELETED BOOLEAN NOT NULL
		($11)::varchar, 	-- $11: DELETED_DATE VARCHAR(8000) NULL
		($12)::char, 	-- $12: DELETED_BY CHAR(8000) NULL
		($13)::int, 	-- $13: PHONE_SKILLS_GRADE_KEY INT NULL
		($14)::int, 	-- $14: PHONE_SKILLS_SEQUENCE_KEY INT NULL
		($15)::int, 	-- $15: REASON_KEY INT NOT NULL
		($16)::int, 	-- $16: SUBREASON1_KEY INT NULL
		($17)::int, 	-- $17: SUBREASON2_KEY INT NULL
		($18)::smallint, 	-- $18: CALL_MONTH SMALLINT NOT NULL
		($19)::smallint 	-- $19: CALL_YEAR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PhoneSkillsCall/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PhoneSkillsCall_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PhoneSkillsCall_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PhoneSkillsCall_HIST;
SELECT * FROM STG.WINCHK_PhoneSkillsCall_HIST;
[STATUS=tbd]
*/

-- // TABLE 854: PhoneSkillsGrade
COPY INTO ARES.STG.SRC_PhoneSkillsGrade_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PHONE_SKILLS_GRADE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PhoneSkillsGrade/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PhoneSkillsGrade_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PhoneSkillsGrade_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PhoneSkillsGrade_HIST;
SELECT * FROM STG.WINCHK_PhoneSkillsGrade_HIST;
[STATUS=tbd]
*/

-- // TABLE 855: PhoneSkillsGrader
COPY INTO ARES.STG.SRC_PhoneSkillsGrader_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PHONE_SKILLS_GRADER_KEY INT NOT NULL
		($2)::char 	-- $2: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PhoneSkillsGrader/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PhoneSkillsGrader_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PhoneSkillsGrader_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PhoneSkillsGrader_HIST;
SELECT * FROM STG.WINCHK_PhoneSkillsGrader_HIST;
[STATUS=tbd]
*/

-- // TABLE 856: PhoneSkillsReason
COPY INTO ARES.STG.SRC_PhoneSkillsReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PHONE_SKILLS_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: REASON_TEXT VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: REASON_DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: REASON_LEVEL SMALLINT NOT NULL
		($5)::boolean 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PhoneSkillsReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PhoneSkillsReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PhoneSkillsReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PhoneSkillsReason_HIST;
SELECT * FROM STG.WINCHK_PhoneSkillsReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 857: PhoneSkillsSequence
COPY INTO ARES.STG.SRC_PhoneSkillsSequence_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PHONE_SKILLS_SEQUENCE_KEY INT NOT NULL
		($2)::int, 	-- $2: REASON_KEY INT NOT NULL
		($3)::int, 	-- $3: SUBREASON1_KEY INT NULL
		($4)::int, 	-- $4: SUBREASON2_KEY INT NULL
		($5)::boolean 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PhoneSkillsSequence/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PhoneSkillsSequence_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PhoneSkillsSequence_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PhoneSkillsSequence_HIST;
SELECT * FROM STG.WINCHK_PhoneSkillsSequence_HIST;
[STATUS=tbd]
*/

-- // TABLE 858: PhotoIdType
COPY INTO ARES.STG.SRC_PhotoIdType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PHOTO_ID_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PhotoIdType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PhotoIdType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PhotoIdType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PhotoIdType_HIST;
SELECT * FROM STG.WINCHK_PhotoIdType_HIST;
[STATUS=tbd]
*/

-- // TABLE 859: PostalHoliday
COPY INTO ARES.STG.SRC_PostalHoliday_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: POSTAL_HOLIDAY_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE DATE NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PostalHoliday/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PostalHoliday_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PostalHoliday_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PostalHoliday_HIST;
SELECT * FROM STG.WINCHK_PostalHoliday_HIST;
[STATUS=tbd]
*/

-- // TABLE 860: PowerOfAttorney
COPY INTO ARES.STG.SRC_PowerOfAttorney_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: POWER_OF_ATTORNEY_KEY INT NOT NULL
		($2)::int, 	-- $2: POWER_OF_ATTORNEY_TYPE_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		($4)::varchar, 	-- $4: BUSINESS_NAME VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: CONTACT_FIRST_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: CONTACT_LAST_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: ADDRESS VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: CITY VARCHAR(8000) NOT NULL
		($9)::char, 	-- $9: STATE CHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: ZIPCODE VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: PHONE_NUMBER VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: PHONE_EXTENSION VARCHAR(8000) NULL
		to_timestamp_ntz($13), 	-- $13: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($14)::char, 	-- $14: ENTERED_BY CHAR(8000) NOT NULL
		($15)::boolean, 	-- $15: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($16), 	-- $16: DELETED_DATE TIMESTAMP_LTZ NULL
		($17)::char 	-- $17: DELETED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/PowerOfAttorney/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PowerOfAttorney_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PowerOfAttorney_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PowerOfAttorney_HIST;
SELECT * FROM STG.WINCHK_PowerOfAttorney_HIST;
[STATUS=tbd]
*/

-- // TABLE 861: PowerOfAttorneyType
COPY INTO ARES.STG.SRC_PowerOfAttorneyType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: POWER_OF_ATTORNEY_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PowerOfAttorneyType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PowerOfAttorneyType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PowerOfAttorneyType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PowerOfAttorneyType_HIST;
SELECT * FROM STG.WINCHK_PowerOfAttorneyType_HIST;
[STATUS=tbd]
*/

-- // TABLE 862: PrepaidCardBin
COPY INTO ARES.STG.SRC_PrepaidCardBin_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_BIN_KEY INT NOT NULL
		($2)::varchar, 	-- $2: BIN_NUMBER VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: BIN_DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: CARD_BRAND SMALLINT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_TERMINATED TIMESTAMP_LTZ NULL
		($8)::smallint, 	-- $8: CARD_TYPE SMALLINT NOT NULL
		($9)::varchar, 	-- $9: ROUTING_NO VARCHAR(8000) NULL
		($10)::smallint, 	-- $10: ID_VERIFY_METHOD SMALLINT NOT NULL
		($11)::varchar, 	-- $11: BIN_BANKNAME VARCHAR(8000) NOT NULL
		($12)::int, 	-- $12: WS_CONFIG_KEY INT NULL
		($13)::int, 	-- $13: OPTPLUS_CARRIER_KEY INT NULL
		($14)::smallint, 	-- $14: MAX_NAME_ON_CARD_LENGTH SMALLINT NOT NULL
		($15)::smallint 	-- $15: MIN_NAME_ON_CARD_LENGTH SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardBin/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardBin_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardBin_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardBin_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardBin_HIST;
[STATUS=tbd]
*/

-- // TABLE 863: PrepaidCardBinCompany
COPY INTO ARES.STG.SRC_PrepaidCardBinCompany_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_BIN_COMPANY_KEY INT NOT NULL
		($2)::int, 	-- $2: PREPAID_CARD_BIN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: PREPAID_CARD_GROUP_KEY INT NULL
		($5)::boolean, 	-- $5: ALLOW_ASSIGN_CARDS BOOLEAN NULL
		($6)::boolean, 	-- $6: ALLOW_LOADS BOOLEAN NULL
		($7)::boolean, 	-- $7: ALLOW_UNLOADS BOOLEAN NULL
		($8)::boolean, 	-- $8: ALLOW_LOST_STOLEN BOOLEAN NULL
		($9)::boolean, 	-- $9: ALLOW_CHANGE_PRODUCT BOOLEAN NULL
		($10)::boolean, 	-- $10: ALLOW_DIRECT_DEPOSIT BOOLEAN NULL
		($11)::varchar, 	-- $11: VENDOR_UAT_CLIENTID VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: VENDOR_PROD_CLIENTID VARCHAR(8000) NULL
		($13)::boolean, 	-- $13: ALLOW_CANCEL_ACCOUNT BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: ALLOW_MATRICULA BOOLEAN NOT NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardBinCompany/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardBinCompany_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardBinCompany_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardBinCompany_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardBinCompany_HIST;
[STATUS=tbd]
*/

-- // TABLE 864: PrepaidCardBinCompanyHistory
COPY INTO ARES.STG.SRC_PrepaidCardBinCompanyHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_BIN_COMPANY_KEY INT NOT NULL
		($2)::int, 	-- $2: PREPAID_CARD_BIN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::int, 	-- $4: PREPAID_CARD_GROUP_KEY INT NULL
		($5)::boolean, 	-- $5: ALLOW_ASSIGN_CARDS BOOLEAN NULL
		($6)::boolean, 	-- $6: ALLOW_LOADS BOOLEAN NULL
		($7)::boolean, 	-- $7: ALLOW_UNLOADS BOOLEAN NULL
		($8)::boolean, 	-- $8: ALLOW_LOST_STOLEN BOOLEAN NULL
		($9)::boolean, 	-- $9: ALLOW_CHANGE_PRODUCT BOOLEAN NULL
		($10)::boolean, 	-- $10: ALLOW_DIRECT_DEPOSIT BOOLEAN NULL
		($11)::varchar, 	-- $11: VENDOR_UAT_CLIENTID VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: VENDOR_PROD_CLIENTID VARCHAR(8000) NULL
		($13)::boolean, 	-- $13: ALLOW_CANCEL_ACCOUNT BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: ALLOW_MATRICULA BOOLEAN NOT NULL
		to_timestamp_ntz($15), 	-- $15: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($16) 	-- $16: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardBinCompanyHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardBinCompanyHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardBinCompanyHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardBinCompanyHistory_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardBinCompanyHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 865: PrepaidCardGroup
COPY INTO ARES.STG.SRC_PrepaidCardGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_GROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: GROUP_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: GROUP_DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: CARD_AMOUNT_GL_ACCT INT NULL
		($5)::boolean, 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ACTIVE_CHANGED TIMESTAMP_LTZ NULL
		($7)::char, 	-- $7: TELLER_ACTIVE_CHANGED CHAR(8000) NULL
		to_timestamp_ntz($8), 	-- $8: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($9)::char 	-- $9: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardGroup_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 866: PrepaidCardStopPayment
COPY INTO ARES.STG.SRC_PrepaidCardStopPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_STOP_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: CREDIT_CARD_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: SOURCE_INSTITUTION VARCHAR(8000) NOT NULL
		($6)::number, 	-- $6: STOP_PAYMENT_AMOUNT NUMBER(10,4) NULL
		($7)::int, 	-- $7: PREPAID_CARD_STOP_PAYMENT_REASON_KEY INT NOT NULL
		to_timestamp_ntz($8), 	-- $8: EFFECTIVE_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9), 	-- $9: CANCELLED_DATE TIMESTAMP_LTZ NULL
		($10)::char, 	-- $10: CANCELLED_BY CHAR(8000) NULL
		to_timestamp_ntz($11), 	-- $11: LAST_UPDATED_DATE TIMESTAMP_LTZ NULL
		($12)::char, 	-- $12: LAST_UPDATED_BY CHAR(8000) NULL
		($13)::varchar, 	-- $13: OTHER_REASON_DESCRIBE VARCHAR(8000) NULL
		($14)::boolean, 	-- $14: REPORTED_TO_VENDOR BOOLEAN NOT NULL
		to_timestamp_ntz($15) 	-- $15: REPORTED_TO_VENDOR_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardStopPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardStopPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardStopPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardStopPayment_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardStopPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 867: PrepaidCardStopPaymentEdit
COPY INTO ARES.STG.SRC_PrepaidCardStopPaymentEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_STOP_PAYMENT_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: PREPAID_CARD_STOP_PAYMENT_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NOT NULL
		($7)::varchar 	-- $7: NEW_VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardStopPaymentEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardStopPaymentEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardStopPaymentEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardStopPaymentEdit_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardStopPaymentEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 868: PrepaidCardStopPaymentReason
COPY INTO ARES.STG.SRC_PrepaidCardStopPaymentReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_STOP_PAYMENT_REASON_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_ACTIVE BOOLEAN NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean 	-- $4: ALLOW_OTHER_NOTE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardStopPaymentReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardStopPaymentReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardStopPaymentReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardStopPaymentReason_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardStopPaymentReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 869: PrepaidCardTransAction
COPY INTO ARES.STG.SRC_PrepaidCardTransAction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PREPAID_CARD_TRANS_ACTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ACTION_NAME VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ACTIVE_CHANGED TIMESTAMP_LTZ NULL
		($5)::char, 	-- $5: TELLER_ACTIVE_CHANGED CHAR(8000) NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::char 	-- $7: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrepaidCardTransAction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrepaidCardTransAction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrepaidCardTransAction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrepaidCardTransAction_HIST;
SELECT * FROM STG.WINCHK_PrepaidCardTransAction_HIST;
[STATUS=tbd]
*/

-- // TABLE 870: PreQualificationConsentSource
COPY INTO ARES.STG.SRC_PreQualificationConsentSource_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRE_QUALIFICATION_CONSENT_SOURCE_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PreQualificationConsentSource/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PreQualificationConsentSource_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PreQualificationConsentSource_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PreQualificationConsentSource_HIST;
SELECT * FROM STG.WINCHK_PreQualificationConsentSource_HIST;
[STATUS=tbd]
*/

-- // TABLE 871: PrescreenQuestion
COPY INTO ARES.STG.SRC_PrescreenQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESCREEN_QUESTION_KEY INT NOT NULL
		($2)::int, 	-- $2: PRESCREEN_QUESTION_TYPE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: MAIN_TEXT VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: VALID_RESPONSE BOOLEAN NOT NULL
		($5)::smallint, 	-- $5: SORT_ORDER smallint NOT NULL
		($6)::int, 	-- $6: COLOR INT NULL
		($7)::varchar, 	-- $7: DETAIL_TEXT VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: VALIDATION_MESSAGE VARCHAR(8000) NOT NULL
		($9)::int, 	-- $9: VALIDATION_MESSAGE_COLOR INT NULL
		($10)::boolean, 	-- $10: IS_ACTIVE BOOLEAN NOT NULL
		($11)::varchar 	-- $11: QUESTION_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrescreenQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrescreenQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrescreenQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrescreenQuestion_HIST;
SELECT * FROM STG.WINCHK_PrescreenQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 872: PrescreenQuestionState
COPY INTO ARES.STG.SRC_PrescreenQuestionState_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESCREEN_QUESTION_STATE_KEY INT NOT NULL
		($2)::int, 	-- $2: PRESCREEN_QUESTION_KEY INT NOT NULL
		($3)::char 	-- $3: STATE_ABBREVIATION CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrescreenQuestionState/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrescreenQuestionState_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrescreenQuestionState_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrescreenQuestionState_HIST;
SELECT * FROM STG.WINCHK_PrescreenQuestionState_HIST;
[STATUS=tbd]
*/

-- // TABLE 873: PrescreenQuestionType
COPY INTO ARES.STG.SRC_PrescreenQuestionType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESCREEN_QUESTION_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PrescreenQuestionType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PrescreenQuestionType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PrescreenQuestionType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PrescreenQuestionType_HIST;
SELECT * FROM STG.WINCHK_PrescreenQuestionType_HIST;
[STATUS=tbd]
*/

-- // TABLE 874: Presentment
COPY INTO ARES.STG.SRC_Presentment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: PARENT_PRESENTMENT_ID_KEY INT NULL
		($3)::int, 	-- $3: PRESENTMENT_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NULL
		($5)::int, 	-- $5: RISREPT_KEY INT NULL
		($6)::boolean, 	-- $6: IS_DONE BOOLEAN NOT NULL
		($7)::int, 	-- $7: SCHEDULED_PAYMENT_NUMBER INT NOT NULL
		($8)::datetime, 	-- $8: DATE_ENTERED datetime NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::int, 	-- $10: SCHEDULED_PAYMENT_KEY INT NULL
		($11)::int 	-- $11: PTP_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Presentment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Presentment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Presentment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Presentment_HIST;
SELECT * FROM STG.WINCHK_Presentment_HIST;
[STATUS=tbd]
*/

-- // TABLE 875: PresentmentCreditCardTransXRef
COPY INTO ARES.STG.SRC_PresentmentCreditCardTransXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CREDIT_CARD_TRANS_KEY INT NOT NULL
		($2)::int 	-- $2: PRESENTMENT_REQUEST_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentCreditCardTransXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentCreditCardTransXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentCreditCardTransXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentCreditCardTransXRef_HIST;
SELECT * FROM STG.WINCHK_PresentmentCreditCardTransXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 876: PresentmentNotSentReason
COPY INTO ARES.STG.SRC_PresentmentNotSentReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_NOT_SENT_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: REASON VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentNotSentReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentNotSentReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentNotSentReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentNotSentReason_HIST;
SELECT * FROM STG.WINCHK_PresentmentNotSentReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 877: PresentmentPaymentMethod
COPY INTO ARES.STG.SRC_PresentmentPaymentMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_PAYMENT_METHOD_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentPaymentMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentPaymentMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentPaymentMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentPaymentMethod_HIST;
SELECT * FROM STG.WINCHK_PresentmentPaymentMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 878: PresentmentRequest
COPY INTO ARES.STG.SRC_PresentmentRequest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_REQUEST_KEY INT NOT NULL
		($2)::int, 	-- $2: PRESENTMENT_KEY INT NOT NULL
		($3)::int, 	-- $3: PRESENTMENT_REQUEST_REASON_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::int, 	-- $5: PRESENTMENT_PAYMENT_METHOD_KEY INT NOT NULL
		($6)::number, 	-- $6: AMT NUMBER(19,4) NOT NULL
		($7)::int, 	-- $7: COLLECTION_PAYMENT_NUMBER INT NOT NULL
		($8)::int, 	-- $8: FEE_PAYMENT_NUMBER INT NOT NULL
		($9)::varchar, 	-- $9: STATEMENT_ID VARCHAR(8000) NOT NULL
		($10)::int 	-- $10: LOAN_PAYMENT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentRequest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentRequest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentRequest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentRequest_HIST;
SELECT * FROM STG.WINCHK_PresentmentRequest_HIST;
[STATUS=tbd]
*/

-- // TABLE 879: PresentmentRequestACHHistoryXRef
COPY INTO ARES.STG.SRC_PresentmentRequestACHHistoryXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ACH_HISTORY_KEY INT NOT NULL
		($2)::int 	-- $2: PRESENTMENT_REQUEST_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentRequestACHHistoryXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentRequestACHHistoryXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentRequestACHHistoryXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentRequestACHHistoryXRef_HIST;
SELECT * FROM STG.WINCHK_PresentmentRequestACHHistoryXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 880: PresentmentRequestNotSent
COPY INTO ARES.STG.SRC_PresentmentRequestNotSent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_REQUEST_NOT_SENT_KEY INT NOT NULL
		($2)::int, 	-- $2: PRESENTMENT_REQUEST_KEY INT NOT NULL
		to_timestamp_ntz($3) 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentRequestNotSent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentRequestNotSent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentRequestNotSent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentRequestNotSent_HIST;
SELECT * FROM STG.WINCHK_PresentmentRequestNotSent_HIST;
[STATUS=tbd]
*/

-- // TABLE 881: PresentmentRequestNotSentReason
COPY INTO ARES.STG.SRC_PresentmentRequestNotSentReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_REQUEST_NOT_SENT_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: PRESENTMENT_REQUEST_NOT_SENT_KEY INT NOT NULL
		($3)::int 	-- $3: PRESENTMENT_NOT_SENT_REASON_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentRequestNotSentReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentRequestNotSentReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentRequestNotSentReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentRequestNotSentReason_HIST;
SELECT * FROM STG.WINCHK_PresentmentRequestNotSentReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 882: PresentmentRequestReason
COPY INTO ARES.STG.SRC_PresentmentRequestReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_REQUEST_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: REASON VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentRequestReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentRequestReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentRequestReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentRequestReason_HIST;
SELECT * FROM STG.WINCHK_PresentmentRequestReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 883: PresentmentType
COPY INTO ARES.STG.SRC_PresentmentType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRESENTMENT_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: CODE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PresentmentType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PresentmentType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PresentmentType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PresentmentType_HIST;
SELECT * FROM STG.WINCHK_PresentmentType_HIST;
[STATUS=tbd]
*/

-- // TABLE 884: PRICES
COPY INTO ARES.STG.SRC_PRICES_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::number, 	-- $1: PFEE1 NUMBER(10,4) NOT NULL
		($2)::numeric, 	-- $2: PTFEE1 NUMERIC NOT NULL
		($3)::boolean, 	-- $3: PTABLE1 BOOLEAN NULL
		($4)::number, 	-- $4: PFEE2 NUMBER(10,4) NOT NULL
		($5)::numeric, 	-- $5: PTFEE2 NUMERIC NOT NULL
		($6)::boolean, 	-- $6: PTABLE2 BOOLEAN NULL
		($7)::number, 	-- $7: PFEE3 NUMBER(10,4) NOT NULL
		($8)::numeric, 	-- $8: PTFEE3 NUMERIC NOT NULL
		($9)::boolean, 	-- $9: PTABLE3 BOOLEAN NULL
		($10)::number, 	-- $10: PFEE4 NUMBER(10,4) NOT NULL
		($11)::numeric, 	-- $11: PTFEE4 NUMERIC NOT NULL
		($12)::boolean, 	-- $12: PTABLE4 BOOLEAN NULL
		($13)::number, 	-- $13: PFEE5 NUMBER(10,4) NOT NULL
		($14)::numeric, 	-- $14: PTFEE5 NUMERIC NOT NULL
		($15)::boolean, 	-- $15: PTABLE5 BOOLEAN NULL
		($16)::number, 	-- $16: PFEE6 NUMBER(10,4) NOT NULL
		($17)::numeric, 	-- $17: PTFEE6 NUMERIC NOT NULL
		($18)::boolean, 	-- $18: PTABLE6 BOOLEAN NULL
		($19)::number, 	-- $19: PFEE7 NUMBER(10,4) NOT NULL
		($20)::numeric, 	-- $20: PTFEE7 NUMERIC NOT NULL
		($21)::boolean, 	-- $21: PTABLE7 BOOLEAN NULL
		($22)::number, 	-- $22: PFEE8 NUMBER(10,4) NOT NULL
		($23)::numeric, 	-- $23: PTFEE8 NUMERIC NOT NULL
		($24)::boolean, 	-- $24: PTABLE8 BOOLEAN NULL
		($25)::number, 	-- $25: PFEE9 NUMBER(10,4) NOT NULL
		($26)::numeric, 	-- $26: PTFEE9 NUMERIC NOT NULL
		($27)::boolean, 	-- $27: PTABLE9 BOOLEAN NULL
		($28)::number, 	-- $28: PFEEA NUMBER(10,4) NOT NULL
		($29)::numeric, 	-- $29: PTFEEA NUMERIC NOT NULL
		($30)::boolean, 	-- $30: PTABLEA BOOLEAN NULL
		($31)::number, 	-- $31: PFEEB NUMBER(10,4) NOT NULL
		($32)::numeric, 	-- $32: PTFEEB NUMERIC NOT NULL
		($33)::boolean, 	-- $33: PTABLEB BOOLEAN NULL
		($34)::number, 	-- $34: PFEEC NUMBER(10,4) NOT NULL
		($35)::numeric, 	-- $35: PTFEEC NUMERIC NOT NULL
		($36)::boolean, 	-- $36: PTABLEC BOOLEAN NULL
		($37)::number, 	-- $37: PFEED NUMBER(10,4) NOT NULL
		($38)::numeric, 	-- $38: PTFEED NUMERIC NOT NULL
		($39)::boolean, 	-- $39: PTABLED BOOLEAN NULL
		($40)::number, 	-- $40: PFEEE NUMBER(10,4) NOT NULL
		($41)::numeric, 	-- $41: PTFEEE NUMERIC NOT NULL
		($42)::boolean, 	-- $42: PTABLEE BOOLEAN NULL
		($43)::number, 	-- $43: PFEEF NUMBER(10,4) NOT NULL
		($44)::numeric, 	-- $44: PTFEEF NUMERIC NOT NULL
		($45)::boolean, 	-- $45: PTABLEF BOOLEAN NULL
		($46)::number, 	-- $46: PFEEG NUMBER(10,4) NOT NULL
		($47)::numeric, 	-- $47: PTFEEG NUMERIC NOT NULL
		($48)::boolean, 	-- $48: PTABLEG BOOLEAN NULL
		($49)::number, 	-- $49: PFEEH NUMBER(10,4) NOT NULL
		($50)::numeric, 	-- $50: PTFEEH NUMERIC NOT NULL
		($51)::boolean, 	-- $51: PTABLEH BOOLEAN NULL
		($52)::number, 	-- $52: PFEEI NUMBER(10,4) NOT NULL
		($53)::numeric, 	-- $53: PTFEEI NUMERIC NOT NULL
		($54)::boolean, 	-- $54: PTABLEI BOOLEAN NULL
		($55)::number, 	-- $55: PFEEK NUMBER(10,4) NOT NULL
		($56)::numeric, 	-- $56: PTFEEK NUMERIC NOT NULL
		($57)::boolean, 	-- $57: PTABLEK BOOLEAN NULL
		($58)::number, 	-- $58: PFEEL NUMBER(10,4) NOT NULL
		($59)::numeric, 	-- $59: PTFEEL NUMERIC NOT NULL
		($60)::boolean, 	-- $60: PTABLEL BOOLEAN NULL
		($61)::number, 	-- $61: PFEEJ NUMBER(10,4) NOT NULL
		($62)::numeric, 	-- $62: PTFEEJ NUMERIC NOT NULL
		($63)::boolean, 	-- $63: PTABLEJ BOOLEAN NULL
		($64)::number, 	-- $64: PFEEM NUMBER(10,4) NOT NULL
		($65)::numeric, 	-- $65: PTFEEM NUMERIC NOT NULL
		($66)::boolean, 	-- $66: PTABLEM BOOLEAN NULL
		($67)::number, 	-- $67: PFEEN NUMBER(10,4) NOT NULL
		($68)::numeric, 	-- $68: PTFEEN NUMERIC NOT NULL
		($69)::boolean, 	-- $69: PTABLEN BOOLEAN NULL
		($70)::number, 	-- $70: PFEEO NUMBER(10,4) NOT NULL
		($71)::numeric, 	-- $71: PTFEEO NUMERIC NOT NULL
		($72)::boolean, 	-- $72: PTABLEO BOOLEAN NULL
		($73)::number, 	-- $73: PFEEP NUMBER(10,4) NOT NULL
		($74)::numeric, 	-- $74: PTFEEP NUMERIC NOT NULL
		($75)::boolean, 	-- $75: PTABLEP BOOLEAN NULL
		($76)::number, 	-- $76: PFEEQ NUMBER(10,4) NOT NULL
		($77)::numeric, 	-- $77: PTFEEQ NUMERIC NOT NULL
		($78)::boolean, 	-- $78: PTABLEQ BOOLEAN NULL
		($79)::number, 	-- $79: PFEER NUMBER(10,4) NOT NULL
		($80)::numeric, 	-- $80: PTFEER NUMERIC NOT NULL
		($81)::boolean, 	-- $81: PTABLER BOOLEAN NULL
		($82)::number, 	-- $82: PFEES NUMBER(10,4) NOT NULL
		($83)::numeric, 	-- $83: PTFEES NUMERIC NOT NULL
		($84)::boolean, 	-- $84: PTABLES BOOLEAN NULL
		($85)::number, 	-- $85: PFEET NUMBER(10,4) NOT NULL
		($86)::numeric, 	-- $86: PTFEET NUMERIC NOT NULL
		($87)::boolean, 	-- $87: PTABLET BOOLEAN NULL
		($88)::number, 	-- $88: PFEEU NUMBER(10,4) NOT NULL
		($89)::numeric, 	-- $89: PTFEEU NUMERIC NOT NULL
		($90)::boolean, 	-- $90: PTABLEU BOOLEAN NULL
		($91)::number, 	-- $91: PFEEV NUMBER(10,4) NOT NULL
		($92)::numeric, 	-- $92: PTFEEV NUMERIC NOT NULL
		($93)::boolean, 	-- $93: PTABLEV BOOLEAN NULL
		($94)::number, 	-- $94: PFEEW NUMBER(10,4) NOT NULL
		($95)::numeric, 	-- $95: PTFEEW NUMERIC NOT NULL
		($96)::boolean, 	-- $96: PTABLEW BOOLEAN NULL
		($97)::number, 	-- $97: PFEEX NUMBER(10,4) NOT NULL
		($98)::numeric, 	-- $98: PTFEEX NUMERIC NOT NULL
		($99)::boolean, 	-- $99: PTABLEX BOOLEAN NULL
		($100)::float, 	-- $100: PFEEY FLOAT NULL
		($101)::float, 	-- $101: PTFEEY FLOAT NULL
		($102)::boolean, 	-- $102: PTABLEY BOOLEAN NULL
		($103)::float, 	-- $103: PFEEZ FLOAT NULL
		($104)::float, 	-- $104: PTFEEZ FLOAT NULL
		($105)::boolean, 	-- $105: PTABLEZ BOOLEAN NULL
		($106)::boolean, 	-- $106: ASKKK BOOLEAN NULL
		($107)::numeric 	-- $107: location NUMERIC NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PRICES/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PRICES_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PRICES_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PRICES_HIST;
SELECT * FROM STG.WINCHK_PRICES_HIST;
[STATUS=tbd]
*/

-- // TABLE 885: ProcessConfig
COPY INTO ARES.STG.SRC_ProcessConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: PROCESS_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: PROCESS_COMMAND VARCHAR(8000) NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($7) 	-- $7: UPDATED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessConfig_HIST;
SELECT * FROM STG.WINCHK_ProcessConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 886: ProcessConfigDetail
COPY INTO ARES.STG.SRC_ProcessConfigDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_CONFIG_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CONFIG_NAME VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: CONFIG_VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessConfigDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessConfigDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessConfigDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessConfigDetail_HIST;
SELECT * FROM STG.WINCHK_ProcessConfigDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 887: ProcessConfigDetailHistory
COPY INTO ARES.STG.SRC_ProcessConfigDetailHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_CONFIG_DETAIL_HIST_KEY INT NOT NULL
		($2)::int, 	-- $2: PROCESS_CONFIG_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: CONFIG_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: CONFIG_OLD_VALUE VARCHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::varchar, 	-- $7: CONFIG_NEW_VALUE VARCHAR(8000) NULL
		($8)::char 	-- $8: TELLER CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessConfigDetailHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessConfigDetailHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessConfigDetailHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessConfigDetailHistory_HIST;
SELECT * FROM STG.WINCHK_ProcessConfigDetailHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 888: ProcessConfigInstance
COPY INTO ARES.STG.SRC_ProcessConfigInstance_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($2)::int, 	-- $2: PROCESS_CONFIG_KEY INT NOT NULL
		($3)::varchar, 	-- $3: INSTANCE_NAME VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_PRIVATE BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: UPDATED_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($10) 	-- $10: LASTUSED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessConfigInstance/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessConfigInstance_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessConfigInstance_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessConfigInstance_HIST;
SELECT * FROM STG.WINCHK_ProcessConfigInstance_HIST;
[STATUS=tbd]
*/

-- // TABLE 889: ProcessConfigInstanceGroup
COPY INTO ARES.STG.SRC_ProcessConfigInstanceGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_CONFIG_INSTANCE_GROUP_KEY INT NOT NULL
		($2)::int, 	-- $2: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($3)::int 	-- $3: SECURITYGROUP_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessConfigInstanceGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessConfigInstanceGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessConfigInstanceGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessConfigInstanceGroup_HIST;
SELECT * FROM STG.WINCHK_ProcessConfigInstanceGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 890: ProcessConfigInstanceTeller
COPY INTO ARES.STG.SRC_ProcessConfigInstanceTeller_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_CONFIG_INSTANCE_TELLER_KEY INT NOT NULL
		($2)::int, 	-- $2: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($3)::char 	-- $3: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessConfigInstanceTeller/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessConfigInstanceTeller_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessConfigInstanceTeller_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessConfigInstanceTeller_HIST;
SELECT * FROM STG.WINCHK_ProcessConfigInstanceTeller_HIST;
[STATUS=tbd]
*/

-- // TABLE 891: ProcessSchedule
COPY INTO ARES.STG.SRC_ProcessSchedule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROCESS_SCHEDULE_KEY INT NOT NULL
		($2)::int, 	-- $2: PROCESS_CONFIG_INSTANCE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: JOB_NAME VARCHAR(8000) NULL
		($4)::boolean, 	-- $4: SUN BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: MON BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: TUES BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: WED BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: THURS BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: FRI BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: SAT BOOLEAN NOT NULL
		($11)::smallint, 	-- $11: MONTHLY_DAY smallint NOT NULL
		to_timestamp_ntz($12), 	-- $12: START_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13), 	-- $13: END_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($14), 	-- $14: START_TIME TIMESTAMP_LTZ NULL
		($15)::varchar, 	-- $15: TIME_ZONE VARCHAR(8000) NULL
		($16)::boolean 	-- $16: IS_RESTART BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProcessSchedule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProcessSchedule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProcessSchedule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProcessSchedule_HIST;
SELECT * FROM STG.WINCHK_ProcessSchedule_HIST;
[STATUS=tbd]
*/

-- // TABLE 892: ProductOpenLoanMatrix
COPY INTO ARES.STG.SRC_ProductOpenLoanMatrix_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PRODUCT_OPEN_LOAN_MATRIX_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_KEY_OPEN INT NOT NULL
		($4)::int 	-- $4: LOAN_PRODUCT_KEY_ALLOWED INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProductOpenLoanMatrix/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProductOpenLoanMatrix_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProductOpenLoanMatrix_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProductOpenLoanMatrix_HIST;
SELECT * FROM STG.WINCHK_ProductOpenLoanMatrix_HIST;
[STATUS=tbd]
*/

-- // TABLE 893: ProductType
COPY INTO ARES.STG.SRC_ProductType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: ProductTypeKey CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ProductType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ProductType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ProductType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ProductType_HIST;
SELECT * FROM STG.WINCHK_ProductType_HIST;
[STATUS=tbd]
*/

-- // TABLE 894: PromiseToPay
COPY INTO ARES.STG.SRC_PromiseToPay_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROMISE_TO_PAY_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: TELLER CHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: PTP_PMTS SMALLINT NOT NULL
		($7)::smallint, 	-- $7: PTP_LOCATION smallint NOT NULL
		($8)::char, 	-- $8: PTP_COURTESY_CALL CHAR(8000) NOT NULL
		($9)::char, 	-- $9: APPROVED_BY CHAR(8000) NULL
		($10)::boolean, 	-- $10: CANCELLED BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: WAIVE_FEE BOOLEAN NOT NULL
		to_timestamp_ntz($12), 	-- $12: CANCELLED_DATE TIMESTAMP_LTZ NULL
		($13)::char, 	-- $13: CANCELLED_BY CHAR(8000) NULL
		($14)::int, 	-- $14: COLLECTION_ACTION_KEY INT NULL
		to_timestamp_ntz($15), 	-- $15: REVERSED_DATE TIMESTAMP_LTZ NULL
		($16)::boolean, 	-- $16: REVERSED BOOLEAN NOT NULL
		($17)::int, 	-- $17: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($18)::int, 	-- $18: TRANS_DETAIL_KEY INT NULL
		($19)::int, 	-- $19: VISITOR_DOCUMENT_KEY INT NULL
		($20)::boolean 	-- $20: IS_PAID BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PromiseToPay/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PromiseToPay_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PromiseToPay_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PromiseToPay_HIST;
SELECT * FROM STG.WINCHK_PromiseToPay_HIST;
[STATUS=tbd]
*/

-- // TABLE 895: PromiseToPayCommunication
COPY INTO ARES.STG.SRC_PromiseToPayCommunication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROMISE_TO_PAY_COMMUNICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: PROMISE_TO_PAY_KEY INT NOT NULL
		($3)::datetime, 	-- $3: DATE_ENTERED datetime NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: EMAIL_SENT datetime NULL
		($6)::datetime, 	-- $6: MAIL_SENT datetime NULL
		($7)::int 	-- $7: CHANNEL_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PromiseToPayCommunication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PromiseToPayCommunication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PromiseToPayCommunication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PromiseToPayCommunication_HIST;
SELECT * FROM STG.WINCHK_PromiseToPayCommunication_HIST;
[STATUS=tbd]
*/

-- // TABLE 896: PromiseToPayDetail
COPY INTO ARES.STG.SRC_PromiseToPayDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: PTP_PROMISE_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PTP_METHOD SMALLINT NOT NULL
		to_timestamp_ntz($4), 	-- $4: PTP_ORIG_DUE_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5), 	-- $5: PTP_CURR_DUE_DATE TIMESTAMP_LTZ NOT NULL
		($6)::number, 	-- $6: PTP_DUE_AMT NUMBER(10,4) NOT NULL
		($7)::char, 	-- $7: PTP_STATUS CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: PTP_PAID_DATE TIMESTAMP_LTZ NULL
		($9)::smallint, 	-- $9: PTP_CC_EXP_YEAR smallint NOT NULL
		($10)::smallint, 	-- $10: PTP_CC_EXP_MONTH SMALLINT NULL
		($11)::varchar, 	-- $11: PTP_CC_NAME_ON_CARD VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: BANK_ROUTING_NUMBER VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: BANK_ACCOUNT_NUMBER VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: PTP_NAME_ON_ACCOUNT VARCHAR(8000) NULL
		($15)::number, 	-- $15: PTP_PAID_AMT NUMBER(10,4) NULL
		($16)::int, 	-- $16: TRANS_DETAIL_KEY INT NULL
		($17)::varchar, 	-- $17: PTP_CC_BILLING_CITY VARCHAR(8000) NOT NULL
		($18)::char, 	-- $18: PTP_CC_BILLING_STATE CHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: PTP_CC_BILLING_ZIPCODE VARCHAR(8000) NOT NULL
		($20)::smallint, 	-- $20: PTP_CC_TIME_SLOT SMALLINT NOT NULL
		($21)::varchar, 	-- $21: PTP_CC_BILLING_ADDRESS1 VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: PTP_CC_BILLING_COUNTY VARCHAR(8000) NOT NULL
		($23)::char, 	-- $23: PTP_CC_BILLING_COUNTRY CHAR(8000) NOT NULL
		($24)::smallint, 	-- $24: PTP_CARD_BRAND SMALLINT NOT NULL
		($25)::smallint, 	-- $25: PTP_CARD_TYPE SMALLINT NOT NULL
		($26)::char, 	-- $26: ADDRESS_FORMAT CHAR(8000) NOT NULL
		($27)::varchar, 	-- $27: PTP_CC_BILLING_ADDR_STREET VARCHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: PTP_CC_BILLING_FLAT_NUM VARCHAR(8000) NOT NULL
		($29)::varchar, 	-- $29: PTP_CC_BILLING_BUILDING_NUM VARCHAR(8000) NOT NULL
		($30)::varchar, 	-- $30: PTP_CC_BILLING_BUILDING_NAME VARCHAR(8000) NOT NULL
		($31)::int, 	-- $31: CARD_TOKEN INT NULL
		($32)::int, 	-- $32: CARD_NUMBER_TOKEN INT NULL
		($33)::int, 	-- $33: BIN INT NULL
		($34)::smallint, 	-- $34: CARD_NUMBER_LAST_FOUR smallint NULL
		($35)::varchar, 	-- $35: PTP_CC_BILLING_ADDRESS_CSZ VARCHAR(8000) NULL
		($36)::varchar, 	-- $36: PTP_CC_BILLING_ADDRESS_LINE VARCHAR(8000) NULL
		($37)::varchar, 	-- $37: PTP_CC_BILLING_ADDRESS_LINE_1 VARCHAR(8000) NULL
		($38)::varchar, 	-- $38: PTP_CC_BILLING_ADDRESS_LINE_2 VARCHAR(8000) NULL
		($39)::varchar, 	-- $39: PTP_CC_BILLING_ADDRESS_LINE_3 VARCHAR(8000) NULL
		($40)::int, 	-- $40: SCHEDULED_PAYMENT_KEY INT NULL
		($41)::number 	-- $41: PAST_DUE_CAP NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PromiseToPayDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PromiseToPayDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PromiseToPayDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PromiseToPayDetail_HIST;
SELECT * FROM STG.WINCHK_PromiseToPayDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 897: PromiseToPayDetailEdit
COPY INTO ARES.STG.SRC_PromiseToPayDetailEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PROMISE_TO_PAY_DETAIL_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: PTP_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: DML_TYPE CHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: FIELD_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: OLD_VALUE VARCHAR(8000) NULL
		($9)::varchar 	-- $9: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/PromiseToPayDetailEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PromiseToPayDetailEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PromiseToPayDetailEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PromiseToPayDetailEdit_HIST;
SELECT * FROM STG.WINCHK_PromiseToPayDetailEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 898: PromiseToPayDetailTrans
COPY INTO ARES.STG.SRC_PromiseToPayDetailTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_DETAIL_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: PTP_DETAIL_KEY INT NOT NULL
		($3)::number, 	-- $3: PTP_AMOUNT NUMBER(10,4) NOT NULL
		($4)::boolean, 	-- $4: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: REVERSED_DATE TIMESTAMP_LTZ NULL
		($6)::int 	-- $6: TRANS_DETAIL_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PromiseToPayDetailTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PromiseToPayDetailTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PromiseToPayDetailTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PromiseToPayDetailTrans_HIST;
SELECT * FROM STG.WINCHK_PromiseToPayDetailTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 899: PromiseToPayTimeSlotConfig
COPY INTO ARES.STG.SRC_PromiseToPayTimeSlotConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PTP_CC_TIME_SLOT SMALLINT NOT NULL
		($2)::smallint, 	-- $2: PTP_RUN_TIME SMALLINT NOT NULL
		($3)::varchar 	-- $3: PTP_TIMESLOT_DESC VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PromiseToPayTimeSlotConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PromiseToPayTimeSlotConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PromiseToPayTimeSlotConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PromiseToPayTimeSlotConfig_HIST;
SELECT * FROM STG.WINCHK_PromiseToPayTimeSlotConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 900: PSiGateResponse
COPY INTO ARES.STG.SRC_PSiGateResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PSI_GATE_RESPONSE_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NOT NULL
		($3)::varchar, 	-- $3: RESPONSE_XML VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4) 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PSiGateResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PSiGateResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PSiGateResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PSiGateResponse_HIST;
SELECT * FROM STG.WINCHK_PSiGateResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 901: PTPPaymentMethod
COPY INTO ARES.STG.SRC_PTPPaymentMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: PTP_PAYMENT_METHOD_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentMethod_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 902: PTPPaymentPlanCheck
COPY INTO ARES.STG.SRC_PTPPaymentPlanCheck_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanCheck/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanCheck_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanCheck_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanCheck_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanCheck_HIST;
[STATUS=tbd]
*/

-- // TABLE 903: PTPPaymentPlanCheckHistory
COPY INTO ARES.STG.SRC_PTPPaymentPlanCheckHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanCheckHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanCheckHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanCheckHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanCheckHistory_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanCheckHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 904: PTPPaymentPlanConfig
COPY INTO ARES.STG.SRC_PTPPaymentPlanConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::int, 	-- $4: PAYMENTS_NUM_MIN INT NOT NULL
		($5)::int, 	-- $5: PAYMENTS_NUM_MAX INT NOT NULL
		($6)::int, 	-- $6: DEFAULT_NUM_PAYMENTS INT NOT NULL
		($7)::int, 	-- $7: DAYS_EXTEND_BEYOND_ORIG_DUE_MAX INT NOT NULL
		($8)::int, 	-- $8: DAYS_BETWEEN_PAYMENTS_MIN INT NOT NULL
		($9)::int, 	-- $9: DAYS_BETWEEN_PAYMENTS_MAX INT NOT NULL
		($10)::int, 	-- $10: DAYS_BEFORE_FIRST_PAYMENT_MIN INT NOT NULL
		($11)::int, 	-- $11: FIRST_PAYMENT_PERCENT INT NOT NULL
		($12)::int, 	-- $12: GRACE_DAYS INT NOT NULL
		($13)::boolean, 	-- $13: MOD_APPROVAL_REQ BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: DM_CRM_APPROVAL_REQ BOOLEAN NOT NULL
		($15)::int, 	-- $15: AUDIT_CATEGORY INT NOT NULL
		($16)::int, 	-- $16: PLAN_LENGTH_MIN_DAYS INT NOT NULL
		($17)::int, 	-- $17: PLAN_LENGTH_MAX_DAYS INT NOT NULL
		($18)::int, 	-- $18: PLAN_COUNT_LIMIT INT NOT NULL
		($19)::int, 	-- $19: PLAN_COUNT_LIMIT_LENGTH_DAYS INT NOT NULL
		($20)::int, 	-- $20: PLAN_ALLOWED_PRIOR_DUE_DATE_DAYS INT NOT NULL
		($21)::boolean, 	-- $21: EXTENDED_PAYMENT_PLAN BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: IS_PRE_COLLECTIONS_PLAN BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: IS_LOAN_MATURED BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: IS_LOAN_NOT_MATURED BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: IS_LOAN_INACTIVE BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: IS_LOAN_NOT_INACTIVE BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: REQUIRE_SIGNATURE BOOLEAN NOT NULL
		($28)::number, 	-- $28: BROKEN_PTP_FEE NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: PTP_FEE NUMBER(10,4) NOT NULL
		($30)::boolean, 	-- $30: PTP_FEE_IS_PER_LOAN BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: DO_NOT_SEND_LETTERS BOOLEAN NOT NULL
		($32)::boolean, 	-- $32: CUSTOMER_CONFIRMATION_REQUIRED BOOLEAN NOT NULL
		($33)::int, 	-- $33: CUSTOMER_CONFIRMATION_MIN_PAYMENTS_REQUIRED INT NOT NULL
		($34)::int, 	-- $34: RI_AGE_MIN INT NOT NULL
		($35)::int, 	-- $35: RI_AGE_MAX INT NOT NULL
		($36)::boolean, 	-- $36: ALLOW_CALLS BOOLEAN NOT NULL
		($37)::boolean, 	-- $37: CONTINUE_AUTOMATED_COL_ATTEMPTS BOOLEAN NOT NULL
		($38)::boolean, 	-- $38: NEVER_BREAK_PTP BOOLEAN NOT NULL
		($39)::int, 	-- $39: PTP_PAYMENT_PLAN_PAYMENT_SCHEDULE_KEY INT NOT NULL
		($40)::int, 	-- $40: PTP_PAYMENT_PLAN_DUE_DATE_CHANGE_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($41), 	-- $41: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($42)::char, 	-- $42: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($43), 	-- $43: DATE_UPDATED TIMESTAMP_LTZ NULL
		($44)::char, 	-- $44: UPDATED_BY CHAR(8000) NULL
		($45)::boolean, 	-- $45: PROMPT_FOR_SIGNATURE BOOLEAN NOT NULL
		to_timestamp_ntz($46), 	-- $46: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($47), 	-- $47: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($48)::int 	-- $48: PTP_PAYMENT_PLAN_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanConfig_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 905: PTPPaymentPlanConfigDocumentXRef
COPY INTO ARES.STG.SRC_PTPPaymentPlanConfigDocumentXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::char, 	-- $2: LOAN_DOC_LANGUAGE CHAR(8000) NOT NULL
		($3)::int, 	-- $3: LOAN_DOC_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5) 	-- $5: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanConfigDocumentXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanConfigDocumentXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanConfigDocumentXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanConfigDocumentXRef_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanConfigDocumentXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 906: PTPPaymentPlanConfigDocumentXRefHistory
COPY INTO ARES.STG.SRC_PTPPaymentPlanConfigDocumentXRefHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::char, 	-- $2: LOAN_DOC_LANGUAGE CHAR(8000) NOT NULL
		($3)::int, 	-- $3: LOAN_DOC_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($5) 	-- $5: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanConfigDocumentXRefHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanConfigDocumentXRefHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanConfigDocumentXRefHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanConfigDocumentXRefHistory_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanConfigDocumentXRefHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 907: PTPPaymentPlanConfigHistory
COPY INTO ARES.STG.SRC_PTPPaymentPlanConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::int, 	-- $4: PAYMENTS_NUM_MIN INT NOT NULL
		($5)::int, 	-- $5: PAYMENTS_NUM_MAX INT NOT NULL
		($6)::int, 	-- $6: DEFAULT_NUM_PAYMENTS INT NOT NULL
		($7)::int, 	-- $7: DAYS_EXTEND_BEYOND_ORIG_DUE_MAX INT NOT NULL
		($8)::int, 	-- $8: DAYS_BETWEEN_PAYMENTS_MIN INT NOT NULL
		($9)::int, 	-- $9: DAYS_BETWEEN_PAYMENTS_MAX INT NOT NULL
		($10)::int, 	-- $10: DAYS_BEFORE_FIRST_PAYMENT_MIN INT NOT NULL
		($11)::int, 	-- $11: FIRST_PAYMENT_PERCENT INT NOT NULL
		($12)::int, 	-- $12: GRACE_DAYS INT NOT NULL
		($13)::boolean, 	-- $13: MOD_APPROVAL_REQ BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: DM_CRM_APPROVAL_REQ BOOLEAN NOT NULL
		($15)::int, 	-- $15: AUDIT_CATEGORY INT NOT NULL
		($16)::int, 	-- $16: PLAN_LENGTH_MIN_DAYS INT NOT NULL
		($17)::int, 	-- $17: PLAN_LENGTH_MAX_DAYS INT NOT NULL
		($18)::int, 	-- $18: PLAN_COUNT_LIMIT INT NOT NULL
		($19)::int, 	-- $19: PLAN_COUNT_LIMIT_LENGTH_DAYS INT NOT NULL
		($20)::int, 	-- $20: PLAN_ALLOWED_PRIOR_DUE_DATE_DAYS INT NOT NULL
		($21)::boolean, 	-- $21: EXTENDED_PAYMENT_PLAN BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: IS_PRE_COLLECTIONS_PLAN BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: IS_LOAN_MATURED BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: IS_LOAN_NOT_MATURED BOOLEAN NOT NULL
		($25)::boolean, 	-- $25: IS_LOAN_INACTIVE BOOLEAN NOT NULL
		($26)::boolean, 	-- $26: IS_LOAN_NOT_INACTIVE BOOLEAN NOT NULL
		($27)::boolean, 	-- $27: REQUIRE_SIGNATURE BOOLEAN NOT NULL
		($28)::number, 	-- $28: BROKEN_PTP_FEE NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: PTP_FEE NUMBER(10,4) NOT NULL
		($30)::boolean, 	-- $30: PTP_FEE_IS_PER_LOAN BOOLEAN NOT NULL
		($31)::boolean, 	-- $31: DO_NOT_SEND_LETTERS BOOLEAN NOT NULL
		($32)::boolean, 	-- $32: CUSTOMER_CONFIRMATION_REQUIRED BOOLEAN NOT NULL
		($33)::int, 	-- $33: CUSTOMER_CONFIRMATION_MIN_PAYMENTS_REQUIRED INT NOT NULL
		($34)::int, 	-- $34: RI_AGE_MIN INT NOT NULL
		($35)::int, 	-- $35: RI_AGE_MAX INT NOT NULL
		($36)::boolean, 	-- $36: ALLOW_CALLS BOOLEAN NOT NULL
		($37)::boolean, 	-- $37: CONTINUE_AUTOMATED_COL_ATTEMPTS BOOLEAN NOT NULL
		($38)::boolean, 	-- $38: NEVER_BREAK_PTP BOOLEAN NOT NULL
		($39)::int, 	-- $39: PTP_PAYMENT_PLAN_PAYMENT_SCHEDULE_KEY INT NOT NULL
		($40)::int, 	-- $40: PTP_PAYMENT_PLAN_DUE_DATE_CHANGE_TYPE_KEY INT NOT NULL
		to_timestamp_ntz($41), 	-- $41: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($42)::char, 	-- $42: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($43), 	-- $43: DATE_UPDATED TIMESTAMP_LTZ NULL
		($44)::char, 	-- $44: UPDATED_BY CHAR(8000) NULL
		($45)::boolean, 	-- $45: PROMPT_FOR_SIGNATURE BOOLEAN NOT NULL
		to_timestamp_ntz($46), 	-- $46: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($47), 	-- $47: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($48)::int 	-- $48: PTP_PAYMENT_PLAN_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanConfigHistory_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 908: PTPPaymentPlanDueDateChangeType
COPY INTO ARES.STG.SRC_PTPPaymentPlanDueDateChangeType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_DUE_DATE_CHANGE_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanDueDateChangeType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanDueDateChangeType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanDueDateChangeType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanDueDateChangeType_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanDueDateChangeType_HIST;
[STATUS=tbd]
*/

-- // TABLE 909: PTPPaymentPlanLoanProductEnableNewLoan
COPY INTO ARES.STG.SRC_PTPPaymentPlanLoanProductEnableNewLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_ENABLE_NEW_LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanLoanProductEnableNewLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanLoanProductEnableNewLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanLoanProductEnableNewLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanLoanProductEnableNewLoan_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanLoanProductEnableNewLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 910: PTPPaymentPlanLoanProductEnableNewLoanHistory
COPY INTO ARES.STG.SRC_PTPPaymentPlanLoanProductEnableNewLoanHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_PRODUCT_ENABLE_NEW_LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanLoanProductEnableNewLoanHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanLoanProductEnableNewLoanHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanLoanProductEnableNewLoanHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanLoanProductEnableNewLoanHistory_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanLoanProductEnableNewLoanHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 911: PTPPaymentPlanPaymentMethod
COPY INTO ARES.STG.SRC_PTPPaymentPlanPaymentMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: PTP_PAYMENT_METHOD_KEY SMALLINT NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanPaymentMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanPaymentMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanPaymentMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanPaymentMethod_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanPaymentMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 912: PTPPaymentPlanPaymentMethodHistory
COPY INTO ARES.STG.SRC_PTPPaymentPlanPaymentMethodHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: PTP_PAYMENT_METHOD_KEY SMALLINT NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanPaymentMethodHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanPaymentMethodHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanPaymentMethodHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanPaymentMethodHistory_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanPaymentMethodHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 913: PTPPaymentPlanPaymentSchedule
COPY INTO ARES.STG.SRC_PTPPaymentPlanPaymentSchedule_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_PAYMENT_SCHEDULE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanPaymentSchedule/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanPaymentSchedule_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanPaymentSchedule_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanPaymentSchedule_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanPaymentSchedule_HIST;
[STATUS=tbd]
*/

-- // TABLE 914: PTPPaymentPlanSecurityGroup
COPY INTO ARES.STG.SRC_PTPPaymentPlanSecurityGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: SECURITY_GROUP_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanSecurityGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanSecurityGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanSecurityGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanSecurityGroup_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanSecurityGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 915: PTPPaymentPlanSecurityGroupHistory
COPY INTO ARES.STG.SRC_PTPPaymentPlanSecurityGroupHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: SECURITY_GROUP_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($4) 	-- $4: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanSecurityGroupHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanSecurityGroupHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanSecurityGroupHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanSecurityGroupHistory_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanSecurityGroupHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 916: PTPPaymentPlanType
COPY INTO ARES.STG.SRC_PTPPaymentPlanType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_PAYMENT_PLAN_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/PTPPaymentPlanType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PTPPaymentPlanType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PTPPaymentPlanType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PTPPaymentPlanType_HIST;
SELECT * FROM STG.WINCHK_PTPPaymentPlanType_HIST;
[STATUS=tbd]
*/

-- // TABLE 917: PurchaseService
COPY INTO ARES.STG.SRC_PurchaseService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PURCHASE_SERVICE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: GL_ACCT INT NULL
		($6)::smallint, 	-- $6: PAYMENT_FROM SMALLINT NOT NULL
		($7)::number, 	-- $7: TOT_COST NUMBER(10,4) NOT NULL
		($8)::int, 	-- $8: TRANS_DETAIL_KEY INT NOT NULL
		($9)::varchar, 	-- $9: OPTPLUS_CARD_FIRST VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: OPTPLUS_CARD_LAST VARCHAR(8000) NOT NULL
		($11)::boolean, 	-- $11: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($12) 	-- $12: REVERSED_DATE TIMESTAMP_LTZ NULL
    FROM @ETL.INBOUND/SRC/Backfill/PurchaseService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*PurchaseService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_PurchaseService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_PurchaseService_HIST;
SELECT * FROM STG.WINCHK_PurchaseService_HIST;
[STATUS=tbd]
*/

-- // TABLE 918: Race
COPY INTO ARES.STG.SRC_Race_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: RACE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::char 	-- $3: POLICE_GOLD_EXPORT_DESCRIPTION CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Race/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Race_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Race_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Race_HIST;
SELECT * FROM STG.WINCHK_Race_HIST;
[STATUS=tbd]
*/

-- // TABLE 919: RawDataType
COPY INTO ARES.STG.SRC_RawDataType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: RAW_DATA_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RawDataType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RawDataType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RawDataType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RawDataType_HIST;
SELECT * FROM STG.WINCHK_RawDataType_HIST;
[STATUS=tbd]
*/

-- // TABLE 920: RbcEFundBatch
COPY INTO ARES.STG.SRC_RbcEFundBatch_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RBC_EFUND_BATCH_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::smallint, 	-- $3: DETAIL_COUNT smallint NOT NULL
		($4)::number, 	-- $4: DETAIL_VALUE NUMBER(19,4) NOT NULL
		to_timestamp_ntz($5), 	-- $5: RESPONSE_DATE TIMESTAMP_LTZ NULL
		($6)::varchar, 	-- $6: SEND_FILE_NAME VARCHAR(8000) NULL
		($7)::boolean, 	-- $7: FILE_WRITTEN BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: ACCEPTED BOOLEAN NOT NULL
		($9)::int 	-- $9: BATCH_EXECUTION_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RbcEFundBatch/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RbcEFundBatch_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RbcEFundBatch_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RbcEFundBatch_HIST;
SELECT * FROM STG.WINCHK_RbcEFundBatch_HIST;
[STATUS=tbd]
*/

-- // TABLE 921: RbcEFundBatchDetail
COPY INTO ARES.STG.SRC_RbcEFundBatchDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RBC_EFUND_BATCH_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: RBC_EFUND_BATCH_KEY INT NOT NULL
		($3)::int, 	-- $3: RBC_EFUND_RESPONSE_CODE_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::int, 	-- $5: ISSUER_KEY INT NOT NULL
		($6)::bigint, 	-- $6: BANK_ROUTING_NUMBER BIGINT NOT NULL
		($7)::varchar, 	-- $7: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: EMAIL VARCHAR(8000) NOT NULL
		($9)::number, 	-- $9: AMOUNT NUMBER(10,4) NOT NULL
		($10)::boolean, 	-- $10: PROCESSED BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: FUNDED BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: VOIDED BOOLEAN NOT NULL
		($13)::int, 	-- $13: RBC_EFUND_BATCH_SUMMARY_KEY INT NULL
		($14)::varchar, 	-- $14: RESPONSE_TEXT VARCHAR(8000) NULL
		($15)::int 	-- $15: LOAN_FUNDING_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RbcEFundBatchDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RbcEFundBatchDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RbcEFundBatchDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RbcEFundBatchDetail_HIST;
SELECT * FROM STG.WINCHK_RbcEFundBatchDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 922: RbcEFundBatchSummary
COPY INTO ARES.STG.SRC_RbcEFundBatchSummary_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RBC_EFUND_BATCH_SUMMARY_KEY INT NOT NULL
		($2)::int, 	-- $2: RBC_EFUND_BATCH_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::number, 	-- $4: SUCCESS_AMOUNT NUMBER(19,4) NOT NULL
		($5)::smallint, 	-- $5: SUCCESS_COUNT smallint NOT NULL
		($6)::number, 	-- $6: UNSUCCESS_AMOUNT NUMBER(19,4) NOT NULL
		($7)::smallint, 	-- $7: UNSUCCESS_COUNT smallint NOT NULL
		($8)::boolean 	-- $8: PROCESSED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RbcEFundBatchSummary/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RbcEFundBatchSummary_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RbcEFundBatchSummary_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RbcEFundBatchSummary_HIST;
SELECT * FROM STG.WINCHK_RbcEFundBatchSummary_HIST;
[STATUS=tbd]
*/

-- // TABLE 923: RbcEFundResponseCode
COPY INTO ARES.STG.SRC_RbcEFundResponseCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RBC_EFUND_RESPONSE_CODE_KEY INT NOT NULL
		($2)::char, 	-- $2: RBC_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: COMMENTS VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RbcEFundResponseCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RbcEFundResponseCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RbcEFundResponseCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RbcEFundResponseCode_HIST;
SELECT * FROM STG.WINCHK_RbcEFundResponseCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 924: RbcEFundSecurity
COPY INTO ARES.STG.SRC_RbcEFundSecurity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SECURITY_CODE INT NOT NULL
		($2)::int 	-- $2: LOAN_FUNDING_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RbcEFundSecurity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RbcEFundSecurity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RbcEFundSecurity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RbcEFundSecurity_HIST;
SELECT * FROM STG.WINCHK_RbcEFundSecurity_HIST;
[STATUS=tbd]
*/

-- // TABLE 925: ReasonForArrears
COPY INTO ARES.STG.SRC_ReasonForArrears_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REASON_FOR_ARREARS_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE_UPDATED DATE NOT NULL
		($3)::int, 	-- $3: UPDATED_TELLER_ID_KEY INT NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::boolean 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ReasonForArrears/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ReasonForArrears_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ReasonForArrears_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ReasonForArrears_HIST;
SELECT * FROM STG.WINCHK_ReasonForArrears_HIST;
[STATUS=tbd]
*/

-- // TABLE 926: Receipt
COPY INTO ARES.STG.SRC_Receipt_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RECEIPT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::text, 	-- $3: RECEIPT_DATA text NOT NULL
		to_timestamp_ntz($4) 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Receipt/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Receipt_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Receipt_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Receipt_HIST;
SELECT * FROM STG.WINCHK_Receipt_HIST;
[STATUS=tbd]
*/

-- // TABLE 927: RedactedWords
COPY INTO ARES.STG.SRC_RedactedWords_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REDACTED_WORDS_KEY INT NOT NULL
		($2)::varchar 	-- $2: WORD VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RedactedWords/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RedactedWords_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RedactedWords_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RedactedWords_HIST;
SELECT * FROM STG.WINCHK_RedactedWords_HIST;
[STATUS=tbd]
*/

-- // TABLE 928: ReferralMethod
COPY INTO ARES.STG.SRC_ReferralMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: REFERRAL_METHOD_KEY smallint NOT NULL
		($2)::char, 	-- $2: REFERRAL_CODE CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: REFERRAL_DESC VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: CURO_ORDER smallint NOT NULL
		($5)::smallint 	-- $5: WEB_ORDER smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ReferralMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ReferralMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ReferralMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ReferralMethod_HIST;
SELECT * FROM STG.WINCHK_ReferralMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 929: RefinanceLoanApplication
COPY INTO ARES.STG.SRC_RefinanceLoanApplication_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REFINANCE_LOAN_APPLICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: PARENT_LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: NEW_LOAN_KEY INT NULL
		to_timestamp_ntz($4), 	-- $4: ENTERED_DATE TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		($6)::int, 	-- $6: STATUS INT NOT NULL
		($7)::int, 	-- $7: CUSTOMER_KEY INT NOT NULL
		($8)::decimal, 	-- $8: PAY_TO_CUSTOMER_AMOUNT DECIMAL(38,0) NOT NULL
		($9)::decimal, 	-- $9: RECEIVE_FROM_CUSTOMER_AMOUNT DECIMAL(38,0) NOT NULL
		($10)::varchar, 	-- $10: DENIAL_REASON_CODE VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: DENIAL_REASON_TEXT VARCHAR(8000) NULL
		($12)::datetime, 	-- $12: DENIAL_DATE datetime NULL
		($13)::boolean, 	-- $13: ENROLL_IN_INSURANCE BOOLEAN NOT NULL
		($14)::boolean 	-- $14: ENROLL_IN_AUTOPAY BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RefinanceLoanApplication/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RefinanceLoanApplication_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RefinanceLoanApplication_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RefinanceLoanApplication_HIST;
SELECT * FROM STG.WINCHK_RefinanceLoanApplication_HIST;
[STATUS=tbd]
*/

-- // TABLE 930: RefinanceLoanApplicationPendingReason
COPY INTO ARES.STG.SRC_RefinanceLoanApplicationPendingReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REFINANCE_LOAN_APPLICATION_PENDING_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: REFINANCE_LOAN_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: PENDING_REASON_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: RESOLUTION_DATE TIMESTAMP_LTZ NULL
		($5)::char, 	-- $5: RESOLVED_BY CHAR(8000) NULL
		($6)::int, 	-- $6: PENDING_REASON_RESOLVE_REASON_KEY INT NULL
		($7)::boolean, 	-- $7: IS_SYSTEM_ADDED BOOLEAN NOT NULL
		($8)::char, 	-- $8: ADDED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($9) 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RefinanceLoanApplicationPendingReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RefinanceLoanApplicationPendingReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RefinanceLoanApplicationPendingReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RefinanceLoanApplicationPendingReason_HIST;
SELECT * FROM STG.WINCHK_RefinanceLoanApplicationPendingReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 931: RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse
COPY INTO ARES.STG.SRC_RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REFINANCE_LOAN_APPLICATION_PENDING_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: CONFIGURABLE_QUESTION_KEY INT NOT NULL
		($3)::int, 	-- $3: DISPLAY_ORDER INT NOT NULL
		($4)::boolean, 	-- $4: IS_RESPONSE_REQUIRED BOOLEAN NOT NULL
		($5)::varchar 	-- $5: RESPONSE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse_HIST;
SELECT * FROM STG.WINCHK_RefinanceLoanApplicationPendingReasonConfigurableQuestionResponse_HIST;
[STATUS=tbd]
*/

-- // TABLE 932: Region
COPY INTO ARES.STG.SRC_Region_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: REGION_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: REGION_NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: TELLER_ID_KEY INT NULL
		($4)::smallint 	-- $4: REGION_NUMBER SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Region/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Region_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Region_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Region_HIST;
SELECT * FROM STG.WINCHK_Region_HIST;
[STATUS=tbd]
*/

-- // TABLE 933: RepoCaseHistory
COPY INTO ARES.STG.SRC_RepoCaseHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: REPO_CASE_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: COLLECTION_NOTE_KEY INT NOT NULL
		($3)::int, 	-- $3: TITLELOAN_KEY INT NOT NULL
		($4)::int, 	-- $4: RISREPT_KEY INT NOT NULL
		($5)::varchar, 	-- $5: PREVIOUS_REPO_CASE_NUM VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: UPDATED_REPO_CASE_NUM VARCHAR(8000) NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: UPDATED_DATE TIMESTAMP_LTZ NOT NULL
		($9)::boolean 	-- $9: IS_NATIONAL_CASE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RepoCaseHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RepoCaseHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RepoCaseHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RepoCaseHistory_HIST;
SELECT * FROM STG.WINCHK_RepoCaseHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 934: ResumeInterestType
COPY INTO ARES.STG.SRC_ResumeInterestType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: RESUME_INTEREST_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: RESUME_INTEREST_TYPE_NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ResumeInterestType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ResumeInterestType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ResumeInterestType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ResumeInterestType_HIST;
SELECT * FROM STG.WINCHK_ResumeInterestType_HIST;
[STATUS=tbd]
*/

-- // TABLE 935: ReturnCheckDetail
COPY INTO ARES.STG.SRC_ReturnCheckDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RETURN_CHECK_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: RETURN_CHECK_FILE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: BANK_ROUTING_NUMBER VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: BANK_ACCOUNT_NUMBER VARCHAR(8000) NOT NULL
		($5)::decimal, 	-- $5: CHARGEBACK_AMT DECIMAL(38,0) NOT NULL
		($6)::varchar, 	-- $6: CUSTOMER_NUMBER VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: CUSTOMER_NAME VARCHAR(8000) NOT NULL
		($8)::int, 	-- $8: CURRENCY_KEY INT NOT NULL
		($9)::date, 	-- $9: ORIGINAL_DEPOSIT_DATE DATE NOT NULL
		($10)::varchar, 	-- $10: PARSED_LOCATION VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: SEQUENCE_NUMBER VARCHAR(8000) NOT NULL
		($12)::char 	-- $12: RETURN_REASON_CODE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ReturnCheckDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ReturnCheckDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ReturnCheckDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ReturnCheckDetail_HIST;
SELECT * FROM STG.WINCHK_ReturnCheckDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 936: ReturnCheckFile
COPY INTO ARES.STG.SRC_ReturnCheckFile_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RETURN_CHECK_FILE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: CURRENCY_KEY INT NOT NULL
		($4)::int, 	-- $4: FILE_CREATION_NUMBER INT NOT NULL
		($5)::date, 	-- $5: FILE_CREATION_DATE DATE NOT NULL
		($6)::int, 	-- $6: TOTAL_RECORDS INT NOT NULL
		($7)::decimal 	-- $7: TOTAL_CHARGEBACKS DECIMAL(38,0) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ReturnCheckFile/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ReturnCheckFile_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ReturnCheckFile_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ReturnCheckFile_HIST;
SELECT * FROM STG.WINCHK_ReturnCheckFile_HIST;
[STATUS=tbd]
*/

-- // TABLE 937: RightPartyContact
COPY INTO ARES.STG.SRC_RightPartyContact_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RIGHT_PARTY_CONTACT_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NULL
		($5)::date 	-- $5: CALL_DATE DATE NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RightPartyContact/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RightPartyContact_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RightPartyContact_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RightPartyContact_HIST;
SELECT * FROM STG.WINCHK_RightPartyContact_HIST;
[STATUS=tbd]
*/

-- // TABLE 938: RIPTPPaymentPlanConfig
COPY INTO ARES.STG.SRC_RIPTPPaymentPlanConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PTP_CONFIG_KEY INT NOT NULL
		($2)::varchar, 	-- $2: PTP_PLAN_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: PTP_PL_TYPES VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: PTP_LOCATIONS VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: PTP_PAYMENT_METHODS VARCHAR(8000) NOT NULL
		($6)::smallint, 	-- $6: PTP_MAX_NUMBER_PAYMENTS SMALLINT NOT NULL
		($7)::smallint, 	-- $7: PTP_MAX_NUMBER_PLAN_DAYS smallint NOT NULL
		($8)::smallint, 	-- $8: PTP_DEFAULT_PAYMENT_NUMBER SMALLINT NOT NULL
		($9)::smallint, 	-- $9: PTP_FIRST_PAYMENT_PERCENT smallint NOT NULL
		($10)::smallint, 	-- $10: PTP_MAX_DAYS_EXT_DAYS smallint NOT NULL
		($11)::smallint, 	-- $11: PTP_DEF_DAYS_BETWEEN_PMTS smallint NOT NULL
		($12)::smallint, 	-- $12: PTP_GRACE_DAYS smallint NOT NULL
		($13)::boolean, 	-- $13: PTP_MOD_APPROVAL_REQ BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: PTP_DM_CRM_APPROVAL_REQ BOOLEAN NOT NULL
		($15)::smallint, 	-- $15: PTP_AUDIT_CATEGORY smallint NULL
		($16)::varchar, 	-- $16: SECURITY VARCHAR(8000) NULL
		($17)::boolean, 	-- $17: EXTENDED_PAYMENT_PLAN BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: STATE_SPECIFIC_PAYMENT_PLAN BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: IS_INTERNET BOOLEAN NOT NULL
		($20)::number, 	-- $20: BROKEN_PTP_FEE NUMBER(10,4) NOT NULL
		($21)::boolean, 	-- $21: IS_LOAN_MATURED BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: IS_LOAN_INACTIVE BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: IS_LOAN_NOT_MATURED BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: IS_LOAN_NOT_INACTIVE BOOLEAN NOT NULL
		($25)::smallint, 	-- $25: PTP_MIN_NUMBER_PAYMENTS SMALLINT NOT NULL
		($26)::boolean, 	-- $26: REQUIRE_SIGNATURE BOOLEAN NOT NULL
		($27)::boolean 	-- $27: ALLOW_MULTIPLE_EXTENDED_PAYMENT_PLANS_PER_YEAR BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RIPTPPaymentPlanConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RIPTPPaymentPlanConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RIPTPPaymentPlanConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RIPTPPaymentPlanConfig_HIST;
SELECT * FROM STG.WINCHK_RIPTPPaymentPlanConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 939: RIS
COPY INTO ARES.STG.SRC_RIS_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        to_timestamp_ntz($1), 	-- $1: DATE TIMESTAMP_LTZ NOT NULL
		($2)::char, 	-- $2: TLR CHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::number, 	-- $4: AMOUNT NUMBER(10,4) NOT NULL
		($5)::varchar, 	-- $5: NOTES VARCHAR(8000) NULL
		to_timestamp_ntz($6), 	-- $6: FOLLOWUP TIMESTAMP_LTZ NULL
		($7)::smallint, 	-- $7: PTYP SMALLINT NULL
		to_timestamp_ntz($8), 	-- $8: xtime TIMESTAMP_LTZ NULL
		to_timestamp_ntz($9), 	-- $9: ztime TIMESTAMP_LTZ NULL
		to_timestamp_ntz($10), 	-- $10: btime TIMESTAMP_LTZ NULL
		($11)::int, 	-- $11: RIS_Id INT NOT NULL
		($12)::datetime, 	-- $12: BTIME2 datetime NULL
		($13)::boolean, 	-- $13: prepay BOOLEAN NOT NULL
		($14)::int, 	-- $14: dos_refno INT NULL
		($15)::int, 	-- $15: reverse_ris_id INT NULL
		($16)::int, 	-- $16: Ris_Audit_ID INT NOT NULL
		($17)::int, 	-- $17: Ris_Task_ID INT NOT NULL
		($18)::int, 	-- $18: risrept_key INT NOT NULL
		($19)::varchar, 	-- $19: DOS_MIGRATED_ID VARCHAR(8000) NULL
		($20)::int, 	-- $20: TRANS_DETAIL_KEY INT NULL
		($21)::int 	-- $21: GL_ACCT INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RIS/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RIS_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RIS_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RIS_HIST;
SELECT * FROM STG.WINCHK_RIS_HIST;
[STATUS=tbd]
*/

-- // TABLE 940: RISAUDIT
COPY INTO ARES.STG.SRC_RISAUDIT_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: AUDIT VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: DESC VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SHORT VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: RIS_Audit_Id INT NOT NULL
		($5)::boolean, 	-- $5: Displayed BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_AD_ASTRA BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_IN_LEGAL_STATUS BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: DIALER_EXCLUDE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: SUSPEND_INTEREST BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: REPOSSESSION BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: BLOCK_EMAILS BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: IS_ELIGIBLE_FOR_REPO BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: BLOCK_STATEMENTS BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: IS_PTP BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: IS_ELIGIBLE_FOR_SETTLEMENT BOOLEAN NOT NULL
		($16)::boolean, 	-- $16: CAN_REFINANCE BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: ALLOW_PTP BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: MAKE_INACTIVE BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: IS_PAYMENT_RESTRICTED BOOLEAN NOT NULL
		($20)::boolean 	-- $20: EXCLUDE_FROM_SCHEDULED_PAYMENTS BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RISAUDIT/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RISAUDIT_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RISAUDIT_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RISAUDIT_HIST;
SELECT * FROM STG.WINCHK_RISAUDIT_HIST;
[STATUS=tbd]
*/

-- // TABLE 941: RISREPT
COPY INTO ARES.STG.SRC_RISREPT_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        to_timestamp_ntz($1), 	-- $1: DATE TIMESTAMP_LTZ NOT NULL
		($2)::char, 	-- $2: TLR CHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::number, 	-- $4: AMOUNT NUMBER(10,4) NULL
		($5)::number, 	-- $5: SURCHG NUMBER(10,4) NOT NULL
		to_timestamp_ntz($6), 	-- $6: FOLLOWUP TIMESTAMP_LTZ NULL
		($7)::int, 	-- $7: CUSTOMER_KEY INT NOT NULL
		($8)::int, 	-- $8: ISSUER_KEY INT NOT NULL
		to_timestamp_ntz($9), 	-- $9: MANUAL_ACH_DATE TIMESTAMP_LTZ NULL
		($10)::char, 	-- $10: MANUAL_TELLER CHAR(8000) NULL
		($11)::int, 	-- $11: RISREPT_KEY INT NOT NULL
		($12)::int, 	-- $12: LOAN_KEY INT NULL
		($13)::number, 	-- $13: RI_BALANCE NUMBER(10,4) NOT NULL
		($14)::smallint, 	-- $14: PRA SMALLINT NOT NULL
		($15)::int, 	-- $15: ris_type_id INT NOT NULL
		($16)::int, 	-- $16: Ris_Audit_ID INT NULL
		($17)::boolean, 	-- $17: STOP_PAYMENT BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: reversed BOOLEAN NOT NULL
		to_timestamp_ntz($19), 	-- $19: reversed_date TIMESTAMP_LTZ NULL
		($20)::int, 	-- $20: CASHED_CHECK_KEY INT NULL
		($21)::int, 	-- $21: DOS_REFNO INT NULL
		($22)::varchar, 	-- $22: DOS_MIGRATED_ID VARCHAR(8000) NULL
		($23)::number, 	-- $23: MANUAL_ACH_AMOUNT NUMBER(10,4) NULL
		($24)::int, 	-- $24: MANUAL_ACH_PTP INT NULL
		to_timestamp_ntz($25), 	-- $25: LAST_CALL_DATE TIMESTAMP_LTZ NULL
		($26)::smallint, 	-- $26: LAST_CALL_HOST_CODE smallint NULL
		($27)::smallint, 	-- $27: RISK_ASSESSMENT SMALLINT NOT NULL
		($28)::int, 	-- $28: COLLECTION_AGENCY_KEY INT NOT NULL
		($29)::int, 	-- $29: ASSIGNMENT_NUMBER INT NOT NULL
		($30)::char, 	-- $30: CR_TELLER CHAR(8000) NOT NULL
		($31)::int, 	-- $31: REASON_FOR_ARREARS_KEY INT NOT NULL
		to_timestamp_ntz($32), 	-- $32: LAST_DCARD_ATTEMPT_DATE TIMESTAMP_LTZ NULL
		($33)::int, 	-- $33: RI_URGENT_NOTE_KEY INT NOT NULL
		($34)::boolean, 	-- $34: KEEP_WITH_AGENCY BOOLEAN NOT NULL
		($35)::date, 	-- $35: AD_ASTRA_ASSIGNED_DATE DATE NULL
		($36)::smallint, 	-- $36: COLLECTIONS_RISK_SCORE smallint NOT NULL
		($37)::varchar 	-- $37: REFERENCE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RISREPT/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RISREPT_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RISREPT_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RISREPT_HIST;
SELECT * FROM STG.WINCHK_RISREPT_HIST;
[STATUS=tbd]
*/

-- // TABLE 942: RisReptDoNotContact
COPY INTO ARES.STG.SRC_RisReptDoNotContact_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RIS_REPT_DO_NOT_CONTACT_KEY INT NOT NULL
		($2)::int, 	-- $2: RIS_REPT_KEY INT NOT NULL
		($3)::int, 	-- $3: RIS_REPT_DO_NOT_CONTACT_TYPE_KEY INT NOT NULL
		($4)::int, 	-- $4: RIS_REPT_DO_NOT_CONTACT_REASON_KEY INT NOT NULL
		($5)::datetime, 	-- $5: START_DATE datetime NOT NULL
		($6)::char, 	-- $6: START_TELLER CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: END_DATE datetime NULL
		($8)::char 	-- $8: END_TELLER CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RisReptDoNotContact/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RisReptDoNotContact_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RisReptDoNotContact_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RisReptDoNotContact_HIST;
SELECT * FROM STG.WINCHK_RisReptDoNotContact_HIST;
[STATUS=tbd]
*/

-- // TABLE 943: RisReptDoNotContactReason
COPY INTO ARES.STG.SRC_RisReptDoNotContactReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RIS_REPT_DO_NOT_CONTACT_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RisReptDoNotContactReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RisReptDoNotContactReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RisReptDoNotContactReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RisReptDoNotContactReason_HIST;
SELECT * FROM STG.WINCHK_RisReptDoNotContactReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 944: RisReptDoNotContactType
COPY INTO ARES.STG.SRC_RisReptDoNotContactType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RIS_REPT_DO_NOT_CONTACT_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RisReptDoNotContactType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RisReptDoNotContactType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RisReptDoNotContactType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RisReptDoNotContactType_HIST;
SELECT * FROM STG.WINCHK_RisReptDoNotContactType_HIST;
[STATUS=tbd]
*/

-- // TABLE 945: RisTask
COPY INTO ARES.STG.SRC_RisTask_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: TASK CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: DESC VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SHORT VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: RIS_TASK_ID INT NOT NULL
		($5)::boolean 	-- $5: DISPLAYED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RisTask/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RisTask_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RisTask_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RisTask_HIST;
SELECT * FROM STG.WINCHK_RisTask_HIST;
[STATUS=tbd]
*/

-- // TABLE 946: RISTYPE
COPY INTO ARES.STG.SRC_RISTYPE_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: TYPE VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: DESC VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: SHORT VARCHAR(8000) NULL
		($4)::int 	-- $4: RIS_Type_Id INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RISTYPE/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RISTYPE_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RISTYPE_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RISTYPE_HIST;
SELECT * FROM STG.WINCHK_RISTYPE_HIST;
[STATUS=tbd]
*/

-- // TABLE 947: RitaPwd
COPY INTO ARES.STG.SRC_RitaPwd_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CLIENT_ID VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: USER_ID VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: USER_PW_SEQ INT NOT NULL
		($4)::varchar, 	-- $4: USER_STAT VARCHAR(8000) NULL
		($5)::varchar 	-- $5: USER_PW VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RitaPwd/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RitaPwd_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RitaPwd_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RitaPwd_HIST;
SELECT * FROM STG.WINCHK_RitaPwd_HIST;
[STATUS=tbd]
*/

-- // TABLE 948: RiUrgentNote
COPY INTO ARES.STG.SRC_RiUrgentNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RI_URGENT_NOTE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: URGENT_NOTE_TEXT VARCHAR(8000) NOT NULL
		($3)::date, 	-- $3: DATE_ENTERED DATE NOT NULL
		($4)::int, 	-- $4: TELLER_ID_KEY INT NOT NULL
		($5)::boolean 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RiUrgentNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RiUrgentNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RiUrgentNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RiUrgentNote_HIST;
SELECT * FROM STG.WINCHK_RiUrgentNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 949: RuleDef
COPY INTO ARES.STG.SRC_RuleDef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RULE_DEF_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_TYPE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: DESCRIPTION VARCHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: IS_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_DELETED TIMESTAMP_LTZ NULL
		($8)::char, 	-- $8: DELETED_BY CHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($10)::char, 	-- $10: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_UPDATED TIMESTAMP_LTZ NULL
		($12)::char 	-- $12: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RuleDef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RuleDef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RuleDef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RuleDef_HIST;
SELECT * FROM STG.WINCHK_RuleDef_HIST;
[STATUS=tbd]
*/

-- // TABLE 950: RuleDefEdit
COPY INTO ARES.STG.SRC_RuleDefEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RULE_DEF_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NULL
		($7)::varchar 	-- $7: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RuleDefEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RuleDefEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RuleDefEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RuleDefEdit_HIST;
SELECT * FROM STG.WINCHK_RuleDefEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 951: RuleDefSet
COPY INTO ARES.STG.SRC_RuleDefSet_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RULE_DEF_SET_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_TYPE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RuleDefSet/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RuleDefSet_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RuleDefSet_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RuleDefSet_HIST;
SELECT * FROM STG.WINCHK_RuleDefSet_HIST;
[STATUS=tbd]
*/

-- // TABLE 952: RuleDefSetDetail
COPY INTO ARES.STG.SRC_RuleDefSetDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RULE_DEF_SET_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_SET_KEY INT NOT NULL
		($3)::int, 	-- $3: RULE_DEF_KEY INT NOT NULL
		($4)::int, 	-- $4: PRIORITY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/RuleDefSetDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RuleDefSetDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RuleDefSetDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RuleDefSetDetail_HIST;
SELECT * FROM STG.WINCHK_RuleDefSetDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 953: RuleDefSetDetailEdit
COPY INTO ARES.STG.SRC_RuleDefSetDetailEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RULE_DEF_SET_DETAIL_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: RULE_DEF_SET_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: ACTION_TYPE VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RuleDefSetDetailEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RuleDefSetDetailEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RuleDefSetDetailEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RuleDefSetDetailEdit_HIST;
SELECT * FROM STG.WINCHK_RuleDefSetDetailEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 954: RuleDefType
COPY INTO ARES.STG.SRC_RuleDefType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: RULE_DEF_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_UPDATED TIMESTAMP_LTZ NULL
		($7)::char 	-- $7: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/RuleDefType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*RuleDefType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_RuleDefType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_RuleDefType_HIST;
SELECT * FROM STG.WINCHK_RuleDefType_HIST;
[STATUS=tbd]
*/

-- // TABLE 955: ScannedDocument
COPY INTO ARES.STG.SRC_ScannedDocument_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SCANNED_DOCUMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_DOC_KEY INT NULL
		($4)::int, 	-- $4: DOCUMENT_SYSTEM_KEY INT NULL
		($5)::datetime 	-- $5: DOCUMENT_SYSTEM_SCAN_DATE datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScannedDocument/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScannedDocument_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScannedDocument_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScannedDocument_HIST;
SELECT * FROM STG.WINCHK_ScannedDocument_HIST;
[STATUS=tbd]
*/

-- // TABLE 956: ScannedDocumentOverride
COPY INTO ARES.STG.SRC_ScannedDocumentOverride_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SCANNED_DOCUMENT_OVERRIDE_KEY INT NOT NULL
		($2)::int, 	-- $2: SCANNED_DOCUMENT_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::char 	-- $5: CODE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScannedDocumentOverride/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScannedDocumentOverride_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScannedDocumentOverride_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScannedDocumentOverride_HIST;
SELECT * FROM STG.WINCHK_ScannedDocumentOverride_HIST;
[STATUS=tbd]
*/

-- // TABLE 957: ScheduledLoanMod
COPY INTO ARES.STG.SRC_ScheduledLoanMod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SCHEDULED_LOAN_MOD_KEY INT NOT NULL
		($2)::int, 	-- $2: PROMISE_TO_PAY_KEY INT NOT NULL
		($3)::smallint, 	-- $3: SCHEDULED_LOAN_MOD_TYPE_KEY smallint NOT NULL
		($4)::smallint, 	-- $4: SCHEDULED_LOAN_MOD_STATUS_KEY smallint NOT NULL
		($5)::varchar, 	-- $5: CANCEL_REASON VARCHAR(8000) NULL
		($6)::int, 	-- $6: SKIP_PAYMENT_KEY INT NULL
		($7)::int 	-- $7: LOAN_PAYMENT_FORGIVEN_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScheduledLoanMod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScheduledLoanMod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScheduledLoanMod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScheduledLoanMod_HIST;
SELECT * FROM STG.WINCHK_ScheduledLoanMod_HIST;
[STATUS=tbd]
*/

-- // TABLE 958: ScheduledLoanModStatus
COPY INTO ARES.STG.SRC_ScheduledLoanModStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: SCHEDULED_LOAN_MOD_STATUS_KEY smallint NOT NULL
		($2)::varchar 	-- $2: STATUS VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScheduledLoanModStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScheduledLoanModStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScheduledLoanModStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScheduledLoanModStatus_HIST;
SELECT * FROM STG.WINCHK_ScheduledLoanModStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 959: ScheduledLoanModType
COPY INTO ARES.STG.SRC_ScheduledLoanModType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: SCHEDULED_LOAN_MOD_TYPE_KEY smallint NOT NULL
		($2)::varchar, 	-- $2: TYPE VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScheduledLoanModType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScheduledLoanModType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScheduledLoanModType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScheduledLoanModType_HIST;
SELECT * FROM STG.WINCHK_ScheduledLoanModType_HIST;
[STATUS=tbd]
*/

-- // TABLE 960: ScheduledPayment
COPY INTO ARES.STG.SRC_ScheduledPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SCHEDULED_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::smallint, 	-- $3: PAYMENT_NUM smallint NOT NULL
		($4)::boolean, 	-- $4: PAYMENT_AUTHORIZED BOOLEAN NOT NULL
		($5)::number 	-- $5: PAYMENT_AUTHORIZED_AMT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScheduledPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScheduledPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScheduledPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScheduledPayment_HIST;
SELECT * FROM STG.WINCHK_ScheduledPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 961: ScoringPendingReasonXref
COPY INTO ARES.STG.SRC_ScoringPendingReasonXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: PENDING_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: SCORING_PENDING_REASON_CODE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ScoringPendingReasonXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ScoringPendingReasonXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ScoringPendingReasonXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ScoringPendingReasonXref_HIST;
SELECT * FROM STG.WINCHK_ScoringPendingReasonXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 962: SDNAddress
COPY INTO ARES.STG.SRC_SDNAddress_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SDN_ADDRESS_KEY INT NOT NULL
		($2)::int, 	-- $2: SDN_MAIN_KEY INT NOT NULL
		($3)::varchar, 	-- $3: ADDRESS VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: CITY VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: COUNTRY VARCHAR(8000) NULL
		($6)::varchar 	-- $6: ADD_REMARKS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/SDNAddress/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SDNAddress_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SDNAddress_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SDNAddress_HIST;
SELECT * FROM STG.WINCHK_SDNAddress_HIST;
[STATUS=tbd]
*/

-- // TABLE 963: SDNAlternate
COPY INTO ARES.STG.SRC_SDNAlternate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SDN_ALTERNATE_KEY INT NOT NULL
		($2)::int, 	-- $2: SDN_MAIN_KEY INT NOT NULL
		($3)::varchar, 	-- $3: ALT_TYPE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: ALT_NAME VARCHAR(8000) NULL
		($5)::varchar 	-- $5: ALT_REMARKS VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/SDNAlternate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SDNAlternate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SDNAlternate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SDNAlternate_HIST;
SELECT * FROM STG.WINCHK_SDNAlternate_HIST;
[STATUS=tbd]
*/

-- // TABLE 964: SDNList
COPY INTO ARES.STG.SRC_SDNList_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: Name VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: Type VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: State VARCHAR(8000) NULL
		($4)::int 	-- $4: SDN_LIST_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SDNList/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SDNList_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SDNList_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SDNList_HIST;
SELECT * FROM STG.WINCHK_SDNList_HIST;
[STATUS=tbd]
*/

-- // TABLE 965: SDNMain
COPY INTO ARES.STG.SRC_SDNMain_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SDN_MAIN_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SDN_ID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SDN_NAME VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: SDN_TYPE VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: PROGRAM VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: TITLE VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: REMARKS VARCHAR(8000) NULL
		($8)::varchar 	-- $8: VENDOR VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SDNMain/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SDNMain_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SDNMain_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SDNMain_HIST;
SELECT * FROM STG.WINCHK_SDNMain_HIST;
[STATUS=tbd]
*/

-- // TABLE 966: SdnMatch
COPY INTO ARES.STG.SRC_SdnMatch_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SDN_MATCH_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SDN_NAME VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: SDN_TYPE VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: SDN_PROGRAM VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: SDN_TITLE VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: SDN_REMARKS VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: ALT_TYPE VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: ALT_NAME VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: ADD_ADDRESS VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: ADD_CITY VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: ADD_COUNTRY VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: ADD_REMARKS VARCHAR(8000) NULL
		($13)::date, 	-- $13: DATE_ENTERED DATE NOT NULL
		($14)::char, 	-- $14: TELLER CHAR(8000) NOT NULL
		($15)::int, 	-- $15: CUSTOMER_KEY INT NULL
		($16)::int 	-- $16: SDN_CERT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SdnMatch/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SdnMatch_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SdnMatch_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SdnMatch_HIST;
SELECT * FROM STG.WINCHK_SdnMatch_HIST;
[STATUS=tbd]
*/

-- // TABLE 967: SecurityAnswer
COPY INTO ARES.STG.SRC_SecurityAnswer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SECURITY_ANSWER_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::int, 	-- $3: SECURITY_QUESTION_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::varchar 	-- $5: ANSWER VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SecurityAnswer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SecurityAnswer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SecurityAnswer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SecurityAnswer_HIST;
SELECT * FROM STG.WINCHK_SecurityAnswer_HIST;
[STATUS=tbd]
*/

-- // TABLE 968: SecurityGroup
COPY INTO ARES.STG.SRC_SecurityGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SECURITYGROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SG_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SG_VALUES VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_COLLECTOR BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_AD_ASTRA BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_ACTIVE BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_MANAGER BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IS_CORPORATE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_ACCOUNTANT BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($11), 	-- $11: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12) 	-- $12: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SecurityGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SecurityGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SecurityGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SecurityGroup_HIST;
SELECT * FROM STG.WINCHK_SecurityGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 969: SecurityGroupHistory
COPY INTO ARES.STG.SRC_SecurityGroupHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SECURITYGROUP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: SG_NAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SG_VALUES VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_COLLECTOR BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: IS_AD_ASTRA BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: IS_ACTIVE BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_MANAGER BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IS_CORPORATE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_ACCOUNTANT BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: DESCRIPTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($11), 	-- $11: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12) 	-- $12: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SecurityGroupHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SecurityGroupHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SecurityGroupHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SecurityGroupHistory_HIST;
SELECT * FROM STG.WINCHK_SecurityGroupHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 970: SecurityQuestion
COPY INTO ARES.STG.SRC_SecurityQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SECURITY_QUESTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: QUESTION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::boolean 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SecurityQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SecurityQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SecurityQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SecurityQuestion_HIST;
SELECT * FROM STG.WINCHK_SecurityQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 971: ServiceDetail
COPY INTO ARES.STG.SRC_ServiceDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SERVICE_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: SERVICE_MASTER_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::boolean, 	-- $4: ENABLED BOOLEAN NOT NULL
		($5)::number, 	-- $5: SERVICE_COST NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: SERVICE_FEE NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: MAX_CHARGE NUMBER(10,4) NOT NULL
		($8)::int, 	-- $8: GL_ACCT_FEE INT NULL
		($9)::int, 	-- $9: GL_ACCT_AMT INT NULL
		($10)::int, 	-- $10: GL_ACCT_COST INT NULL
		($11)::int, 	-- $11: GL_ACCT_PROFIT INT NULL
		to_timestamp_ntz($12), 	-- $12: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($13)::char, 	-- $13: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($14), 	-- $14: LAST_UPDATED TIMESTAMP_LTZ NULL
		($15)::char, 	-- $15: UPDATED_BY CHAR(8000) NULL
		($16)::number, 	-- $16: MIN_CHARGE NUMBER(10,4) NOT NULL
		($17)::boolean 	-- $17: GOVT_ID_REQUIRED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ServiceDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ServiceDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ServiceDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ServiceDetail_HIST;
SELECT * FROM STG.WINCHK_ServiceDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 972: ServiceMaster
COPY INTO ARES.STG.SRC_ServiceMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SERVICE_MASTER_KEY INT NOT NULL
		($2)::smallint, 	-- $2: SERVICE_NUM SMALLINT NOT NULL
		($3)::varchar, 	-- $3: SERVICE_NAME VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: DISPLAY_ORDER SMALLINT NOT NULL
		($5)::boolean, 	-- $5: INVENTORIED BOOLEAN NOT NULL
		($6)::char, 	-- $6: FUNCTION_AS CHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: REQUIRE_CUST BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: PAYOUT BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: QTY_PROMPT BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: AMT_PROMPT BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: FEE_PROMPT BOOLEAN NOT NULL
		to_timestamp_ntz($12), 	-- $12: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($13)::char, 	-- $13: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($14), 	-- $14: LAST_UPDATED TIMESTAMP_LTZ NULL
		($15)::char, 	-- $15: UPDATED_BY CHAR(8000) NULL
		($16)::boolean, 	-- $16: CASH_ONLY BOOLEAN NOT NULL
		($17)::boolean, 	-- $17: IS_TRACKED BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: IS_PREPAID BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: IS_TAXABLE BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: IS_AUTO_INVENTORY BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: IS_SUBITEM BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: IS_INDEPENDENT BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: REQ_CUST_PHONE BOOLEAN NOT NULL
		($24)::boolean, 	-- $24: REQ_CUST_ID BOOLEAN NOT NULL
		($25)::boolean 	-- $25: IS_ENABLED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ServiceMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ServiceMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ServiceMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ServiceMaster_HIST;
SELECT * FROM STG.WINCHK_ServiceMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 973: ServiceTrans
COPY INTO ARES.STG.SRC_ServiceTrans_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SERVICE_TRANS_KEY INT NOT NULL
		($2)::int, 	-- $2: SERVICE_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NULL
		($5)::int, 	-- $5: MO_STATUS_KEY INT NULL
		($6)::smallint, 	-- $6: LOCATION smallint NOT NULL
		($7)::smallint, 	-- $7: QTY_SOLD smallint NOT NULL
		($8)::number, 	-- $8: SERVICE_FEE NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: SERVICE_AMT NUMBER(10,4) NOT NULL
		($10)::int, 	-- $10: GL_ACCT_FEE INT NULL
		($11)::int, 	-- $11: GL_ACCT_AMT INT NULL
		($12)::int, 	-- $12: PAYMENT_METHOD INT NOT NULL
		($13)::boolean, 	-- $13: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($14), 	-- $14: REVERSED_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($15), 	-- $15: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($16)::char, 	-- $16: ENTERED_BY CHAR(8000) NOT NULL
		($17)::number 	-- $17: CALC_EXTEND NUMBER(10,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ServiceTrans/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ServiceTrans_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ServiceTrans_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ServiceTrans_HIST;
SELECT * FROM STG.WINCHK_ServiceTrans_HIST;
[STATUS=tbd]
*/

-- // TABLE 974: ServiceTransDetail
COPY INTO ARES.STG.SRC_ServiceTransDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SERVICE_TRANS_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: SERVICE_TRANS_KEY INT NOT NULL
		($3)::varchar, 	-- $3: PERSON_RECEIVED VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: COUNTRY_TO VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: OCCUPATION VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: PURPOSE VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: BILLER_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: BILLPAY_CODE VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: BILLPAY_ACCOUNT_NUM VARCHAR(8000) NOT NULL
		($10)::boolean, 	-- $10: EXPORTED BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_DOMESTIC BOOLEAN NULL
		($12)::varchar, 	-- $12: THIRD_PARTY_DETAILS VARCHAR(8000) NULL
		($13)::smallint, 	-- $13: VENDOR_ID SMALLINT NULL
		($14)::varchar 	-- $14: WIRE_TRANSFER_RECEIPT VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/ServiceTransDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ServiceTransDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ServiceTransDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ServiceTransDetail_HIST;
SELECT * FROM STG.WINCHK_ServiceTransDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 975: ServiceTransNote
COPY INTO ARES.STG.SRC_ServiceTransNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SERVICE_TRANS_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: SERVICE_TRANS_KEY INT NOT NULL
		($3)::varchar, 	-- $3: NOTE VARCHAR(8000) NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ServiceTransNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ServiceTransNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ServiceTransNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ServiceTransNote_HIST;
SELECT * FROM STG.WINCHK_ServiceTransNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 976: SG_RIGHTS
COPY INTO ARES.STG.SRC_SG_RIGHTS_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SG_RIGHTS_KEY INT NOT NULL
		($2)::varchar, 	-- $2: RIGHT_NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: PARENT_RIGHTS_KEY INT NULL
		($4)::varchar, 	-- $4: PARENT_RIGHT_NAME VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: RIGHT_TYPE VARCHAR(8000) NOT NULL
		($6)::int, 	-- $6: VALUE_POSITION INT NOT NULL
		($7)::varchar, 	-- $7: GLOBAL_RIGHT_NAME VARCHAR(8000) NULL
		($8)::varchar 	-- $8: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SG_RIGHTS/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SG_RIGHTS_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SG_RIGHTS_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SG_RIGHTS_HIST;
SELECT * FROM STG.WINCHK_SG_RIGHTS_HIST;
[STATUS=tbd]
*/

-- // TABLE 977: SignatureLoanApproval
COPY INTO ARES.STG.SRC_SignatureLoanApproval_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SIGNATURE_LOAN_APPROVAL_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::number, 	-- $4: GROSS_INCOME_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: NET_INCOME_AMT NUMBER(10,4) NOT NULL
		($6)::number, 	-- $6: OPEN_LOANS_PRINC_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: APPROVAL_BASE_INCOME_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: APPROVAL_SUCCESSFUL_AMT NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: APPROVAL_BASE_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: MGR_OVERRIDE_AMT NUMBER(10,4) NOT NULL
		($11)::char, 	-- $11: MGR_OVERRIDE_INITS CHAR(8000) NOT NULL
		($12)::number, 	-- $12: PREV_PRINC_OVERRIDE_AMT NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: APPROVAL_AMT NUMBER(10,4) NOT NULL
		($14)::smallint, 	-- $14: SCORED_INCREMENT_AMOUNT smallint NOT NULL
		($15)::smallint 	-- $15: SCORED_INCREMENT_NUM smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/SignatureLoanApproval/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SignatureLoanApproval_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SignatureLoanApproval_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SignatureLoanApproval_HIST;
SELECT * FROM STG.WINCHK_SignatureLoanApproval_HIST;
[STATUS=tbd]
*/

-- // TABLE 978: SkipPayment
COPY INTO ARES.STG.SRC_SkipPayment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_PAYMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: TRANS_DETAIL_KEY INT NOT NULL
		($5)::int, 	-- $5: SCHEDULED_PAYMENT_KEY INT NOT NULL
		($6)::date, 	-- $6: PREVIOUS_PAYMENT_DATE DATE NOT NULL
		($7)::date, 	-- $7: ADJUSTED_PAYMENT_DATE DATE NOT NULL
		($8)::date, 	-- $8: ADJUSTED_DUE_DATE DATE NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($10), 	-- $10: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($11)::boolean, 	-- $11: REVERSED BOOLEAN NOT NULL
		to_timestamp_ntz($12), 	-- $12: REVERSED_DATE TIMESTAMP_LTZ NULL
		($13)::char, 	-- $13: REVERSED_ENTERED_BY CHAR(8000) NULL
		to_timestamp_ntz($14), 	-- $14: ELIGIBLE_DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($15)::char 	-- $15: ELIGIBLE_ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipPayment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipPayment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipPayment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipPayment_HIST;
SELECT * FROM STG.WINCHK_SkipPayment_HIST;
[STATUS=tbd]
*/

-- // TABLE 979: SkipPaymentEligible
COPY INTO ARES.STG.SRC_SkipPaymentEligible_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_PAYMENT_ELIGIBLE_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipPaymentEligible/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipPaymentEligible_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipPaymentEligible_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipPaymentEligible_HIST;
SELECT * FROM STG.WINCHK_SkipPaymentEligible_HIST;
[STATUS=tbd]
*/

-- // TABLE 980: SkipTraceConfig
COPY INTO ARES.STG.SRC_SkipTraceConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_AD_ASTRA BOOLEAN NOT NULL
		($3)::smallint, 	-- $3: MAX_CYCLES_PER_CUSTOMER smallint NOT NULL
		($4)::smallint, 	-- $4: DAYS_BETWEEN_CYCLES smallint NOT NULL
		($5)::int, 	-- $5: WATCH_LIST_VENDOR_KEY INT NOT NULL
		($6)::number, 	-- $6: BALANCE_RANGE_FROM NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: BALANCE_RANGE_TO NUMBER(10,4) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceConfig_HIST;
SELECT * FROM STG.WINCHK_SkipTraceConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 981: SkipTraceConfig_RisAudit
COPY INTO ARES.STG.SRC_SkipTraceConfig_RisAudit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($2)::int 	-- $2: RIS_AUDIT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceConfig_RisAudit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceConfig_RisAudit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceConfig_RisAudit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceConfig_RisAudit_HIST;
SELECT * FROM STG.WINCHK_SkipTraceConfig_RisAudit_HIST;
[STATUS=tbd]
*/

-- // TABLE 982: SkipTraceConfigHistory
COPY INTO ARES.STG.SRC_SkipTraceConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($2)::boolean, 	-- $2: IS_AD_ASTRA BOOLEAN NOT NULL
		($3)::smallint, 	-- $3: MAX_CYCLES_PER_CUSTOMER smallint NOT NULL
		($4)::smallint, 	-- $4: DAYS_BETWEEN_CYCLES smallint NOT NULL
		($5)::int, 	-- $5: WATCH_LIST_VENDOR_KEY INT NOT NULL
		($6)::number, 	-- $6: BALANCE_RANGE_FROM NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: BALANCE_RANGE_TO NUMBER(10,4) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceConfigHistory_HIST;
SELECT * FROM STG.WINCHK_SkipTraceConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 983: SkipTraceEvents_NotUsed
COPY INTO ARES.STG.SRC_SkipTraceEvents_NotUsed_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_EVENTS_KEY INT NOT NULL
		($2)::int, 	-- $2: SKIP_TRACE_THREAD_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: EVENT_CODE CHAR(8000) NOT NULL
		($5)::int 	-- $5: SKIP_TRACE_VENDOR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceEvents_NotUsed/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceEvents_NotUsed_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceEvents_NotUsed_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceEvents_NotUsed_HIST;
SELECT * FROM STG.WINCHK_SkipTraceEvents_NotUsed_HIST;
[STATUS=tbd]
*/

-- // TABLE 984: SkipTraceStep
COPY INTO ARES.STG.SRC_SkipTraceStep_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_STEP_KEY INT NOT NULL
		($2)::int, 	-- $2: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: STEP_ACTIVE_ALIAS INT NULL
		($4)::varchar, 	-- $4: STEP_NAME VARCHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: STEP_PRIORITY smallint NOT NULL
		($6)::smallint, 	-- $6: DELINQUENCY_DAYS_FROM smallint NOT NULL
		($7)::smallint, 	-- $7: DELINQUENCY_DAYS_TO smallint NOT NULL
		($8)::number, 	-- $8: BALANCE_RANGE_FROM NUMBER(10,4) NOT NULL
		($9)::number, 	-- $9: BALANCE_RANGE_TO NUMBER(10,4) NOT NULL
		($10)::smallint, 	-- $10: DAYS_SINCE_LAST_CONTACT smallint NOT NULL
		($11)::boolean, 	-- $11: PROCESS_WHEN_NO_HOME_ADDRESS BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: PROCESS_WHEN_NO_HOME_PHONE BOOLEAN NOT NULL
		($13)::boolean, 	-- $13: PROCESS_WHEN_NO_CELL_PHONE BOOLEAN NOT NULL
		($14)::boolean, 	-- $14: PROCESS_WHEN_NO_WORK_PHONE BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: STEP_ACTIVE BOOLEAN NULL
		($16)::boolean 	-- $16: STEP_CURRENT BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceStep/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceStep_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceStep_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceStep_HIST;
SELECT * FROM STG.WINCHK_SkipTraceStep_HIST;
[STATUS=tbd]
*/

-- // TABLE 985: SkipTraceStep_AuditCategory
COPY INTO ARES.STG.SRC_SkipTraceStep_AuditCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_STEP_KEY INT NOT NULL
		($2)::int, 	-- $2: RIS_AUDIT_KEY INT NULL
		($3)::int 	-- $3: SKIP_TRACE_STEP_AUDIT_CATEGORY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceStep_AuditCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceStep_AuditCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceStep_AuditCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceStep_AuditCategory_HIST;
SELECT * FROM STG.WINCHK_SkipTraceStep_AuditCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 986: SkipTraceStep_Location
COPY INTO ARES.STG.SRC_SkipTraceStep_Location_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_STEP_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NULL
		($3)::int 	-- $3: SKIP_TRACE_STEP_LOCATION_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceStep_Location/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceStep_Location_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceStep_Location_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceStep_Location_HIST;
SELECT * FROM STG.WINCHK_SkipTraceStep_Location_HIST;
[STATUS=tbd]
*/

-- // TABLE 987: SkipTraceStep_ProductCode
COPY INTO ARES.STG.SRC_SkipTraceStep_ProductCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_STEP_KEY INT NOT NULL
		($2)::varchar, 	-- $2: PRODUCT_CODE VARCHAR(8000) NOT NULL
		($3)::int 	-- $3: SKIP_TRACE_STEP_PRODUCT_CODE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceStep_ProductCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceStep_ProductCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceStep_ProductCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceStep_ProductCode_HIST;
SELECT * FROM STG.WINCHK_SkipTraceStep_ProductCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 988: SkipTraceThread
COPY INTO ARES.STG.SRC_SkipTraceThread_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_THREAD_KEY INT NOT NULL
		($2)::int, 	-- $2: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($3)::int, 	-- $3: RISREPT_KEY INT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ACTIVE TIMESTAMP_LTZ NOT NULL
		($7)::boolean, 	-- $7: IF_NO_ADDRESS BOOLEAN NOT NULL
		($8)::boolean, 	-- $8: IF_NO_CELL_PHONE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IF_NO_HOME_PHONE BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: IF_NO_WORK_PHONE BOOLEAN NOT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_LAST_CONTACT TIMESTAMP_LTZ NULL
		($12)::smallint, 	-- $12: PASS_COUNTER SMALLINT NOT NULL
		($13)::smallint, 	-- $13: STEP_NUMBER SMALLINT NOT NULL
		($14)::int, 	-- $14: SKIP_TRACE_STEP_KEY INT NULL
		($15)::smallint, 	-- $15: VENDOR_NUMBER SMALLINT NOT NULL
		($16)::int, 	-- $16: SKIP_TRACE_VENDOR_KEY INT NULL
		($17)::char 	-- $17: TRACE_STATUS CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceThread/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceThread_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceThread_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceThread_HIST;
SELECT * FROM STG.WINCHK_SkipTraceThread_HIST;
[STATUS=tbd]
*/

-- // TABLE 989: SkipTraceVendor
COPY INTO ARES.STG.SRC_SkipTraceVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_VENDOR_KEY INT NOT NULL
		($2)::int, 	-- $2: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($3)::varchar, 	-- $3: VENDOR_NAME VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: VENDOR_PRIORITY smallint NOT NULL
		($5)::boolean, 	-- $5: VENDOR_ACTIVE BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: VENDOR_DELETED BOOLEAN NOT NULL
		($7)::number, 	-- $7: VENDOR_COST NUMBER(10,4) NOT NULL
		($8)::varchar, 	-- $8: VENDOR_LOGIN VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: VENDOR_PASSWORD VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: CRYPTO_KEY VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: TO_VENDOR_URI VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: FROM_VENDOR_URI VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: VENDOR_PATH VARCHAR(8000) NOT NULL
		to_timestamp_ntz($14), 	-- $14: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($15) 	-- $15: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceVendor_HIST;
SELECT * FROM STG.WINCHK_SkipTraceVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 990: SkipTraceVendorHistory
COPY INTO ARES.STG.SRC_SkipTraceVendorHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SKIP_TRACE_VENDOR_KEY INT NOT NULL
		($2)::int, 	-- $2: SKIP_TRACE_CONFIG_KEY INT NOT NULL
		($3)::varchar, 	-- $3: VENDOR_NAME VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: VENDOR_PRIORITY smallint NOT NULL
		($5)::boolean, 	-- $5: VENDOR_ACTIVE BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: VENDOR_DELETED BOOLEAN NOT NULL
		($7)::number, 	-- $7: VENDOR_COST NUMBER(10,4) NOT NULL
		($8)::varchar, 	-- $8: VENDOR_LOGIN VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: VENDOR_PASSWORD VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: CRYPTO_KEY VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: TO_VENDOR_URI VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: FROM_VENDOR_URI VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: VENDOR_PATH VARCHAR(8000) NOT NULL
		to_timestamp_ntz($14), 	-- $14: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($15) 	-- $15: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SkipTraceVendorHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SkipTraceVendorHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SkipTraceVendorHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SkipTraceVendorHistory_HIST;
SELECT * FROM STG.WINCHK_SkipTraceVendorHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 991: SPayInterest
COPY INTO ARES.STG.SRC_SPayInterest_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPAY_INTEREST_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::number, 	-- $3: PRINC_DUE NUMBER(10,4) NOT NULL
		($4)::numeric, 	-- $4: INTEREST_ADDED NUMERIC NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: INTEREST_DATE TIMESTAMP_LTZ NOT NULL
		($7)::number, 	-- $7: LOAN_BALANCE NUMBER(10,4) NOT NULL
		($8)::boolean, 	-- $8: IS_ERR_ADJ BOOLEAN NOT NULL
		($9)::number, 	-- $9: LOAN_FEE_DUE NUMBER(10,4) NOT NULL
		($10)::numeric, 	-- $10: CAB_INTEREST_ADDED NUMERIC NOT NULL
		($11)::boolean, 	-- $11: IS_MIN_INTEREST_ADJUSTMENT BOOLEAN NOT NULL
		($12)::int 	-- $12: TRANS_DETAIL_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SPayInterest/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SPayInterest_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SPayInterest_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SPayInterest_HIST;
SELECT * FROM STG.WINCHK_SPayInterest_HIST;
[STATUS=tbd]
*/

-- // TABLE 992: SPayLoan
COPY INTO ARES.STG.SRC_SPayLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPAY_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::numeric, 	-- $3: ANNUAL_RATE_PCT NUMERIC NOT NULL
		($4)::number, 	-- $4: INTEREST_AMT NUMBER(10,4) NOT NULL
		($5)::number, 	-- $5: INTEREST_PAID NUMBER(10,4) NOT NULL
		($6)::boolean, 	-- $6: IS_AUTO_ROLL BOOLEAN NOT NULL
		($7)::numeric, 	-- $7: COLL_ANNUAL_RATE_PCT NUMERIC NOT NULL
		($8)::number, 	-- $8: TOT_INTEREST NUMBER(10,4) NOT NULL
		($9)::boolean, 	-- $9: IS_INTEREST_SUSPENDED BOOLEAN NOT NULL
		($10)::number, 	-- $10: COLL_FEE_DUE_BALANCE NUMBER(10,4) NOT NULL
		($11)::number, 	-- $11: LEGAL_FEE_DUE_BALANCE NUMBER(10,4) NOT NULL
		($12)::number, 	-- $12: LOAN_FEE_DUE_BALANCE NUMBER(10,4) NOT NULL
		($13)::number, 	-- $13: INTEREST_DUE_BALANCE NUMBER(10,4) NOT NULL
		($14)::number, 	-- $14: CAB_INTEREST_DUE_BALANCE NUMBER(10,4) NOT NULL
		($15)::number, 	-- $15: PRINC_DUE_BALANCE NUMBER(10,4) NOT NULL
		($16)::numeric, 	-- $16: DAILY_RATE_PCT NUMERIC NOT NULL
		($17)::numeric, 	-- $17: COLL_DAILY_RATE_PCT NUMERIC NOT NULL
		($18)::numeric, 	-- $18: CAB_ANNUAL_RATE_PCT NUMERIC NOT NULL
		($19)::numeric, 	-- $19: CAB_DAILY_RATE_PCT NUMERIC NOT NULL
		($20)::number, 	-- $20: TOT_CAB_INTEREST NUMBER(10,4) NOT NULL
		($21)::number, 	-- $21: CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE NUMBER(10,4) NOT NULL
		($22)::number, 	-- $22: TOT_CAB_LENDER_COLL_FEE NUMBER(10,4) NOT NULL
		($23)::boolean, 	-- $23: CHARGE_INTEREST_ON_LOAN_FEES BOOLEAN NOT NULL
		($24)::number, 	-- $24: NSF_FEE_DUE_BALANCE NUMBER(10,4) NOT NULL
		($25)::number, 	-- $25: MIN_INTEREST_AMT NUMBER(10,4) NOT NULL
		($26)::smallint, 	-- $26: MIN_INTEREST_DAYS smallint NOT NULL
		($27)::boolean, 	-- $27: RI_FEE_REQUIRES_BANK_ACCOUNT BOOLEAN NOT NULL
		($28)::numeric, 	-- $28: DAILY_INTEREST_AMT NUMERIC NULL
		($29)::number, 	-- $29: TRANS_FEE_DUE_BALANCE NUMBER(10,4) NOT NULL
		($30)::number, 	-- $30: ROLLOVER_AMORT_PAYMENT_AMT NUMBER(10,4) NOT NULL
		($31)::number, 	-- $31: DEFERRED_REVENUE_DUE_BALANCE NUMBER(10,4) NOT NULL
		($32)::number 	-- $32: DEFERRED_REVENUE_TOTAL_BALANCE NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SPayLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SPayLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SPayLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SPayLoan_HIST;
SELECT * FROM STG.WINCHK_SPayLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 993: SPaySchedRollover
COPY INTO ARES.STG.SRC_SPaySchedRollover_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPAY_SCHED_ROLLOVER_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: ZERO_REC_LOAN_KEY INT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::int, 	-- $5: LOAN_PAYMENT_KEY INT NULL
		($6)::smallint 	-- $6: NUM_ROLLOVERS SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SPaySchedRollover/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SPaySchedRollover_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SPaySchedRollover_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SPaySchedRollover_HIST;
SELECT * FROM STG.WINCHK_SPaySchedRollover_HIST;
[STATUS=tbd]
*/

-- // TABLE 994: SPaySchedRolloverDetail
COPY INTO ARES.STG.SRC_SPaySchedRolloverDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPAY_SCHED_ROLLOVER_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: SPAY_SCHED_ROLLOVER_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: ROLLOVER_DATE TIMESTAMP_LTZ NOT NULL
		($4)::number, 	-- $4: OPT_BUYDOWN_AMT NUMBER(10,4) NOT NULL
		($5)::smallint, 	-- $5: ROLLOVER_NUM SMALLINT NOT NULL
		($6)::number, 	-- $6: LOAN_AMT NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: PRINC_AMT NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: LOAN_ATR NUMBER(10,4) NOT NULL
		to_timestamp_ntz($9), 	-- $9: DUE_DATE TIMESTAMP_LTZ NOT NULL
		($10)::int, 	-- $10: ACH_HISTORY_KEY INT NULL
		($11)::int, 	-- $11: TRANS_DETAIL_KEY INT NULL
		($12)::int, 	-- $12: CANCEL_LOAN_PAYMENT_KEY INT NULL
		($13)::int, 	-- $13: VOID_LOAN_PAYMENT_KEY INT NULL
		($14)::int 	-- $14: SCHED_LOAN_PAYMENT_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SPaySchedRolloverDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SPaySchedRolloverDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SPaySchedRolloverDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SPaySchedRolloverDetail_HIST;
SELECT * FROM STG.WINCHK_SPaySchedRolloverDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 995: SpecialMessage
COPY INTO ARES.STG.SRC_SpecialMessage_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPECIAL_MESSAGE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: START_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($5), 	-- $5: END_DATE TIMESTAMP_LTZ NULL
		($6)::text, 	-- $6: MESSAGE_FILE text NULL
		($7)::varchar, 	-- $7: MESSAGE_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: PROCEDURE_NAME VARCHAR(8000) NOT NULL
		($9)::boolean, 	-- $9: FOR_CASHED_CHECKS BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: FOR_SERVICES_NOTICE BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: FOR_CUSTOMER_NOTICE BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: FOR_GOLD BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14), 	-- $14: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($15)::boolean 	-- $15: FOR_RETURNED_ITEM BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SpecialMessage/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SpecialMessage_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SpecialMessage_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SpecialMessage_HIST;
SELECT * FROM STG.WINCHK_SpecialMessage_HIST;
[STATUS=tbd]
*/

-- // TABLE 996: SpecialMessage_AzCusts
COPY INTO ARES.STG.SRC_SpecialMessage_AzCusts_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::float, 	-- $1: CUSTOMER_KEY FLOAT NULL
		($2)::int 	-- $2: SPECIAL_MESSAGE_AZ_CUSTS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SpecialMessage_AzCusts/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SpecialMessage_AzCusts_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SpecialMessage_AzCusts_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SpecialMessage_AzCusts_HIST;
SELECT * FROM STG.WINCHK_SpecialMessage_AzCusts_HIST;
[STATUS=tbd]
*/

-- // TABLE 997: SpecialMessageHistory
COPY INTO ARES.STG.SRC_SpecialMessageHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPECIAL_MESSAGE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: START_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($5), 	-- $5: END_DATE TIMESTAMP_LTZ NULL
		($6)::text, 	-- $6: MESSAGE_FILE text NULL
		($7)::varchar, 	-- $7: MESSAGE_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: PROCEDURE_NAME VARCHAR(8000) NOT NULL
		($9)::boolean, 	-- $9: FOR_CASHED_CHECKS BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: FOR_SERVICES_NOTICE BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: FOR_CUSTOMER_NOTICE BOOLEAN NOT NULL
		($12)::boolean, 	-- $12: FOR_GOLD BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14), 	-- $14: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($15)::boolean 	-- $15: FOR_RETURNED_ITEM BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SpecialMessageHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SpecialMessageHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SpecialMessageHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SpecialMessageHistory_HIST;
SELECT * FROM STG.WINCHK_SpecialMessageHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 998: SpecialMessageLoanProduct
COPY INTO ARES.STG.SRC_SpecialMessageLoanProduct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPECIAL_MESSAGE_LOAN_PRODUCT_KEY INT NOT NULL
		($2)::int, 	-- $2: SPECIAL_MESSAGE_KEY INT NOT NULL
		($3)::int 	-- $3: LOAN_PRODUCT_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/SpecialMessageLoanProduct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SpecialMessageLoanProduct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SpecialMessageLoanProduct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SpecialMessageLoanProduct_HIST;
SELECT * FROM STG.WINCHK_SpecialMessageLoanProduct_HIST;
[STATUS=tbd]
*/

-- // TABLE 999: SpecialMessageLocation
COPY INTO ARES.STG.SRC_SpecialMessageLocation_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPECIAL_MESSAGE_LOCATION_KEY INT NOT NULL
		($2)::int, 	-- $2: SPECIAL_MESSAGE_KEY INT NULL
		($3)::smallint 	-- $3: LOCATION smallint NULL
    FROM @ETL.INBOUND/SRC/Backfill/SpecialMessageLocation/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SpecialMessageLocation_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SpecialMessageLocation_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SpecialMessageLocation_HIST;
SELECT * FROM STG.WINCHK_SpecialMessageLocation_HIST;
[STATUS=tbd]
*/

-- // TABLE 1000: SpousalNotificationExport
COPY INTO ARES.STG.SRC_SpousalNotificationExport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: SPOUSAL_NOTIFICATION_EXPORT_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: EXPORT_DATE TIMESTAMP_LTZ NOT NULL
		($4)::int, 	-- $4: RUN_MASTER_KEY INT NOT NULL
		($5)::varchar 	-- $5: EXPORT_FILE_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/SpousalNotificationExport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*SpousalNotificationExport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_SpousalNotificationExport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_SpousalNotificationExport_HIST;
SELECT * FROM STG.WINCHK_SpousalNotificationExport_HIST;
[STATUS=tbd]
*/

-- // TABLE 1001: Store_Windows
COPY INTO ARES.STG.SRC_Store_Windows_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Store_Windows_Key INT NOT NULL
		($2)::smallint, 	-- $2: Location smallint NULL
		($3)::varchar, 	-- $3: Computer_Name VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: Citrix_Name VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: REPORT VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: RECEIPT VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: AGREEMENT VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: DOTMATRIX VARCHAR(8000) NULL
		($9)::smallint, 	-- $9: MONEY_ORDERS smallint NULL
		($10)::boolean, 	-- $10: SHARED_PRINTERS BOOLEAN NOT NULL
		($11)::date, 	-- $11: SYSTEM_DATE DATE NULL
		($12)::date, 	-- $12: SYSTEM_DATE_SET DATE NULL
		($13)::smallint, 	-- $13: MO_FORMS_REMAINING smallint NOT NULL
		($14)::char, 	-- $14: WINDOWS_VERSION CHAR(8000) NULL
		($15)::varchar, 	-- $15: TELLER_KEYBOARD VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: CUSTOMER_KEYBOARD VARCHAR(8000) NULL
		($17)::varchar 	-- $17: MONEY_ORDER_COM_PORT VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/Store_Windows/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Store_Windows_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Store_Windows_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Store_Windows_HIST;
SELECT * FROM STG.WINCHK_Store_Windows_HIST;
[STATUS=tbd]
*/

-- // TABLE 1002: StoreClosed
COPY INTO ARES.STG.SRC_StoreClosed_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: STORE_CLOSED_KEY INT NOT NULL
		($2)::date, 	-- $2: DATE DATE NOT NULL
		($3)::int, 	-- $3: HOLIDAY_KEY INT NULL
		($4)::smallint 	-- $4: LOCATION smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/StoreClosed/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*StoreClosed_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_StoreClosed_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_StoreClosed_HIST;
SELECT * FROM STG.WINCHK_StoreClosed_HIST;
[STATUS=tbd]
*/

-- // TABLE 1003: TaskActionResult
COPY INTO ARES.STG.SRC_TaskActionResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TASK_ACTION_RESULT_KEY INT NOT NULL
		($2)::int, 	-- $2: AGENT_ACTION_KEY INT NOT NULL
		($3)::int, 	-- $3: AGENT_RESULT_KEY1 INT NOT NULL
		($4)::int, 	-- $4: AGENT_RESULT_KEY2 INT NOT NULL
		($5)::int, 	-- $5: RIS_AUDIT_ID INT NOT NULL
		($6)::boolean, 	-- $6: ALLOW_NOTE BOOLEAN NOT NULL
		($7)::int, 	-- $7: FOLLOWUP_MAX INT NOT NULL
		($8)::boolean, 	-- $8: SHOW_PAYMENT_FORM BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: SHOW_PTP_FORM BOOLEAN NULL
		($10)::boolean, 	-- $10: COLLECTOR_BONUS_RPT BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: OPT_AUDIT_CAT_CODE BOOLEAN NOT NULL
		($12)::smallint, 	-- $12: CBR_OUT_OR_IN_CALL SMALLINT NULL
		($13)::int, 	-- $13: FOLLOWUP_DEFAULT INT NOT NULL
		($14)::boolean, 	-- $14: REQUIRE_REASON_FOR_ARREARS BOOLEAN NOT NULL
		($15)::boolean, 	-- $15: SHOW_FLOD_FORM BOOLEAN NOT NULL
		($16)::smallint, 	-- $16: HOT_KEY SMALLINT NOT NULL
		($17)::boolean, 	-- $17: SHOW_REPO_VENDOR_LIST BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: WRONG_PARTY_CONTACT BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: IS_ACTIVE BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: REQUIRE_BANKRUPTCY_TRUSTEE BOOLEAN NOT NULL
		($21)::varchar, 	-- $21: FLOD_VALUES VARCHAR(8000) NOT NULL
		($22)::boolean, 	-- $22: DISCHARGE_BANKRUPTCY_ENABLED BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: SHOW_SKIP_PAYMENT_FORM BOOLEAN NOT NULL
		($24)::boolean 	-- $24: SHOW_FORGIVE_PAYMENT_FORM BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TaskActionResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TaskActionResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TaskActionResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TaskActionResult_HIST;
SELECT * FROM STG.WINCHK_TaskActionResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 1004: TaskActionResultXref
COPY INTO ARES.STG.SRC_TaskActionResultXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TASK_ACTION_RESULT_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: TASK_ACTION_RESULT_KEY INT NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: UPDATE_DATE TIMESTAMP_LTZ NULL
		($6)::char, 	-- $6: UPDATE_TELLER CHAR(8000) NULL
		($7)::varchar, 	-- $7: DESCRIPTION VARCHAR(8000) NOT NULL
		($8)::varchar 	-- $8: CODE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TaskActionResultXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TaskActionResultXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TaskActionResultXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TaskActionResultXref_HIST;
SELECT * FROM STG.WINCHK_TaskActionResultXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 1005: tecodes
COPY INTO ARES.STG.SRC_tecodes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: RES_CODE VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: MEANING VARCHAR(8000) NULL
		($3)::boolean 	-- $3: GOOD BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/tecodes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*tecodes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_tecodes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_tecodes_HIST;
SELECT * FROM STG.WINCHK_tecodes_HIST;
[STATUS=tbd]
*/

-- // TABLE 1006: TeletrackReportingData
COPY INTO ARES.STG.SRC_TeletrackReportingData_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELETRACK_REPORTING_DATA_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::smallint, 	-- $3: TELETRACK_STATUS SMALLINT NOT NULL
		($4)::char, 	-- $4: DEF_STATE CHAR(8000) NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NOT NULL
		($6)::varchar, 	-- $6: TRANS_CODE VARCHAR(8000) NOT NULL
		($7)::int, 	-- $7: ORIGINAL_LOAN_KEY INT NULL
		($8)::boolean, 	-- $8: IS_SENT BOOLEAN NOT NULL
		($9)::smallint, 	-- $9: DAYS_LATE smallint NOT NULL
		($10)::int, 	-- $10: CUSTOMER_KEY INT NOT NULL
		($11)::varchar, 	-- $11: SEND_XML VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: RESPONSE VARCHAR(8000) NOT NULL
		($13)::boolean 	-- $13: IS_ERROR BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TeletrackReportingData/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TeletrackReportingData_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TeletrackReportingData_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TeletrackReportingData_HIST;
SELECT * FROM STG.WINCHK_TeletrackReportingData_HIST;
[STATUS=tbd]
*/

-- // TABLE 1007: TellerComputer
COPY INTO ARES.STG.SRC_TellerComputer_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_COMPUTER_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::varchar 	-- $3: COMPUTER_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerComputer/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerComputer_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerComputer_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerComputer_HIST;
SELECT * FROM STG.WINCHK_TellerComputer_HIST;
[STATUS=tbd]
*/

-- // TABLE 1008: TELLERID
COPY INTO ARES.STG.SRC_TELLERID_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: TELLER CHAR(8000) NULL
		($2)::varchar, 	-- $2: FIRSTNAME VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LSTNAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: LAST_LOGIN TIMESTAMP_LTZ NULL
		($5)::smallint, 	-- $5: location smallint NULL
		($6)::int, 	-- $6: SECURITYGROUP_KEY INT NOT NULL
		to_timestamp_ntz($7), 	-- $7: LastPWChg TIMESTAMP_LTZ NULL
		($8)::varchar, 	-- $8: RSAPassword VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: SWIPE_ID VARCHAR(8000) NULL
		($10)::boolean, 	-- $10: DisplayReleaseInfo BOOLEAN NOT NULL
		($11)::char, 	-- $11: SSN CHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: ADP_ID VARCHAR(8000) NOT NULL
		($13)::boolean, 	-- $13: AUDIT_REQUIRED BOOLEAN NOT NULL
		($14)::date, 	-- $14: HIRE_DATE DATE NULL
		($15)::date, 	-- $15: CERT_DATE DATE NULL
		($16)::char, 	-- $16: CERT_BY CHAR(8000) NULL
		($17)::smallint, 	-- $17: LAST_LOCATION smallint NOT NULL
		($18)::boolean, 	-- $18: ACCOUNT_LOCKED BOOLEAN NOT NULL
		($19)::smallint, 	-- $19: ATTEMPTS SMALLINT NOT NULL
		($20)::int, 	-- $20: TELLER_ID_KEY INT NOT NULL
		($21)::int, 	-- $21: LAST_SELECTED_VISITOR_KEY INT NULL
		($22)::int, 	-- $22: LAST_SELECTED_LOAN_KEY INT NULL
		($23)::varchar, 	-- $23: LOCATION_LISTVIEW_COLUMNS VARCHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: LOCATION_LISTVIEW_COLUMN_WIDTHS VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: LOCATION_LISTVIEW_SORT VARCHAR(8000) NOT NULL
		($26)::boolean, 	-- $26: SHOW_OPS_NEWS BOOLEAN NOT NULL
		($27)::smallint, 	-- $27: QUESTION_ATTEMPTS SMALLINT NOT NULL
		($28)::smallint, 	-- $28: TELLER_TYPE SMALLINT NOT NULL
		($29)::int, 	-- $29: TITLE_KEY INT NULL
		($30)::varchar, 	-- $30: SAM_ACCOUNT_NAME VARCHAR(8000) NULL
		($31)::date, 	-- $31: CASHCOUNT_START_DATE DATE NULL
		($32)::date, 	-- $32: CASHCOUNT_END_DATE DATE NULL
		($33)::varchar, 	-- $33: EMAIL_ADDR VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: PASSWORD_HASH VARCHAR(8000) NOT NULL
		($35)::smallint, 	-- $35: PASSWORD_TYPE SMALLINT NOT NULL
		($36)::varchar 	-- $36: PASSWORD_SALT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TELLERID/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TELLERID_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TELLERID_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TELLERID_HIST;
SELECT * FROM STG.WINCHK_TELLERID_HIST;
[STATUS=tbd]
*/

-- // TABLE 1009: TellerIDEdit
COPY INTO ARES.STG.SRC_TellerIDEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_ID_EDIT_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: OLD_SECURITYGROUP_KEY smallint NOT NULL
		($4)::smallint, 	-- $4: NEW_SECURITYGROUP_KEY smallint NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerIDEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerIDEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerIDEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerIDEdit_HIST;
SELECT * FROM STG.WINCHK_TellerIDEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 1010: TellerLogin
COPY INTO ARES.STG.SRC_TellerLogin_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_LOGIN_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NULL
		($4)::varchar, 	-- $4: HOSTNAME VARCHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: LOGIN_DATE TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: LOGOUT_DATE TIMESTAMP_LTZ NULL
		($7)::boolean, 	-- $7: LOGGED_IN BOOLEAN NOT NULL
		($8)::varchar 	-- $8: SERVER_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerLogin/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerLogin_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerLogin_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerLogin_HIST;
SELECT * FROM STG.WINCHK_TellerLogin_HIST;
[STATUS=tbd]
*/

-- // TABLE 1011: TellerLoginFail
COPY INTO ARES.STG.SRC_TellerLoginFail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_LOGIN_FAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: TELLER_LOGIN_FAIL_REASON_KEY INT NOT NULL
		($3)::char, 	-- $3: LOGIN_ID CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NULL
		($6)::varchar, 	-- $6: HOSTNAME VARCHAR(8000) NOT NULL
		($7)::varchar 	-- $7: SERVER_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerLoginFail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerLoginFail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerLoginFail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerLoginFail_HIST;
SELECT * FROM STG.WINCHK_TellerLoginFail_HIST;
[STATUS=tbd]
*/

-- // TABLE 1012: TellerLoginFailReason
COPY INTO ARES.STG.SRC_TellerLoginFailReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_LOGIN_FAIL_REASON_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerLoginFailReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerLoginFailReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerLoginFailReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerLoginFailReason_HIST;
SELECT * FROM STG.WINCHK_TellerLoginFailReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 1013: TellerParsedCashException
COPY INTO ARES.STG.SRC_TellerParsedCashException_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_PARSEDCASHEXCEPTION_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::number, 	-- $5: TRANSACTION_AMOUNT NUMBER(19,4) NOT NULL
		($6)::number, 	-- $6: ENTERED_AMOUNT NUMBER(19,4) NOT NULL
		($7)::int, 	-- $7: CUSTOMER_KEY INT NULL
		($8)::int 	-- $8: TRANSACTION_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerParsedCashException/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerParsedCashException_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerParsedCashException_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerParsedCashException_HIST;
SELECT * FROM STG.WINCHK_TellerParsedCashException_HIST;
[STATUS=tbd]
*/

-- // TABLE 1014: TellerPwdHistory
COPY INTO ARES.STG.SRC_TellerPwdHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_PWD_HISTORY_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: IS_RESET BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: PASSWORD_HASH VARCHAR(8000) NOT NULL
		($7)::smallint, 	-- $7: PASSWORD_TYPE SMALLINT NOT NULL
		($8)::varchar 	-- $8: PASSWORD_SALT VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerPwdHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerPwdHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerPwdHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerPwdHistory_HIST;
SELECT * FROM STG.WINCHK_TellerPwdHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1015: TellerSecurity
COPY INTO ARES.STG.SRC_TellerSecurity_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TELLER_SECURITY_KEY INT NOT NULL
		($2)::int, 	-- $2: TELLER_ID_KEY INT NOT NULL
		($3)::date, 	-- $3: START_DATE DATE NULL
		($4)::date, 	-- $4: END_DATE DATE NULL
		($5)::datetime, 	-- $5: ENDED_ON_DATE datetime NULL
		($6)::boolean, 	-- $6: IS_TEMPORARY BOOLEAN NOT NULL
		($7)::varchar, 	-- $7: SG_VALUES VARCHAR(8000) NOT NULL
		($8)::datetime, 	-- $8: DATE_ENTERED datetime NOT NULL
		($9)::char, 	-- $9: ENTERED_BY CHAR(8000) NOT NULL
		($10)::datetime, 	-- $10: DATE_UPDATED datetime NULL
		($11)::char 	-- $11: UPDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerSecurity/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerSecurity_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerSecurity_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerSecurity_HIST;
SELECT * FROM STG.WINCHK_TellerSecurity_HIST;
[STATUS=tbd]
*/

-- // TABLE 1016: TellerTitle
COPY INTO ARES.STG.SRC_TellerTitle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TITLE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: TITLE VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: ACTIVE BOOLEAN NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerTitle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerTitle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerTitle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerTitle_HIST;
SELECT * FROM STG.WINCHK_TellerTitle_HIST;
[STATUS=tbd]
*/

-- // TABLE 1017: TellerTitleEdit
COPY INTO ARES.STG.SRC_TellerTitleEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TITLE_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: TITLE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: MODIFICATION VARCHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerTitleEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerTitleEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerTitleEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerTitleEdit_HIST;
SELECT * FROM STG.WINCHK_TellerTitleEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 1018: TellerType
COPY INTO ARES.STG.SRC_TellerType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: TELLER_TYPE SMALLINT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TellerType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TellerType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TellerType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TellerType_HIST;
SELECT * FROM STG.WINCHK_TellerType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1019: TestCreditCard
COPY INTO ARES.STG.SRC_TestCreditCard_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TEST_CREDIT_CARD_KEY INT NOT NULL
		($2)::bigint, 	-- $2: CARD_NUMBER BIGINT NOT NULL
		($3)::smallint, 	-- $3: CARD_BRAND SMALLINT NOT NULL
		($4)::smallint, 	-- $4: CARD_TYPE SMALLINT NOT NULL
		($5)::int, 	-- $5: CARD_NUMBER_TOKEN INT NOT NULL
		($6)::boolean, 	-- $6: IN_USE BOOLEAN NOT NULL
		($7)::int 	-- $7: TestScenario INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TestCreditCard/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TestCreditCard_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TestCreditCard_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TestCreditCard_HIST;
SELECT * FROM STG.WINCHK_TestCreditCard_HIST;
[STATUS=tbd]
*/

-- // TABLE 1020: ThirdParty
COPY INTO ARES.STG.SRC_ThirdParty_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: THIRD_PARTY_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ThirdParty/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ThirdParty_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ThirdParty_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ThirdParty_HIST;
SELECT * FROM STG.WINCHK_ThirdParty_HIST;
[STATUS=tbd]
*/

-- // TABLE 1021: ThirdPartyEmploymentStatus
COPY INTO ARES.STG.SRC_ThirdPartyEmploymentStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: ThirdPartyEmploymentStatusKey INT NOT NULL
		($2)::char, 	-- $2: Code CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Description VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: Name VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ThirdPartyEmploymentStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ThirdPartyEmploymentStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ThirdPartyEmploymentStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ThirdPartyEmploymentStatus_HIST;
SELECT * FROM STG.WINCHK_ThirdPartyEmploymentStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 1022: ThirdPartyReferenceType
COPY INTO ARES.STG.SRC_ThirdPartyReferenceType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: THIRD_PARTY_REFERENCE_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ThirdPartyReferenceType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ThirdPartyReferenceType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ThirdPartyReferenceType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ThirdPartyReferenceType_HIST;
SELECT * FROM STG.WINCHK_ThirdPartyReferenceType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1023: TitleLoan
COPY INTO ARES.STG.SRC_TitleLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TITLELOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_KEY INT NOT NULL
		($3)::int, 	-- $3: VEHICLE_KEY INT NOT NULL
		($4)::int, 	-- $4: CUSTOMER_KEY INT NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_ENTERED datetime NOT NULL
		($8)::number, 	-- $8: VEH_WHOLESALE NUMBER(19,4) NOT NULL
		($9)::int, 	-- $9: VEH_MILEAGE INT NOT NULL
		($10)::char, 	-- $10: VEH_CONDITION CHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: VEH_PLATE VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: VEH_STICKER VARCHAR(8000) NOT NULL
		to_timestamp_ntz($13), 	-- $13: VEH_REG_DATE TIMESTAMP_LTZ NULL
		to_timestamp_ntz($14), 	-- $14: VEH_REG_EXPIRE TIMESTAMP_LTZ NULL
		($15)::char, 	-- $15: VEH_REG_STATE CHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: VEH_TITLE_NUM VARCHAR(8000) NOT NULL
		($17)::char, 	-- $17: VEH_ODO_CODE CHAR(8000) NOT NULL
		($18)::char, 	-- $18: LEGAL_STATUS CHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: STATE_CUST_NUM VARCHAR(8000) NOT NULL
		($20)::varchar, 	-- $20: INS_NAME VARCHAR(8000) NOT NULL
		($21)::varchar, 	-- $21: INS_PHONE VARCHAR(8000) NOT NULL
		($22)::boolean, 	-- $22: INS_FULL_COVER BOOLEAN NOT NULL
		($23)::varchar, 	-- $23: INS_POLICY_NUM VARCHAR(8000) NOT NULL
		($24)::boolean, 	-- $24: PAY_VERIFIED BOOLEAN NOT NULL
		($25)::varchar, 	-- $25: AND_OR_NAME VARCHAR(8000) NULL
		($26)::int, 	-- $26: LIEN_HOLDER_KEY INT NULL
		($27)::number, 	-- $27: LIEN_BALANCE NUMBER(10,4) NULL
		($28)::varchar, 	-- $28: LIEN_ACCT_NUM VARCHAR(8000) NULL
		($29)::varchar, 	-- $29: VEH_VIN VARCHAR(8000) NULL
		($30)::varchar, 	-- $30: VEH_MAKE VARCHAR(8000) NULL
		($31)::varchar, 	-- $31: VEH_MODEL VARCHAR(8000) NULL
		($32)::varchar, 	-- $32: VEH_BODY VARCHAR(8000) NULL
		($33)::varchar, 	-- $33: VEH_ENGINE VARCHAR(8000) NULL
		($34)::varchar, 	-- $34: VEH_TRANS VARCHAR(8000) NULL
		($35)::varchar, 	-- $35: VEH_DRIVE VARCHAR(8000) NULL
		($36)::varchar, 	-- $36: VEH_MISC_EQUIP1 VARCHAR(8000) NULL
		($37)::varchar, 	-- $37: VEH_MISC_EQUIP2 VARCHAR(8000) NULL
		($38)::varchar, 	-- $38: VEH_MISC_EQUIP3 VARCHAR(8000) NULL
		($39)::smallint, 	-- $39: VEH_YEAR smallint NOT NULL
		($40)::number, 	-- $40: LIST_PRICE NUMBER(19,4) NOT NULL
		($41)::varchar, 	-- $41: VEH_COLOR VARCHAR(8000) NULL
		($42)::char, 	-- $42: FUEL_TYPE CHAR(8000) NULL
		($43)::number, 	-- $43: VEH_RETAIL NUMBER(10,4) NOT NULL
		($44)::char, 	-- $44: VEH_KOV CHAR(8000) NULL
		($45)::boolean, 	-- $45: IS_CLEAR_TITLE BOOLEAN NOT NULL
		($46)::boolean, 	-- $46: IS_EXPRESS BOOLEAN NOT NULL
		($47)::char, 	-- $47: GENDER CHAR(8000) NOT NULL
		($48)::smallint, 	-- $48: HEIGHT_FEET SMALLINT NOT NULL
		($49)::smallint, 	-- $49: HEIGHT_INCHES SMALLINT NOT NULL
		($50)::smallint, 	-- $50: WEIGHT smallint NOT NULL
		($51)::smallint, 	-- $51: RACE SMALLINT NOT NULL
		($52)::smallint, 	-- $52: EYE_COLOR SMALLINT NOT NULL
		($53)::smallint, 	-- $53: HAIR_COLOR SMALLINT NOT NULL
		($54)::varchar, 	-- $54: VEH_ENGINE_SIZE VARCHAR(8000) NOT NULL
		($55)::varchar, 	-- $55: VEH_ENGINE_NUMBER VARCHAR(8000) NOT NULL
		($56)::boolean, 	-- $56: VEH_NO_LONGER_OWNED_BY_CUST BOOLEAN NOT NULL
		($57)::varchar, 	-- $57: LENDER_NAME VARCHAR(8000) NOT NULL
		($58)::varchar, 	-- $58: LENDER_CERTIFICATE_ID VARCHAR(8000) NOT NULL
		($59)::int, 	-- $59: AGREEMENT_NUMBER INT NULL
		($60)::int, 	-- $60: LOAN_CO_PLEDGER_KEY INT NULL
		($61)::varchar, 	-- $61: AND_OR_FIRSTNAME VARCHAR(8000) NOT NULL
		($62)::varchar, 	-- $62: AND_OR_MIDNAME VARCHAR(8000) NOT NULL
		($63)::varchar, 	-- $63: AND_OR_LASTNAME VARCHAR(8000) NOT NULL
		($64)::varchar, 	-- $64: REPO_CASE_NUM VARCHAR(8000) NOT NULL
		($65)::char, 	-- $65: REPO_AGENT_TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($66), 	-- $66: REPO_DATE_ENTERED TIMESTAMP_LTZ NULL
		($67)::boolean, 	-- $67: TITLE_RELEASED BOOLEAN NOT NULL
		($68)::number, 	-- $68: TRANS_FEE_INCL_DOC_PREP_FEE_AMT NUMBER(10,4) NOT NULL
		($69)::boolean, 	-- $69: REPO_BANKRUPTCY_DISCHARGE BOOLEAN NOT NULL
		($70)::varchar, 	-- $70: REPO_NATIONAL_CASE_NUM VARCHAR(8000) NOT NULL
		($71)::date, 	-- $71: TITLE_RELEASED_DATE DATE NULL
		($72)::char, 	-- $72: TITLE_RELEASED_BY CHAR(8000) NULL
		($73)::boolean 	-- $73: IS_SRC_LIEN_HOLDER BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TitleLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TitleLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TitleLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TitleLoan_HIST;
SELECT * FROM STG.WINCHK_TitleLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 1024: TitleLoanApproval
COPY INTO ARES.STG.SRC_TitleLoanApproval_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TITLELOAN_APPROVAL_KEY INT NOT NULL
		($2)::int, 	-- $2: TITLELOAN_KEY INT NOT NULL
		($3)::numeric, 	-- $3: TLA_WHOLESALE_PCT NUMERIC NOT NULL
		($4)::numeric, 	-- $4: TLA_CHK_ACCT_PCT NUMERIC NOT NULL
		($5)::numeric, 	-- $5: TLA_CCARD_PCT NUMERIC NOT NULL
		($6)::numeric, 	-- $6: TLA_EMP_SINCE_PCT NUMERIC NOT NULL
		($7)::int, 	-- $7: TLA_EMP_SINCE_MON INT NOT NULL
		($8)::numeric, 	-- $8: TLA_BASE_PCT NUMERIC NOT NULL
		($9)::number, 	-- $9: TLA_BASE_AMT NUMBER(10,4) NOT NULL
		($10)::number, 	-- $10: TLA_NET_INC_AMT NUMBER(10,4) NOT NULL
		($11)::boolean, 	-- $11: TLA_NET_INC_USED BOOLEAN NOT NULL
		($12)::numeric, 	-- $12: TLA_NET_INC_PCT NUMERIC NOT NULL
		($13)::numeric, 	-- $13: TLA_WHOLE_MIN_PCT NUMERIC NOT NULL
		($14)::number, 	-- $14: TLA_WHOLE_MIN_AMT NUMBER(10,4) NOT NULL
		($15)::boolean, 	-- $15: TLA_WHOLE_MIN_USED BOOLEAN NOT NULL
		($16)::number, 	-- $16: TLA_MAX_LOAN_AMT NUMBER(10,4) NOT NULL
		($17)::boolean, 	-- $17: TLA_MAX_LOAN_USED BOOLEAN NOT NULL
		($18)::boolean, 	-- $18: TLA_NET_INC_LIMIT BOOLEAN NOT NULL
		($19)::boolean, 	-- $19: TLA_FULL_INS_1000 BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: TLA_PAY_VER_500 BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: TLA_EMP_3_MON_500 BOOLEAN NOT NULL
		($22)::boolean, 	-- $22: TLA_MIN_LOAN_150 BOOLEAN NOT NULL
		($23)::boolean, 	-- $23: TLA_MAX_NET_INC_25 BOOLEAN NOT NULL
		to_timestamp_ntz($24), 	-- $24: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($25)::char, 	-- $25: ENTERED_BY CHAR(8000) NOT NULL
		($26)::smallint, 	-- $26: ENTERED_LOCATION smallint NOT NULL
		($27)::boolean, 	-- $27: TLA_2ND_LIEN_INCR BOOLEAN NULL
		($28)::number, 	-- $28: TLA_2ND_LIEN_INCR_AMT NUMBER(10,4) NOT NULL
		($29)::number, 	-- $29: APPROVAL_AMT NUMBER(10,4) NULL
		($30)::number, 	-- $30: MGR_OVERRIDE_AMT NUMBER(10,4) NULL
		($31)::char, 	-- $31: MGR_OVERRIDE_INITS CHAR(8000) NULL
		($32)::int, 	-- $32: LOAN_KEY INT NULL
		($33)::int, 	-- $33: SCORE_VALUE INT NOT NULL
		($34)::number 	-- $34: SCORE_AMOUNT NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TitleLoanApproval/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TitleLoanApproval_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TitleLoanApproval_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TitleLoanApproval_HIST;
SELECT * FROM STG.WINCHK_TitleLoanApproval_HIST;
[STATUS=tbd]
*/

-- // TABLE 1025: TotalDailyFees
COPY INTO ARES.STG.SRC_TotalDailyFees_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TOTAL_DAILY_FEES_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::number, 	-- $3: STORE_FEES_PAYDAY NUMBER(19,4) NOT NULL
		($4)::number, 	-- $4: STORE_FEES_TITLE NUMBER(19,4) NOT NULL
		($5)::number, 	-- $5: STORE_FEES_SIG NUMBER(19,4) NOT NULL
		($6)::number, 	-- $6: STORE_FEES_CASH_CHK NUMBER(19,4) NOT NULL
		($7)::number, 	-- $7: STORE_FEES_OTHER NUMBER(19,4) NOT NULL
		($8)::number, 	-- $8: INTERNET_FEES NUMBER(19,4) NOT NULL
		($9)::number, 	-- $9: STORE_FEES_TOTAL NUMBER(19,4) NOT NULL
		($10)::smallint, 	-- $10: STORE_FEES_RANK smallint NOT NULL
		($11)::number, 	-- $11: ALL_FEES_TOTAL NUMBER(19,4) NOT NULL
		($12)::smallint 	-- $12: ALL_FEES_RANK smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TotalDailyFees/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TotalDailyFees_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TotalDailyFees_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TotalDailyFees_HIST;
SELECT * FROM STG.WINCHK_TotalDailyFees_HIST;
[STATUS=tbd]
*/

-- // TABLE 1026: TotalDailyFees2
COPY INTO ARES.STG.SRC_TotalDailyFees2_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: location smallint NOT NULL
		($2)::number, 	-- $2: feepra NUMBER(19,4) NULL
		($3)::number, 	-- $3: feechk NUMBER(19,4) NULL
		($4)::number, 	-- $4: feetitle NUMBER(19,4) NULL
		($5)::number, 	-- $5: feesig NUMBER(19,4) NULL
		($6)::number 	-- $6: feeother NUMBER(19,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/TotalDailyFees2/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TotalDailyFees2_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TotalDailyFees2_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TotalDailyFees2_HIST;
SELECT * FROM STG.WINCHK_TotalDailyFees2_HIST;
[STATUS=tbd]
*/

-- // TABLE 1027: TransactionDirection
COPY INTO ARES.STG.SRC_TransactionDirection_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_DIRECTION_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionDirection/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionDirection_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionDirection_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionDirection_HIST;
SELECT * FROM STG.WINCHK_TransactionDirection_HIST;
[STATUS=tbd]
*/

-- // TABLE 1028: TransactionNote
COPY INTO ARES.STG.SRC_TransactionNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_POS_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NULL
		($4)::varchar, 	-- $4: NOTE VARCHAR(8000) NOT NULL
		($5)::text, 	-- $5: RTF_NOTE text NOT NULL
		($6)::boolean, 	-- $6: IS_FLASH BOOLEAN NOT NULL
		($7)::boolean, 	-- $7: IS_DELETED BOOLEAN NOT NULL
		($8)::datetime, 	-- $8: DATE_DELETED datetime NULL
		($9)::char, 	-- $9: DELETED_BY CHAR(8000) NULL
		($10)::datetime, 	-- $10: DATE_ENTERED datetime NOT NULL
		($11)::char, 	-- $11: ENTERED_BY CHAR(8000) NOT NULL
		($12)::date 	-- $12: FLASH_EXPIRATION_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionNote_HIST;
SELECT * FROM STG.WINCHK_TransactionNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 1029: TransactionProcessor
COPY INTO ARES.STG.SRC_TransactionProcessor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: PAYMENT_METHOD_KEY INT NOT NULL
		($4)::int, 	-- $4: TRANSACTION_DIRECTION_KEY INT NOT NULL
		($5)::smallint, 	-- $5: CREDIT_CARD_VENDOR_KEY SMALLINT NULL
		($6)::smallint, 	-- $6: CARD_FUNDING_VENDOR_KEY SMALLINT NULL
		($7)::boolean 	-- $7: IS_INTERAC BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionProcessor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionProcessor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionProcessor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionProcessor_HIST;
SELECT * FROM STG.WINCHK_TransactionProcessor_HIST;
[STATUS=tbd]
*/

-- // TABLE 1030: TransactionProcessorCompanyBankAccountConfig
COPY INTO ARES.STG.SRC_TransactionProcessorCompanyBankAccountConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_PROCESSOR_COMPANY_BANK_ACCOUNT_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($3)::int, 	-- $3: COMPANY_BANK_ACCOUNT_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NULL
		($5)::int, 	-- $5: LOAN_PRODUCT_KEY INT NULL
		($6)::boolean, 	-- $6: IS_PRODUCTION BOOLEAN NOT NULL
		($7)::varchar, 	-- $7: KEY VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: VALUE VARCHAR(8000) NOT NULL
		($9)::char, 	-- $9: LAST_UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11), 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($12)::boolean 	-- $12: IS_HIDDEN BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionProcessorCompanyBankAccountConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionProcessorCompanyBankAccountConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionProcessorCompanyBankAccountConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionProcessorCompanyBankAccountConfig_HIST;
SELECT * FROM STG.WINCHK_TransactionProcessorCompanyBankAccountConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 1031: TransactionProcessorCompanyBankAccountConfigHistory
COPY INTO ARES.STG.SRC_TransactionProcessorCompanyBankAccountConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_PROCESSOR_COMPANY_BANK_ACCOUNT_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($3)::int, 	-- $3: COMPANY_BANK_ACCOUNT_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NULL
		($5)::int, 	-- $5: LOAN_PRODUCT_KEY INT NULL
		($6)::boolean, 	-- $6: IS_PRODUCTION BOOLEAN NOT NULL
		($7)::varchar, 	-- $7: KEY VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: VALUE VARCHAR(8000) NOT NULL
		($9)::char, 	-- $9: LAST_UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11), 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($12)::boolean 	-- $12: IS_HIDDEN BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionProcessorCompanyBankAccountConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionProcessorCompanyBankAccountConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionProcessorCompanyBankAccountConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionProcessorCompanyBankAccountConfigHistory_HIST;
SELECT * FROM STG.WINCHK_TransactionProcessorCompanyBankAccountConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1032: TransactionProcessorConfig
COPY INTO ARES.STG.SRC_TransactionProcessorConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_PROCESSOR_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NULL
		($4)::int, 	-- $4: LOAN_PRODUCT_KEY INT NULL
		($5)::boolean, 	-- $5: IS_PRODUCTION BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: KEY VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: VALUE VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: LAST_UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10), 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($11)::boolean 	-- $11: IS_HIDDEN BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionProcessorConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionProcessorConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionProcessorConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionProcessorConfig_HIST;
SELECT * FROM STG.WINCHK_TransactionProcessorConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 1033: TransactionProcessorConfigHistory
COPY INTO ARES.STG.SRC_TransactionProcessorConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSACTION_PROCESSOR_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANSACTION_PROCESSOR_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NULL
		($4)::int, 	-- $4: LOAN_PRODUCT_KEY INT NULL
		($5)::boolean, 	-- $5: IS_PRODUCTION BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: KEY VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: VALUE VARCHAR(8000) NOT NULL
		($8)::char, 	-- $8: LAST_UPDATED_BY CHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10), 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($11)::boolean 	-- $11: IS_HIDDEN BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransactionProcessorConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransactionProcessorConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransactionProcessorConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransactionProcessorConfigHistory_HIST;
SELECT * FROM STG.WINCHK_TransactionProcessorConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1034: TransCode
COPY INTO ARES.STG.SRC_TransCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: TRANS_CODE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransCode_HIST;
SELECT * FROM STG.WINCHK_TransCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 1035: TransDetail
COPY INTO ARES.STG.SRC_TransDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: TRANS_POS_KEY INT NULL
		($6)::int, 	-- $6: DRAWERZ_KEY INT NULL
		($7)::int, 	-- $7: REVERSE_KEY INT NULL
		($8)::int, 	-- $8: CUSTOMER_KEY INT NULL
		($9)::smallint, 	-- $9: TRANS_CODE SMALLINT NOT NULL
		($10)::char, 	-- $10: PRODUCT_TYPE CHAR(8000) NOT NULL
		($11)::char 	-- $11: LOAN_TYPE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetail_HIST;
SELECT * FROM STG.WINCHK_TransDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 1036: TransDetailAcct
COPY INTO ARES.STG.SRC_TransDetailAcct_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_ACCT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::smallint, 	-- $4: ACCT_TYPE SMALLINT NOT NULL
		($5)::number, 	-- $5: AMOUNT NUMBER(19,4) NOT NULL
		($6)::int 	-- $6: GL_ACCT INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailAcct/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailAcct_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailAcct_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailAcct_HIST;
SELECT * FROM STG.WINCHK_TransDetailAcct_HIST;
[STATUS=tbd]
*/

-- // TABLE 1037: TransDetailCardProducts
COPY INTO ARES.STG.SRC_TransDetailCardProducts_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_CARD_PRODUCTS_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: CARD_PRODUCTS_TRANS_KEY INT NOT NULL
		($4)::int, 	-- $4: ACCOUNT_HOLDER_KEY INT NOT NULL
		($5)::varchar, 	-- $5: FIRST_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: MIDDLE_INITIAL VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: LAST_NAME VARCHAR(8000) NOT NULL
		($8)::int, 	-- $8: CARD_NUMBER_TOKEN INT NOT NULL
		($9)::int, 	-- $9: BIN INT NOT NULL
		($10)::smallint, 	-- $10: CARD_NUMBER_LAST_FOUR smallint NOT NULL
		($11)::smallint, 	-- $11: PARTNER_KEY SMALLINT NOT NULL
		($12)::smallint, 	-- $12: EXPIRATION_MONTH SMALLINT NOT NULL
		($13)::smallint 	-- $13: EXPIRATION_YEAR smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailCardProducts/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailCardProducts_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailCardProducts_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailCardProducts_HIST;
SELECT * FROM STG.WINCHK_TransDetailCardProducts_HIST;
[STATUS=tbd]
*/

-- // TABLE 1038: TransDetailCash
COPY INTO ARES.STG.SRC_TransDetailCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::char, 	-- $3: CASH_FROM CHAR(8000) NOT NULL
		($4)::char, 	-- $4: CASH_TO CHAR(8000) NOT NULL
		($5)::number, 	-- $5: CASH_AMT NUMBER(19,4) NOT NULL
		($6)::number, 	-- $6: CCARD_AMT NUMBER(10,4) NOT NULL
		($7)::int, 	-- $7: PARSE_CASH_KEY INT NULL
		($8)::int, 	-- $8: DRAWER_KEY INT NULL
		($9)::int 	-- $9: CURRENCY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailCash_HIST;
SELECT * FROM STG.WINCHK_TransDetailCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 1039: TransDetailCashParsedCash
COPY INTO ARES.STG.SRC_TransDetailCashParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_CASH_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_CASH_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailCashParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailCashParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailCashParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailCashParsedCash_HIST;
SELECT * FROM STG.WINCHK_TransDetailCashParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 1040: TransDetailCheck
COPY INTO ARES.STG.SRC_TransDetailCheck_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_CHECK_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: CHECK_FROM CHAR(8000) NOT NULL
		($5)::char, 	-- $5: CHECK_TO CHAR(8000) NOT NULL
		($6)::number, 	-- $6: CHECK_AMT NUMBER(19,4) NOT NULL
		($7)::smallint, 	-- $7: CHECK_QTY smallint NOT NULL
		($8)::smallint, 	-- $8: CHECK_TYPE SMALLINT NOT NULL
		($9)::int, 	-- $9: DRAWER_KEY INT NULL
		($10)::char 	-- $10: DEPOSIT_METHOD CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailCheck/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailCheck_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailCheck_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailCheck_HIST;
SELECT * FROM STG.WINCHK_TransDetailCheck_HIST;
[STATUS=tbd]
*/

-- // TABLE 1041: TransDetailIntShort
COPY INTO ARES.STG.SRC_TransDetailIntShort_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_INT_SHORT INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NULL
		($4)::date, 	-- $4: BUSINESS_DATE DATE NULL
		($5)::varchar, 	-- $5: TD_DESCRIPTION VARCHAR(8000) NOT NULL
		($6)::varchar 	-- $6: SPELL_TRANS_CODE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailIntShort/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailIntShort_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailIntShort_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailIntShort_HIST;
SELECT * FROM STG.WINCHK_TransDetailIntShort_HIST;
[STATUS=tbd]
*/

-- // TABLE 1042: TransDetailLoan
COPY INTO ARES.STG.SRC_TransDetailLoan_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_LOAN_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: LOAN_FROM CHAR(8000) NOT NULL
		($5)::char, 	-- $5: LOAN_TO CHAR(8000) NOT NULL
		($6)::char, 	-- $6: LOAN_TYPE CHAR(8000) NOT NULL
		($7)::number, 	-- $7: LOAN_AMT NUMBER(10,4) NOT NULL
		($8)::smallint, 	-- $8: LOAN_CNT SMALLINT NOT NULL
		($9)::char 	-- $9: PRODUCT_TYPE CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailLoan/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailLoan_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailLoan_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailLoan_HIST;
SELECT * FROM STG.WINCHK_TransDetailLoan_HIST;
[STATUS=tbd]
*/

-- // TABLE 1043: TransDetailService
COPY INTO ARES.STG.SRC_TransDetailService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_DETAIL_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_ACCT_KEY INT NULL
		($4)::char, 	-- $4: SERVICE_FROM CHAR(8000) NOT NULL
		($5)::char, 	-- $5: SERVICE_TO CHAR(8000) NOT NULL
		($6)::int, 	-- $6: SERVICE_DETAIL_KEY INT NOT NULL
		($7)::int, 	-- $7: SERVICE_QTY INT NOT NULL
		($8)::int 	-- $8: DRAWER_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransDetailService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransDetailService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransDetailService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransDetailService_HIST;
SELECT * FROM STG.WINCHK_TransDetailService_HIST;
[STATUS=tbd]
*/

-- // TABLE 1044: TransferFunds
COPY INTO ARES.STG.SRC_TransferFunds_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSFER_FUNDS_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::char, 	-- $5: FUNDS_FROM CHAR(8000) NOT NULL
		($6)::char, 	-- $6: FUNDS_TO CHAR(8000) NOT NULL
		($7)::int, 	-- $7: GL_ACCT INT NOT NULL
		($8)::number, 	-- $8: TOT_AMOUNT NUMBER(19,4) NOT NULL
		($9)::varchar, 	-- $9: DESCRIPTION VARCHAR(8000) NOT NULL
		($10)::int, 	-- $10: TRANS_DETAIL_KEY INT NOT NULL
		($11)::int, 	-- $11: CURRENCY_KEY INT NOT NULL
		($12)::varchar 	-- $12: ADP_POSITION_ID VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransferFunds/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransferFunds_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransferFunds_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransferFunds_HIST;
SELECT * FROM STG.WINCHK_TransferFunds_HIST;
[STATUS=tbd]
*/

-- // TABLE 1045: TransferFundsInterStore
COPY INTO ARES.STG.SRC_TransferFundsInterStore_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANSFER_FUNDS_INTER_STORE_KEY INT NOT NULL
		($2)::int, 	-- $2: FROM_TRANSFER_FUNDS_KEY INT NOT NULL
		($3)::int, 	-- $3: FROM_TRANS_DETAIL_CASH_KEY INT NULL
		($4)::smallint, 	-- $4: FROM_LOCATION smallint NOT NULL
		($5)::smallint, 	-- $5: TO_LOCATION smallint NOT NULL
		($6)::int, 	-- $6: TO_TRANSFER_FUNDS_KEY INT NULL
		($7)::decimal, 	-- $7: BASE_CURRENCY_VALUE DECIMAL(38,0) NOT NULL
		($8)::int, 	-- $8: SERVICE_MASTER_KEY INT NULL
		($9)::int 	-- $9: SERVICE_QTY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransferFundsInterStore/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransferFundsInterStore_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransferFundsInterStore_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransferFundsInterStore_HIST;
SELECT * FROM STG.WINCHK_TransferFundsInterStore_HIST;
[STATUS=tbd]
*/

-- // TABLE 1046: TransPOS
COPY INTO ARES.STG.SRC_TransPOS_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TRANS_POS_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: LOCATION smallint NOT NULL
		($6)::number, 	-- $6: CASH_RECV NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: CASH_PAID NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: CCARD_RECV NUMBER(10,4) NOT NULL
		($9)::number 	-- $9: CCARD_PAID NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransPOS/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransPOS_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransPOS_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransPOS_HIST;
SELECT * FROM STG.WINCHK_TransPOS_HIST;
[STATUS=tbd]
*/

-- // TABLE 1047: TransUnionCodes
COPY INTO ARES.STG.SRC_TransUnionCodes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: TUC_KEY INT NOT NULL
		($2)::varchar, 	-- $2: tuc_code VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: tuc_type VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: tuc_desc VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/TransUnionCodes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*TransUnionCodes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_TransUnionCodes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_TransUnionCodes_HIST;
SELECT * FROM STG.WINCHK_TransUnionCodes_HIST;
[STATUS=tbd]
*/

-- // TABLE 1048: US_States
COPY INTO ARES.STG.SRC_US_States_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: State CHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: StateName VARCHAR(8000) NULL
		($3)::boolean, 	-- $3: IS_US_STATE BOOLEAN NOT NULL
		($4)::boolean 	-- $4: IS_CANADA_PROVINCE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/US_States/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*US_States_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_US_States_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_US_States_HIST;
SELECT * FROM STG.WINCHK_US_States_HIST;
[STATUS=tbd]
*/

-- // TABLE 1049: US_Zipcodes
COPY INTO ARES.STG.SRC_US_Zipcodes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: ZIPCODE VARCHAR(8000) NOT NULL
		($2)::varchar, 	-- $2: CITY VARCHAR(8000) NOT NULL
		($3)::char, 	-- $3: STATE CHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: COUNTY VARCHAR(8000) NOT NULL
		($5)::smallint, 	-- $5: TIMEZONE smallint NOT NULL
		($6)::varchar, 	-- $6: MSA_CODE VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: ZIP_TYPE VARCHAR(8000) NULL
		($8)::int, 	-- $8: DMA INT NULL
		($9)::decimal, 	-- $9: latitude DECIMAL(38,0) NULL
		($10)::decimal 	-- $10: longitude DECIMAL(38,0) NULL
    FROM @ETL.INBOUND/SRC/Backfill/US_Zipcodes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*US_Zipcodes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_US_Zipcodes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_US_Zipcodes_HIST;
SELECT * FROM STG.WINCHK_US_Zipcodes_HIST;
[STATUS=tbd]
*/

-- // TABLE 1050: VariableRateType
COPY INTO ARES.STG.SRC_VariableRateType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VARIABLE_RATE_TYPE_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VariableRateType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VariableRateType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VariableRateType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VariableRateType_HIST;
SELECT * FROM STG.WINCHK_VariableRateType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1051: VaultCount
COPY INTO ARES.STG.SRC_VaultCount_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_COUNT_KEY INT NOT NULL
		($2)::int, 	-- $2: TRANS_DETAIL_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::smallint, 	-- $6: START_OF_DAY SMALLINT NOT NULL
		($7)::varchar, 	-- $7: OS_REASON VARCHAR(8000) NULL
		($8)::int, 	-- $8: ENTERED_PARSE_CASH_KEY INT NULL
		($9)::int, 	-- $9: CALC_PARSE_CASH_KEY INT NULL
		($10)::number, 	-- $10: CASHCHK_AMT NUMBER(19,4) NOT NULL
		($11)::number, 	-- $11: COLLCHK_AMT NUMBER(19,4) NOT NULL
		($12)::int, 	-- $12: CASHCHK_CNT INT NOT NULL
		($13)::int, 	-- $13: COLLCHK_CNT INT NOT NULL
		($14)::number, 	-- $14: CCARD_AMT NUMBER(19,4) NOT NULL
		($15)::int, 	-- $15: CCARD_CNT INT NOT NULL
		($16)::int, 	-- $16: BALSHEET_KEY INT NULL
		($17)::char, 	-- $17: OS_CATEGORY CHAR(8000) NULL
		($18)::number, 	-- $18: SPAY_PAYDAY_CHECKS_AMT NUMBER(19,4) NOT NULL
		($19)::number, 	-- $19: MPAY_PAYDAY_AMT NUMBER(19,4) NOT NULL
		($20)::number, 	-- $20: OEND_PAYDAY_AMT NUMBER(19,4) NOT NULL
		($21)::number, 	-- $21: SPAY_TITLE_AMT NUMBER(19,4) NOT NULL
		($22)::number, 	-- $22: MPAY_TITLE_AMT NUMBER(19,4) NOT NULL
		($23)::number, 	-- $23: OEND_TITLE_AMT NUMBER(19,4) NOT NULL
		($24)::number, 	-- $24: SPAY_TITLE_2ND_AMT NUMBER(19,4) NOT NULL
		($25)::number, 	-- $25: MPAY_TITLE_2ND_AMT NUMBER(19,4) NOT NULL
		($26)::number, 	-- $26: OEND_TITLE_2ND_AMT NUMBER(19,4) NOT NULL
		($27)::number, 	-- $27: SPAY_SIG_AMT NUMBER(19,4) NOT NULL
		($28)::number, 	-- $28: MPAY_SIG_AMT NUMBER(19,4) NOT NULL
		($29)::number, 	-- $29: OEND_SIG_AMT NUMBER(19,4) NOT NULL
		($30)::int, 	-- $30: SPAY_PAYDAY_CHECKS_CNT INT NOT NULL
		($31)::int, 	-- $31: MPAY_PAYDAY_CNT INT NOT NULL
		($32)::int, 	-- $32: OEND_PAYDAY_CNT INT NOT NULL
		($33)::int, 	-- $33: SPAY_TITLE_CNT INT NOT NULL
		($34)::int, 	-- $34: MPAY_TITLE_CNT INT NOT NULL
		($35)::int, 	-- $35: OEND_TITLE_CNT INT NOT NULL
		($36)::int, 	-- $36: SPAY_TITLE_2ND_CNT INT NOT NULL
		($37)::int, 	-- $37: MPAY_TITLE_2ND_CNT INT NOT NULL
		($38)::int, 	-- $38: OEND_TITLE_2ND_CNT INT NOT NULL
		($39)::int, 	-- $39: SPAY_SIG_CNT INT NOT NULL
		($40)::int, 	-- $40: MPAY_SIG_CNT INT NOT NULL
		($41)::int, 	-- $41: OEND_SIG_CNT INT NOT NULL
		($42)::date, 	-- $42: BUSINESS_DATE DATE NULL
		($43)::int, 	-- $43: BAG_MIDDAY_CNT INT NOT NULL
		($44)::int, 	-- $44: BAG_MIDDAY_CHK_CNT INT NOT NULL
		($45)::number, 	-- $45: BAG_MIDDAY_AMT NUMBER(19,4) NOT NULL
		($46)::int, 	-- $46: BAG_EODAY_CNT INT NOT NULL
		($47)::int, 	-- $47: BAG_EODAY_CHK_CNT INT NOT NULL
		($48)::number, 	-- $48: BAG_EODAY_AMT NUMBER(19,4) NOT NULL
		($49)::number, 	-- $49: SPAY_PAYDAY_DEBIT_CARDS_AMT NUMBER(19,4) NOT NULL
		($50)::int, 	-- $50: SPAY_PAYDAY_DEBIT_CARDS_CNT INT NOT NULL
		($51)::int, 	-- $51: GOLD_DAILY_BAGS_CNT INT NOT NULL
		($52)::number, 	-- $52: GOLD_DAILY_BAGS_AMT NUMBER(10,4) NOT NULL
		($53)::char 	-- $53: VAULT_MANAGER CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultCount/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultCount_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultCount_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultCount_HIST;
SELECT * FROM STG.WINCHK_VaultCount_HIST;
[STATUS=tbd]
*/

-- // TABLE 1052: VaultCountCalcParsedCash
COPY INTO ARES.STG.SRC_VaultCountCalcParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_COUNT_CALC_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: VAULT_COUNT_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultCountCalcParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultCountCalcParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultCountCalcParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultCountCalcParsedCash_HIST;
SELECT * FROM STG.WINCHK_VaultCountCalcParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 1053: VaultCountEnteredParsedCash
COPY INTO ARES.STG.SRC_VaultCountEnteredParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_COUNT_ENTERED_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: VAULT_COUNT_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultCountEnteredParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultCountEnteredParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultCountEnteredParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultCountEnteredParsedCash_HIST;
SELECT * FROM STG.WINCHK_VaultCountEnteredParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 1054: VaultCountService
COPY INTO ARES.STG.SRC_VaultCountService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_COUNT_SERVICE_KEY INT NOT NULL
		($2)::int, 	-- $2: VAULT_COUNT_KEY INT NOT NULL
		($3)::int, 	-- $3: SERVICE_DETAIL_KEY INT NOT NULL
		($4)::int, 	-- $4: SERVICE_CNT INT NOT NULL
		($5)::int 	-- $5: SERVICE_CALC INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultCountService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultCountService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultCountService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultCountService_HIST;
SELECT * FROM STG.WINCHK_VaultCountService_HIST;
[STATUS=tbd]
*/

-- // TABLE 1055: VaultMaster
COPY INTO ARES.STG.SRC_VaultMaster_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: VAULT_MGR CHAR(8000) NULL
		($4)::number, 	-- $4: VAULT_100 NUMBER(19,4) NULL
		($5)::number, 	-- $5: VAULT_50 NUMBER(19,4) NULL
		($6)::number, 	-- $6: VAULT_20 NUMBER(19,4) NULL
		($7)::number, 	-- $7: VAULT_10 NUMBER(19,4) NULL
		($8)::number, 	-- $8: VAULT_05 NUMBER(19,4) NULL
		($9)::number, 	-- $9: VAULT_01 NUMBER(19,4) NULL
		($10)::number, 	-- $10: VAULT_HLF NUMBER(19,4) NULL
		($11)::number, 	-- $11: VAULT_QTR NUMBER(19,4) NULL
		($12)::number, 	-- $12: VAULT_DIME NUMBER(19,4) NULL
		($13)::number, 	-- $13: VAULT_NIC NUMBER(19,4) NULL
		($14)::number, 	-- $14: VAULT_PEN NUMBER(19,4) NULL
		($15)::number, 	-- $15: VAULT_MISC NUMBER(19,4) NULL
		($16)::number, 	-- $16: VAULT_CASHCHK_AMT NUMBER(19,4) NOT NULL
		($17)::number, 	-- $17: VAULT_CCARD_AMT NUMBER(19,4) NULL
		($18)::smallint, 	-- $18: VAULT_CASHCHK_CNT smallint NOT NULL
		($19)::int, 	-- $19: VAULT_CCARD_CNT INT NULL
		($20)::boolean, 	-- $20: MGR_AUDIT_COMPLETE BOOLEAN NOT NULL
		($21)::boolean, 	-- $21: VMGR_AUDIT_COMPLETE BOOLEAN NOT NULL
		($22)::number, 	-- $22: VAULT_MPAY_PAYDAY_AMT NUMBER(19,4) NOT NULL
		($23)::number, 	-- $23: VAULT_OEND_PAYDAY_AMT NUMBER(19,4) NOT NULL
		($24)::number, 	-- $24: VAULT_SPAY_TITLE_AMT NUMBER(19,4) NOT NULL
		($25)::number, 	-- $25: VAULT_MPAY_TITLE_AMT NUMBER(19,4) NOT NULL
		($26)::number, 	-- $26: VAULT_OEND_TITLE_AMT NUMBER(19,4) NOT NULL
		($27)::number, 	-- $27: VAULT_SPAY_TITLE_2ND_AMT NUMBER(19,4) NOT NULL
		($28)::number, 	-- $28: VAULT_MPAY_TITLE_2ND_AMT NUMBER(19,4) NOT NULL
		($29)::number, 	-- $29: VAULT_OEND_TITLE_2ND_AMT NUMBER(19,4) NOT NULL
		($30)::number, 	-- $30: VAULT_SPAY_SIG_AMT NUMBER(19,4) NOT NULL
		($31)::number, 	-- $31: VAULT_MPAY_SIG_AMT NUMBER(19,4) NOT NULL
		($32)::number, 	-- $32: VAULT_OEND_SIG_AMT NUMBER(19,4) NOT NULL
		($33)::int, 	-- $33: VAULT_MPAY_PAYDAY_CNT INT NOT NULL
		($34)::int, 	-- $34: VAULT_OEND_PAYDAY_CNT INT NOT NULL
		($35)::int, 	-- $35: VAULT_SPAY_TITLE_CNT INT NOT NULL
		($36)::int, 	-- $36: VAULT_MPAY_TITLE_CNT INT NOT NULL
		($37)::int, 	-- $37: VAULT_OEND_TITLE_CNT INT NOT NULL
		($38)::int, 	-- $38: VAULT_SPAY_TITLE_2ND_CNT INT NOT NULL
		($39)::int, 	-- $39: VAULT_MPAY_TITLE_2ND_CNT INT NOT NULL
		($40)::int, 	-- $40: VAULT_OEND_TITLE_2ND_CNT INT NOT NULL
		($41)::int, 	-- $41: VAULT_SPAY_SIG_CNT INT NOT NULL
		($42)::int, 	-- $42: VAULT_MPAY_SIG_CNT INT NOT NULL
		($43)::int, 	-- $43: VAULT_OEND_SIG_CNT INT NOT NULL
		($44)::int, 	-- $44: VAULT_BAG_MIDDAY_CNT INT NOT NULL
		($45)::int, 	-- $45: VAULT_BAG_MIDDAY_CHK_CNT INT NOT NULL
		($46)::number, 	-- $46: VAULT_BAG_MIDDAY_AMT NUMBER(19,4) NOT NULL
		($47)::int, 	-- $47: VAULT_BAG_EODAY_CNT INT NOT NULL
		($48)::int, 	-- $48: VAULT_BAG_EODAY_CHK_CNT INT NOT NULL
		($49)::number, 	-- $49: VAULT_BAG_EODAY_AMT NUMBER(19,4) NOT NULL
		($50)::number, 	-- $50: VAULT_SPAY_PAYDAY_CHECKS_AMT NUMBER(19,4) NOT NULL
		($51)::int, 	-- $51: VAULT_SPAY_PAYDAY_CHECKS_CNT INT NOT NULL
		($52)::number, 	-- $52: VAULT_SPAY_PAYDAY_DEBIT_CARDS_AMT NUMBER(19,4) NOT NULL
		($53)::int, 	-- $53: VAULT_SPAY_PAYDAY_DEBIT_CARDS_CNT INT NOT NULL
		($54)::int, 	-- $54: VAULT_GOLD_DAILY_BAGS_CNT INT NOT NULL
		($55)::number, 	-- $55: VAULT_GOLD_DAILY_BAGS_AMT NUMBER(10,4) NOT NULL
		($56)::number, 	-- $56: VAULT_2P NUMBER(19,4) NULL
		($57)::number, 	-- $57: VAULT_20P NUMBER(19,4) NULL
		($58)::number, 	-- $58: VAULT_02 NUMBER(19,4) NULL
		($59)::number 	-- $59: Vault_Tot_Cash NUMBER(19,4) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultMaster/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultMaster_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultMaster_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultMaster_HIST;
SELECT * FROM STG.WINCHK_VaultMaster_HIST;
[STATUS=tbd]
*/

-- // TABLE 1056: VaultMasterParsedCash
COPY INTO ARES.STG.SRC_VaultMasterParsedCash_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_MASTER_PARSED_CASH_KEY INT NOT NULL
		($2)::int, 	-- $2: VAULT_KEY INT NOT NULL
		($3)::int, 	-- $3: DENOMINATION_KEY INT NOT NULL
		($4)::number 	-- $4: AMOUNT NUMBER(19,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultMasterParsedCash/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultMasterParsedCash_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultMasterParsedCash_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultMasterParsedCash_HIST;
SELECT * FROM STG.WINCHK_VaultMasterParsedCash_HIST;
[STATUS=tbd]
*/

-- // TABLE 1057: VaultMgrAssignment
COPY INTO ARES.STG.SRC_VaultMgrAssignment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VM_ASSIGN_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: LOGGED_ON_INITS CHAR(8000) NOT NULL
		($4)::char, 	-- $4: CURRENT_VM_INITS CHAR(8000) NOT NULL
		($5)::char, 	-- $5: NEW_VM_INITS CHAR(8000) NOT NULL
		($6)::char, 	-- $6: OTHER_AUTH_INITS CHAR(8000) NULL
		($7)::datetime 	-- $7: TIME_ASSIGNED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultMgrAssignment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultMgrAssignment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultMgrAssignment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultMgrAssignment_HIST;
SELECT * FROM STG.WINCHK_VaultMgrAssignment_HIST;
[STATUS=tbd]
*/

-- // TABLE 1058: VaultMgrAuthorization
COPY INTO ARES.STG.SRC_VaultMgrAuthorization_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VM_AUTH_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: LOGGED_ON_INITS CHAR(8000) NOT NULL
		($4)::char, 	-- $4: CURRENT_VM_INITS CHAR(8000) NOT NULL
		($5)::char, 	-- $5: OTHER_AUTH_INITS CHAR(8000) NULL
		($6)::datetime, 	-- $6: TIME_AUTHORIZED datetime NOT NULL
		($7)::number, 	-- $7: TRANS_AMT NUMBER(19,4) NOT NULL
		($8)::int, 	-- $8: TRANS_RIGHTS_KEY INT NOT NULL
		($9)::int 	-- $9: VMA_TRANS_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultMgrAuthorization/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultMgrAuthorization_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultMgrAuthorization_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultMgrAuthorization_HIST;
SELECT * FROM STG.WINCHK_VaultMgrAuthorization_HIST;
[STATUS=tbd]
*/

-- // TABLE 1059: VaultMgrAuthorizationDetail
COPY INTO ARES.STG.SRC_VaultMgrAuthorizationDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VM_AUTH_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: VM_AUTH_KEY INT NOT NULL
		($3)::datetime, 	-- $3: APPROVAL_TIME datetime NOT NULL
		($4)::int, 	-- $4: MESSAGE_ID INT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NULL
		($6)::int, 	-- $6: LOAN_KEY INT NULL
		($7)::int, 	-- $7: TRANS_POS_KEY INT NULL
		($8)::decimal, 	-- $8: ORIG_VALUE DECIMAL(38,0) NULL
		($9)::decimal, 	-- $9: AUTH_VALUE DECIMAL(38,0) NULL
		($10)::boolean, 	-- $10: IS_CURRENCY BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: IS_PERCENT BOOLEAN NOT NULL
		($12)::varchar, 	-- $12: MESSAGE_DATA VARCHAR(8000) NULL
		($13)::boolean 	-- $13: IS_VM_AUTH BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultMgrAuthorizationDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultMgrAuthorizationDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultMgrAuthorizationDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultMgrAuthorizationDetail_HIST;
SELECT * FROM STG.WINCHK_VaultMgrAuthorizationDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 1060: VaultMgrAuthorizationNote
COPY INTO ARES.STG.SRC_VaultMgrAuthorizationNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VMA_NOTE_KEY INT NOT NULL
		($2)::int, 	-- $2: VM_AUTH_KEY INT NOT NULL
		($3)::varchar, 	-- $3: NOTE VARCHAR(8000) NOT NULL
		($4)::int 	-- $4: SCORE_SUMMARY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultMgrAuthorizationNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultMgrAuthorizationNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultMgrAuthorizationNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultMgrAuthorizationNote_HIST;
SELECT * FROM STG.WINCHK_VaultMgrAuthorizationNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 1061: VaultRecalcAdj
COPY INTO ARES.STG.SRC_VaultRecalcAdj_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_RECALC_ADJ_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char, 	-- $4: ENTERED_BY CHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::numeric, 	-- $6: VAULT_AMT NUMERIC NOT NULL
		($7)::int, 	-- $7: VAULT_CNT INT NOT NULL
		($8)::numeric, 	-- $8: CALC_AMT NUMERIC NOT NULL
		($9)::int, 	-- $9: CALC_CNT INT NOT NULL
		($10)::numeric, 	-- $10: AMT_DIFF NUMERIC NULL
		($11)::int 	-- $11: CNT_DIFF INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultRecalcAdj/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultRecalcAdj_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultRecalcAdj_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultRecalcAdj_HIST;
SELECT * FROM STG.WINCHK_VaultRecalcAdj_HIST;
[STATUS=tbd]
*/

-- // TABLE 1062: VaultService
COPY INTO ARES.STG.SRC_VaultService_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VAULT_SERVICE_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::int, 	-- $3: SERVICE_DETAIL_KEY INT NOT NULL
		($4)::int 	-- $4: VAULT_QTY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VaultService/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VaultService_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VaultService_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VaultService_HIST;
SELECT * FROM STG.WINCHK_VaultService_HIST;
[STATUS=tbd]
*/

-- // TABLE 1063: Vehicle
COPY INTO ARES.STG.SRC_Vehicle_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VEHICLE_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::varchar, 	-- $5: VEH_VIN VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: VEH_MAKE VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: VEH_MODEL VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: VEH_BODY VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: VEH_ENGINE VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: VEH_TRANS VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: VEH_DRIVE VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: VEH_MISC_EQUIP1 VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: VEH_MISC_EQUIP2 VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: VEH_MISC_EQUIP3 VARCHAR(8000) NOT NULL
		($15)::smallint, 	-- $15: VEH_YEAR smallint NOT NULL
		($16)::number, 	-- $16: LIST_PRICE NUMBER(19,4) NOT NULL
		($17)::varchar, 	-- $17: VEH_COLOR VARCHAR(8000) NOT NULL
		($18)::char, 	-- $18: FUEL_TYPE CHAR(8000) NOT NULL
		($19)::varchar 	-- $19: PLATE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/Vehicle/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Vehicle_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Vehicle_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Vehicle_HIST;
SELECT * FROM STG.WINCHK_Vehicle_HIST;
[STATUS=tbd]
*/

-- // TABLE 1064: VehicleCondition
COPY INTO ARES.STG.SRC_VehicleCondition_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: VEHICLE_CONDITION_KEY CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VehicleCondition/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VehicleCondition_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VehicleCondition_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VehicleCondition_HIST;
SELECT * FROM STG.WINCHK_VehicleCondition_HIST;
[STATUS=tbd]
*/

-- // TABLE 1065: VehicleHistory
COPY INTO ARES.STG.SRC_VehicleHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VEHICLE_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: VEHICLE_KEY INT NOT NULL
		($3)::int, 	-- $3: CUSTOMER_KEY INT NOT NULL
		($4)::int, 	-- $4: LOAN_KEY INT NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: TELLER CHAR(8000) NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::number, 	-- $8: VEH_WHOLESALE NUMBER(10,4) NOT NULL
		($9)::int, 	-- $9: VEH_MILEAGE INT NOT NULL
		($10)::char, 	-- $10: VEH_CONDITION CHAR(8000) NOT NULL
		($11)::char 	-- $11: VEH_VER_EST CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VehicleHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VehicleHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VehicleHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VehicleHistory_HIST;
SELECT * FROM STG.WINCHK_VehicleHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1066: VehicleLegalStatus
COPY INTO ARES.STG.SRC_VehicleLegalStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: VEHICLE_LEGAL_STATUS_KEY CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VehicleLegalStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VehicleLegalStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VehicleLegalStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VehicleLegalStatus_HIST;
SELECT * FROM STG.WINCHK_VehicleLegalStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 1067: VehicleOdometerCode
COPY INTO ARES.STG.SRC_VehicleOdometerCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: VEHICLE_ODOMETER_CODE_KEY CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VehicleOdometerCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VehicleOdometerCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VehicleOdometerCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VehicleOdometerCode_HIST;
SELECT * FROM STG.WINCHK_VehicleOdometerCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 1068: VehicleQuote
COPY INTO ARES.STG.SRC_VehicleQuote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VEHICLE_QUOTE_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::varchar, 	-- $5: VIN VARCHAR(8000) NOT NULL
		($6)::number, 	-- $6: MILEAGE_VALUE NUMBER(10,4) NOT NULL
		($7)::number, 	-- $7: RETAIL_PRICE NUMBER(10,4) NOT NULL
		($8)::number, 	-- $8: WHOLESALE_PRICE NUMBER(10,4) NOT NULL
		($9)::int, 	-- $9: MILEAGE INT NOT NULL
		($10)::varchar 	-- $10: PLATE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VehicleQuote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VehicleQuote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VehicleQuote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VehicleQuote_HIST;
SELECT * FROM STG.WINCHK_VehicleQuote_HIST;
[STATUS=tbd]
*/

-- // TABLE 1069: VehicleType
COPY INTO ARES.STG.SRC_VehicleType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: VEHICLE_TYPE_KEY CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VehicleType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VehicleType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VehicleType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VehicleType_HIST;
SELECT * FROM STG.WINCHK_VehicleType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1070: VergeLoanTransferEligibility
COPY INTO ARES.STG.SRC_VergeLoanTransferEligibility_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VERGE_LOAN_TRANSFER_ELIGIBILITY_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: LOAN_KEY INT NOT NULL
		($4)::date, 	-- $4: EXPIRATION_DATE DATE NOT NULL
		($5)::number, 	-- $5: BALANCE NUMBER(10,4) NULL
		($6)::number, 	-- $6: CREDIT_LIMIT NUMBER(10,4) NULL
		($7)::varchar, 	-- $7: HASH VARCHAR(8000) NULL
		to_timestamp_ntz($8), 	-- $8: LAST_UPDATE TIMESTAMP_LTZ NULL
		($9)::boolean 	-- $9: IS_TRANSFERED BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/VergeLoanTransferEligibility/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VergeLoanTransferEligibility_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VergeLoanTransferEligibility_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VergeLoanTransferEligibility_HIST;
SELECT * FROM STG.WINCHK_VergeLoanTransferEligibility_HIST;
[STATUS=tbd]
*/

-- // TABLE 1071: VeritecLoanID
COPY INTO ARES.STG.SRC_VeritecLoanID_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: LOAN_KEY INT NOT NULL
		($2)::varchar, 	-- $2: TRANS_NUM VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: MANUALLY_ENTERED BOOLEAN NOT NULL
		($4)::int, 	-- $4: VERITEC_LOAN_ID_KEY INT NOT NULL
		($5)::int 	-- $5: CUSTOMER_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VeritecLoanID/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VeritecLoanID_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VeritecLoanID_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VeritecLoanID_HIST;
SELECT * FROM STG.WINCHK_VeritecLoanID_HIST;
[STATUS=tbd]
*/

-- // TABLE 1072: Visitor
COPY INTO ARES.STG.SRC_Visitor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LENDER_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: EMAIL_ADDR VARCHAR(8000) NULL
		($4)::char, 	-- $4: V_STATUS_ID CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($6), 	-- $6: LAST_UPDATED TIMESTAMP_LTZ NULL
		($7)::int, 	-- $7: EMAIL_DELIVERY_FAILURE_COUNT INT NOT NULL
		($8)::datetime, 	-- $8: EMAIL_DELIVERY_FAILURE_DATE datetime NOT NULL
		($9)::boolean, 	-- $9: INVALID_EMAIL BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: EMAIL_DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($11), 	-- $11: EMAIL_DELETED_DATE TIMESTAMP_LTZ NULL
		($12)::varchar, 	-- $12: EMAIL_DELETED_BY VARCHAR(8000) NULL
		($13)::char, 	-- $13: TELLER CHAR(8000) NOT NULL
		($14)::date, 	-- $14: INVALID_EMAIL_VALIDATED DATE NULL
		($15)::char 	-- $15: INVALID_EMAIL_VALIDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/Visitor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*Visitor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_Visitor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_Visitor_HIST;
SELECT * FROM STG.WINCHK_Visitor_HIST;
[STATUS=tbd]
*/

-- // TABLE 1073: VisitorApiAuthorization
COPY INTO ARES.STG.SRC_VisitorApiAuthorization_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_API_AUTHORIZATION_KEY INT NOT NULL
		($2)::int, 	-- $2: API_APPLICATION_KEY INT NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		($4)::datetime, 	-- $4: DATE_TOKEN_EXPIRES datetime NOT NULL
		($5)::varchar, 	-- $5: PIN VARCHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: DATE_ENTERED datetime NOT NULL
		($7)::varchar, 	-- $7: TOKEN VARCHAR(36) NULL
		($8)::int 	-- $8: VISITOR_DEVICE_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorApiAuthorization/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorApiAuthorization_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorApiAuthorization_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorApiAuthorization_HIST;
SELECT * FROM STG.WINCHK_VisitorApiAuthorization_HIST;
[STATUS=tbd]
*/

-- // TABLE 1074: VisitorAuthData
COPY INTO ARES.STG.SRC_VisitorAuthData_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_KEY INT NOT NULL
		($2)::varchar, 	-- $2: ACCESS_ID VARCHAR(8000) NULL
		($3)::varchar, 	-- $3: ACCESS_PASSWORD VARCHAR(8000) NULL
		($4)::smallint, 	-- $4: FAILED_LOGIN_COUNT SMALLINT NOT NULL
		($5)::boolean, 	-- $5: IS_PASSWORD_SYS_GEN BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: LAST_FAILED_LOGIN TIMESTAMP_LTZ NULL
		to_timestamp_ntz($7), 	-- $7: LAST_LOGIN TIMESTAMP_LTZ NULL
		($8)::varchar, 	-- $8: PASSWORD VARCHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: PASSWORD_CHANGED_DATE TIMESTAMP_LTZ NULL
		($10)::smallint, 	-- $10: PASSWORD_TYPE SMALLINT NOT NULL
		($11)::varchar, 	-- $11: SALT VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: SECURITY_ANSWER VARCHAR(8000) NULL
		($13)::int, 	-- $13: SIGNIN_COUNT INT NOT NULL
		($14)::int, 	-- $14: VISITOR_SECURITY_QUESTION_KEY INT NULL
		($15)::boolean 	-- $15: IS_PASSWORD_FROM_CSR BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorAuthData/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorAuthData_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorAuthData_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorAuthData_HIST;
SELECT * FROM STG.WINCHK_VisitorAuthData_HIST;
[STATUS=tbd]
*/

-- // TABLE 1075: VisitorAuthenticationCode
COPY INTO ARES.STG.SRC_VisitorAuthenticationCode_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_AUTHENTICATION_CODE_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::varchar, 	-- $3: CODE VARCHAR(8000) NOT NULL
		($4)::datetime, 	-- $4: DATE_ENTERED datetime NOT NULL
		($5)::datetime, 	-- $5: DATE_EXPIRES datetime NOT NULL
		($6)::int, 	-- $6: CHANNEL_KEY INT NOT NULL
		($7)::varchar, 	-- $7: DEVICE_UUID VARCHAR(8000) NOT NULL
		($8)::int 	-- $8: BUSINESS_ENTITY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorAuthenticationCode/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorAuthenticationCode_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorAuthenticationCode_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorAuthenticationCode_HIST;
SELECT * FROM STG.WINCHK_VisitorAuthenticationCode_HIST;
[STATUS=tbd]
*/

-- // TABLE 1076: VisitorAuthenticationCodeAttempt
COPY INTO ARES.STG.SRC_VisitorAuthenticationCodeAttempt_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_AUTHENTICATION_CODE_ATTEMPT_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_AUTHENTICATION_CODE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: ATTEMPTED_CODE VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: SUCCESS BOOLEAN NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::bigint 	-- $6: WEB_ANALYTICS_REQUEST_KEY BIGINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorAuthenticationCodeAttempt/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorAuthenticationCodeAttempt_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorAuthenticationCodeAttempt_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorAuthenticationCodeAttempt_HIST;
SELECT * FROM STG.WINCHK_VisitorAuthenticationCodeAttempt_HIST;
[STATUS=tbd]
*/

-- // TABLE 1077: VisitorAuthenticationCodeConfig
COPY INTO ARES.STG.SRC_VisitorAuthenticationCodeConfig_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_AUTHENTICATION_CODE_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NULL
		($3)::boolean, 	-- $3: IS_ENABLED BOOLEAN NULL
		($4)::smallint, 	-- $4: MAX_ATTEMPTS smallint NULL
		($5)::smallint, 	-- $5: EXPIRES_IN_SECONDS smallint NULL
		($6)::int, 	-- $6: DELETE_AFTER_DAYS INT NULL
		($7)::datetime, 	-- $7: TRUST_DEVICES_ENTERED_BEFORE datetime NULL
		($8)::int, 	-- $8: CODE_LENGTH INT NULL
		($9)::varchar, 	-- $9: CODE_ALPHABET VARCHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorAuthenticationCodeConfig/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorAuthenticationCodeConfig_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorAuthenticationCodeConfig_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorAuthenticationCodeConfig_HIST;
SELECT * FROM STG.WINCHK_VisitorAuthenticationCodeConfig_HIST;
[STATUS=tbd]
*/

-- // TABLE 1078: VisitorAuthenticationCodeConfigChannel
COPY INTO ARES.STG.SRC_VisitorAuthenticationCodeConfigChannel_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_AUTHENTICATION_CODE_CONFIG_KEY INT NOT NULL
		($2)::int, 	-- $2: CHANNEL_KEY INT NOT NULL
		($3)::boolean 	-- $3: IS_ENABLED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorAuthenticationCodeConfigChannel/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorAuthenticationCodeConfigChannel_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorAuthenticationCodeConfigChannel_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorAuthenticationCodeConfigChannel_HIST;
SELECT * FROM STG.WINCHK_VisitorAuthenticationCodeConfigChannel_HIST;
[STATUS=tbd]
*/

-- // TABLE 1079: VisitorAuthenticationCodeConfigHistory
COPY INTO ARES.STG.SRC_VisitorAuthenticationCodeConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_AUTHENTICATION_CODE_CONFIG_KEY INT NOT NULL
		($2)::smallint, 	-- $2: LOCATION smallint NULL
		($3)::boolean, 	-- $3: IS_ENABLED BOOLEAN NULL
		($4)::smallint, 	-- $4: MAX_ATTEMPTS smallint NULL
		($5)::smallint, 	-- $5: EXPIRES_IN_SECONDS smallint NULL
		($6)::int, 	-- $6: DELETE_AFTER_DAYS INT NULL
		($7)::datetime, 	-- $7: TRUST_DEVICES_ENTERED_BEFORE datetime NULL
		($8)::int, 	-- $8: CODE_LENGTH INT NULL
		($9)::varchar, 	-- $9: CODE_ALPHABET VARCHAR(8000) NULL
		to_timestamp_ntz($10), 	-- $10: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($11) 	-- $11: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorAuthenticationCodeConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorAuthenticationCodeConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorAuthenticationCodeConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorAuthenticationCodeConfigHistory_HIST;
SELECT * FROM STG.WINCHK_VisitorAuthenticationCodeConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1080: VisitorBlock
COPY INTO ARES.STG.SRC_VisitorBlock_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_BLOCK_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: BLOCK_TYPE INT NOT NULL
		($4)::int, 	-- $4: BLOCK_REASON_KEY INT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: UPDATED_DATE datetime NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($9)::boolean 	-- $9: ISACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorBlock/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorBlock_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorBlock_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorBlock_HIST;
SELECT * FROM STG.WINCHK_VisitorBlock_HIST;
[STATUS=tbd]
*/

-- // TABLE 1081: VisitorBlockHistory
COPY INTO ARES.STG.SRC_VisitorBlockHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_BLOCK_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: BLOCK_TYPE INT NOT NULL
		($4)::int, 	-- $4: BLOCK_REASON_KEY INT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: UPDATED_DATE datetime NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($9)::boolean 	-- $9: ISACTIVE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorBlockHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorBlockHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorBlockHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorBlockHistory_HIST;
SELECT * FROM STG.WINCHK_VisitorBlockHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1082: VisitorBlockType
COPY INTO ARES.STG.SRC_VisitorBlockType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: BLOCK_TYPE INT NOT NULL
		($2)::varchar 	-- $2: BLOCK_TYPE_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorBlockType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorBlockType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorBlockType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorBlockType_HIST;
SELECT * FROM STG.WINCHK_VisitorBlockType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1083: VisitorCommunicationConsent
COPY INTO ARES.STG.SRC_VisitorCommunicationConsent_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_COMMUNICATION_CONSENT_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: COMMUNICATION_CONSENT_CONFIG_KEY INT NOT NULL
		($4)::datetime, 	-- $4: CONSENT_DATE datetime NOT NULL
		($5)::char, 	-- $5: CONSENT_TELLER CHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: CONSENT_END_DATE datetime NULL
		($7)::char, 	-- $7: CONSENT_END_TELLER CHAR(8000) NULL
		($8)::varchar, 	-- $8: CHANNEL_VALUE VARCHAR(8000) NULL
		to_timestamp_ntz($9), 	-- $9: CONSENT_VERIFY_DATE TIMESTAMP_LTZ NULL
		($10)::varchar 	-- $10: CONSENT_VERIFY_REFERENCE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorCommunicationConsent/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorCommunicationConsent_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorCommunicationConsent_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorCommunicationConsent_HIST;
SELECT * FROM STG.WINCHK_VisitorCommunicationConsent_HIST;
[STATUS=tbd]
*/

-- // TABLE 1084: VisitorCommunicationPreference
COPY INTO ARES.STG.SRC_VisitorCommunicationPreference_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_COMMUNICATION_PREFERENCE_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: COMMUNICATION_GROUP_CHANNEL_KEY INT NOT NULL
		($4)::boolean, 	-- $4: PREFERENCE BOOLEAN NOT NULL
		($5)::char, 	-- $5: CHANGED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($6) 	-- $6: CHANGED_DATE TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorCommunicationPreference/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorCommunicationPreference_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorCommunicationPreference_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorCommunicationPreference_HIST;
SELECT * FROM STG.WINCHK_VisitorCommunicationPreference_HIST;
[STATUS=tbd]
*/

-- // TABLE 1085: VisitorDevice
COPY INTO ARES.STG.SRC_VisitorDevice_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_DEVICE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: UUID VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SUBSCRIPTION_TOKEN VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: NAME VARCHAR(8000) NULL
		($5)::int, 	-- $5: NUM_PUSH_ERRORS INT NOT NULL
		($6)::int, 	-- $6: VISITOR_KEY INT NOT NULL
		($7)::boolean, 	-- $7: IS_EXPIRED BOOLEAN NOT NULL
		($8)::smallint, 	-- $8: DEVICE_TYPE SMALLINT NOT NULL
		($9)::datetime, 	-- $9: DATE_ENTERED datetime NOT NULL
		($10)::datetime, 	-- $10: DATE_LAST_PUSH datetime NULL
		($11)::varchar 	-- $11: APPLICATION_VERSION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDevice/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDevice_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDevice_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDevice_HIST;
SELECT * FROM STG.WINCHK_VisitorDevice_HIST;
[STATUS=tbd]
*/

-- // TABLE 1086: VisitorDeviceAuthenticationCertificate
COPY INTO ARES.STG.SRC_VisitorDeviceAuthenticationCertificate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_DEVICE_AUTHENTICATION_CERTIFICATE_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_DEVICE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: PUBLIC_KEY VARCHAR(8000) NOT NULL
		($4)::smallint 	-- $4: AUTHENTICATION_TYPE SMALLINT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDeviceAuthenticationCertificate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDeviceAuthenticationCertificate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDeviceAuthenticationCertificate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDeviceAuthenticationCertificate_HIST;
SELECT * FROM STG.WINCHK_VisitorDeviceAuthenticationCertificate_HIST;
[STATUS=tbd]
*/

-- // TABLE 1087: VisitorDeviceAuthenticationType
COPY INTO ARES.STG.SRC_VisitorDeviceAuthenticationType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: VISITOR_DEVICE_AUTHENTICATION_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDeviceAuthenticationType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDeviceAuthenticationType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDeviceAuthenticationType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDeviceAuthenticationType_HIST;
SELECT * FROM STG.WINCHK_VisitorDeviceAuthenticationType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1088: VisitorDeviceType
COPY INTO ARES.STG.SRC_VisitorDeviceType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: VISITOR_DEVICE_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDeviceType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDeviceType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDeviceType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDeviceType_HIST;
SELECT * FROM STG.WINCHK_VisitorDeviceType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1089: VisitorDocument
COPY INTO ARES.STG.SRC_VisitorDocument_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_DOCUMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: DWDOCID INT NOT NULL
		($4)::smallint, 	-- $4: DOCUMENT_TYPE SMALLINT NOT NULL
		($5)::int, 	-- $5: DOCUWARE_CABINET_KEY INT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($7)::smallint, 	-- $7: LOCATION smallint NOT NULL
		($8)::char, 	-- $8: TELLER CHAR(8000) NULL
		($9)::char, 	-- $9: IGNORE_TELLER CHAR(8000) NULL
		($10)::date, 	-- $10: IGNORE_DATE DATE NULL
		($11)::char, 	-- $11: IGNORE_TYPE CHAR(8000) NULL
		($12)::int, 	-- $12: LOAN_APPLICATION_KEY INT NULL
		($13)::int 	-- $13: LOAN_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDocument/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDocument_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDocument_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDocument_HIST;
SELECT * FROM STG.WINCHK_VisitorDocument_HIST;
[STATUS=tbd]
*/

-- // TABLE 1090: VisitorDocumentTemplate
COPY INTO ARES.STG.SRC_VisitorDocumentTemplate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_DOCUMENT_TEMPLATE_KEY INT NOT NULL
		($2)::smallint, 	-- $2: VISITOR_DOCUMENT_TEMPLATE_TYPE_KEY SMALLINT NOT NULL
		($3)::varchar, 	-- $3: FILENAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: EXT VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: REVISION VARCHAR(8000) NOT NULL
		($6)::variant, 	-- $6: FILE VARIANT NOT NULL
		($7)::char, 	-- $7: STATE CHAR(8000) NOT NULL
		($8)::char, 	-- $8: LANGUAGE CHAR(8000) NOT NULL
		($9)::boolean, 	-- $9: ENABLED BOOLEAN NOT NULL
		($10)::char, 	-- $10: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($11), 	-- $11: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13) 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDocumentTemplate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDocumentTemplate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDocumentTemplate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDocumentTemplate_HIST;
SELECT * FROM STG.WINCHK_VisitorDocumentTemplate_HIST;
[STATUS=tbd]
*/

-- // TABLE 1091: VisitorDocumentTemplateType
COPY INTO ARES.STG.SRC_VisitorDocumentTemplateType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: VISITOR_DOCUMENT_TEMPLATE_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDocumentTemplateType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDocumentTemplateType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDocumentTemplateType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDocumentTemplateType_HIST;
SELECT * FROM STG.WINCHK_VisitorDocumentTemplateType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1092: VisitorDocumentType
COPY INTO ARES.STG.SRC_VisitorDocumentType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: VISITOR_DOCUMENT_TYPE_KEY SMALLINT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::varchar 	-- $3: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorDocumentType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorDocumentType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorDocumentType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorDocumentType_HIST;
SELECT * FROM STG.WINCHK_VisitorDocumentType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1093: VisitorEditHistory
COPY INTO ARES.STG.SRC_VisitorEditHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_EDIT_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5) 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorEditHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorEditHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorEditHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorEditHistory_HIST;
SELECT * FROM STG.WINCHK_VisitorEditHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1094: VisitorEditHistoryDetail
COPY INTO ARES.STG.SRC_VisitorEditHistoryDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_EDIT_HISTORY_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_EDIT_HISTORY_KEY INT NOT NULL
		($3)::varchar, 	-- $3: FIELD_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: OLD_VALUE VARCHAR(8000) NULL
		($5)::varchar 	-- $5: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorEditHistoryDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorEditHistoryDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorEditHistoryDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorEditHistoryDetail_HIST;
SELECT * FROM STG.WINCHK_VisitorEditHistoryDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 1095: VisitorEmail
COPY INTO ARES.STG.SRC_VisitorEmail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_EMAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::varchar, 	-- $3: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: EMAIL_ID SMALLINT NOT NULL
		($5)::varchar, 	-- $5: EMAIL_SUBJECT VARCHAR(8000) NOT NULL
		($6)::text, 	-- $6: EMAIL_BODY text NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($8)::int, 	-- $8: LOAN_APPLICATION_KEY INT NULL
		($9)::int, 	-- $9: LOAN_KEY INT NULL
		($10)::char, 	-- $10: EMAIL_ORIGINATION CHAR(8000) NULL
		($11)::varchar, 	-- $11: EMAIL_FROM_ADDRESS VARCHAR(8000) NULL
		($12)::int, 	-- $12: EMAIL_TEMPLATE_KEY INT NULL
		($13)::datetime 	-- $13: EMAIL_DATE datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorEmail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorEmail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorEmail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorEmail_HIST;
SELECT * FROM STG.WINCHK_VisitorEmail_HIST;
[STATUS=tbd]
*/

-- // TABLE 1096: VisitorEmailDisposition
COPY INTO ARES.STG.SRC_VisitorEmailDisposition_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_EMAIL_DISPOSITION_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_EMAIL_KEY INT NOT NULL
		($3)::int, 	-- $3: EMAIL_DISPOSITION_KEY INT NOT NULL
		($4)::datetime, 	-- $4: DISPOSITION_DATE datetime NOT NULL
		($5)::char 	-- $5: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorEmailDisposition/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorEmailDisposition_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorEmailDisposition_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorEmailDisposition_HIST;
SELECT * FROM STG.WINCHK_VisitorEmailDisposition_HIST;
[STATUS=tbd]
*/

-- // TABLE 1097: VisitorLoanProductAnnualRateBand
COPY INTO ARES.STG.SRC_VisitorLoanProductAnnualRateBand_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_LOAN_PRODUCT_ANNUAL_RATE_BAND_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::int, 	-- $3: LOAN_PRODUCT_KEY INT NOT NULL
		($4)::smallint, 	-- $4: ANNUAL_RATE_BAND SMALLINT NOT NULL
		to_timestamp_ntz($5), 	-- $5: ENTERED_DATE TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::date 	-- $7: EXPIRE_DATE DATE NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorLoanProductAnnualRateBand/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorLoanProductAnnualRateBand_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorLoanProductAnnualRateBand_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorLoanProductAnnualRateBand_HIST;
SELECT * FROM STG.WINCHK_VisitorLoanProductAnnualRateBand_HIST;
[STATUS=tbd]
*/

-- // TABLE 1098: VisitorNonMilitaryVerification
COPY INTO ARES.STG.SRC_VisitorNonMilitaryVerification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_NON_MILITARY_VERIFICATION_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::char, 	-- $3: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($4), 	-- $4: VERIFICATION_DATE TIMESTAMP_LTZ NOT NULL
		($5)::varchar, 	-- $5: NOTE VARCHAR(8000) NULL
		($6)::datetime, 	-- $6: INVALIDATED_DATE datetime NULL
		($7)::char 	-- $7: INVALIDATED_BY CHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorNonMilitaryVerification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorNonMilitaryVerification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorNonMilitaryVerification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorNonMilitaryVerification_HIST;
SELECT * FROM STG.WINCHK_VisitorNonMilitaryVerification_HIST;
[STATUS=tbd]
*/

-- // TABLE 1099: VisitorNonMilitaryVerificationVaultMgrAuthorization
COPY INTO ARES.STG.SRC_VisitorNonMilitaryVerificationVaultMgrAuthorization_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_NON_MILITARY_VERIFICATION_VAULT_MGR_AUTHORIZATION_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_NON_MILITARY_VERIFICATION_KEY INT NOT NULL
		($3)::int 	-- $3: VAULT_MGR_AUTHORIZATION_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorNonMilitaryVerificationVaultMgrAuthorization/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorNonMilitaryVerificationVaultMgrAuthorization_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorNonMilitaryVerificationVaultMgrAuthorization_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorNonMilitaryVerificationVaultMgrAuthorization_HIST;
SELECT * FROM STG.WINCHK_VisitorNonMilitaryVerificationVaultMgrAuthorization_HIST;
[STATUS=tbd]
*/

-- // TABLE 1100: VisitorPasswordHistory
COPY INTO ARES.STG.SRC_VisitorPasswordHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_PASSWORD_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_KEY INT NOT NULL
		($3)::varchar, 	-- $3: PASSWORD_HASH VARCHAR(8000) NOT NULL
		($4)::smallint, 	-- $4: PASSWORD_TYPE SMALLINT NOT NULL
		($5)::varchar, 	-- $5: PASSWORD_SALT VARCHAR(8000) NOT NULL
		($6)::datetime 	-- $6: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorPasswordHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorPasswordHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorPasswordHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorPasswordHistory_HIST;
SELECT * FROM STG.WINCHK_VisitorPasswordHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1101: VisitorPreQualification
COPY INTO ARES.STG.SRC_VisitorPreQualification_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_PRE_QUALIFICATION_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::int, 	-- $3: VISITOR_KEY INT NOT NULL
		($4)::int, 	-- $4: QUALIFYING_LOAN_APPLICATION_KEY INT NOT NULL
		($5)::date, 	-- $5: EXPIRATION_DATE DATE NOT NULL
		($6)::int, 	-- $6: LOAN_PRODUCT_KEY INT NOT NULL
		($7)::int, 	-- $7: SCORE_SUMMARY_KEY INT NULL
		($8)::decimal, 	-- $8: APPROVED_AMOUNT DECIMAL(38,0) NULL
		to_timestamp_ntz($9), 	-- $9: SCORED_DATE TIMESTAMP_LTZ NULL
		($10)::boolean, 	-- $10: USED_VENDOR_DATA BOOLEAN NULL
		to_timestamp_ntz($11), 	-- $11: INVALID_DATE TIMESTAMP_LTZ NULL
		($12)::boolean, 	-- $12: HAS_CONSENT BOOLEAN NOT NULL
		to_timestamp_ntz($13), 	-- $13: CONSENT_DATE TIMESTAMP_LTZ NOT NULL
		($14)::char, 	-- $14: CONSENT_TELLER CHAR(8000) NOT NULL
		($15)::int 	-- $15: PRE_QUALIFICATION_CONSENT_SOURCE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorPreQualification/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorPreQualification_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorPreQualification_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorPreQualification_HIST;
SELECT * FROM STG.WINCHK_VisitorPreQualification_HIST;
[STATUS=tbd]
*/

-- // TABLE 1102: VisitorPreQualificationXRef
COPY INTO ARES.STG.SRC_VisitorPreQualificationXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_PRE_QUALIFICATION_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: VISITOR_PRE_QUALIFICATION_KEY INT NOT NULL
		($3)::int 	-- $3: LOAN_APPLICATION_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorPreQualificationXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorPreQualificationXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorPreQualificationXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorPreQualificationXRef_HIST;
SELECT * FROM STG.WINCHK_VisitorPreQualificationXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 1103: VisitorSecurityQuestion
COPY INTO ARES.STG.SRC_VisitorSecurityQuestion_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VISITOR_SECURITY_QUESTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: QUESTION VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: DISPLAY_ORDER SMALLINT NOT NULL
		($4)::boolean 	-- $4: IS_OBSOLETE BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VisitorSecurityQuestion/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VisitorSecurityQuestion_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VisitorSecurityQuestion_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VisitorSecurityQuestion_HIST;
SELECT * FROM STG.WINCHK_VisitorSecurityQuestion_HIST;
[STATUS=tbd]
*/

-- // TABLE 1104: VMATransType
COPY INTO ARES.STG.SRC_VMATransType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: VMA_TRANS_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: VMA_DESC VARCHAR(8000) NOT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::char 	-- $4: TELLER CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/VMATransType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*VMATransType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_VMATransType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_VMATransType_HIST;
SELECT * FROM STG.WINCHK_VMATransType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1105: WebAlert
COPY INTO ARES.STG.SRC_WebAlert_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WebAlertKey INT NOT NULL
		($2)::datetime, 	-- $2: StartDate datetime NOT NULL
		($3)::datetime, 	-- $3: EndDate datetime NULL
		($4)::xml, 	-- $4: AlertText xml NOT NULL
		($5)::int, 	-- $5: Enabled INT NOT NULL
		($6)::datetime, 	-- $6: Date_Entered datetime NULL
		($7)::datetime, 	-- $7: Date_Last_Updated datetime NULL
		($8)::varchar, 	-- $8: Created_By VARCHAR(8000) NOT NULL
		($9)::varchar 	-- $9: Last_Updated_By VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebAlert/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebAlert_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebAlert_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebAlert_HIST;
SELECT * FROM STG.WINCHK_WebAlert_HIST;
[STATUS=tbd]
*/

-- // TABLE 1106: WebCallApplicationStatusHistory
COPY INTO ARES.STG.SRC_WebCallApplicationStatusHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_Application_Status_History_KEY INT NOT NULL
		($2)::int, 	-- $2: Loan_Application_Key INT NOT NULL
		($3)::int, 	-- $3: Web_Call_RARR_History_Key INT NOT NULL
		($4)::datetime 	-- $4: CREATEDATE datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallApplicationStatusHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallApplicationStatusHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallApplicationStatusHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallApplicationStatusHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallApplicationStatusHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1107: WebCallCampaign
COPY INTO ARES.STG.SRC_WebCallCampaign_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_CAMPAIGN_KEY INT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCampaign/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCampaign_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCampaign_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCampaign_HIST;
SELECT * FROM STG.WINCHK_WebCallCampaign_HIST;
[STATUS=tbd]
*/

-- // TABLE 1108: WebCallCampaignCategory
COPY INTO ARES.STG.SRC_WebCallCampaignCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_CAMPAIGN_CATEGORY_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_CAMPAIGN_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_CATEGORY_KEY INT NOT NULL
		($4)::smallint 	-- $4: SORT_PRIORITY smallint NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCampaignCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCampaignCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCampaignCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCampaignCategory_HIST;
SELECT * FROM STG.WINCHK_WebCallCampaignCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1109: WebCallCategory
COPY INTO ARES.STG.SRC_WebCallCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_CATEGORY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CATEGORY VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: SORT_PRIORITY smallint NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: DIALER_UPLOAD BOOLEAN NULL
		($6)::int, 	-- $6: DIALER_REFRESH_MINUTES INT NULL
		($7)::int, 	-- $7: COLOR_RGB INT NULL
		($8)::boolean, 	-- $8: IS_CUJO BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_COLLECTIONS BOOLEAN NULL
		($10)::boolean, 	-- $10: RESET_DAILY BOOLEAN NULL
		($11)::datetime, 	-- $11: LAST_RESET_DATE datetime NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13), 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14), 	-- $14: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($15)::char 	-- $15: UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCategory_HIST;
SELECT * FROM STG.WINCHK_WebCallCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1110: WebCallCategoryHistory
COPY INTO ARES.STG.SRC_WebCallCategoryHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_CATEGORY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CATEGORY VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: SORT_PRIORITY smallint NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: DIALER_UPLOAD BOOLEAN NULL
		($6)::int, 	-- $6: DIALER_REFRESH_MINUTES INT NULL
		($7)::int, 	-- $7: COLOR_RGB INT NULL
		($8)::boolean, 	-- $8: IS_CUJO BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: IS_COLLECTIONS BOOLEAN NULL
		($10)::boolean, 	-- $10: RESET_DAILY BOOLEAN NULL
		($11)::datetime, 	-- $11: LAST_RESET_DATE datetime NULL
		to_timestamp_ntz($12), 	-- $12: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($13), 	-- $13: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($14), 	-- $14: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($15)::char 	-- $15: UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCategoryHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCategoryHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCategoryHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCategoryHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallCategoryHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1111: WebCallCatRarrAlias
COPY INTO ARES.STG.SRC_WebCallCatRarrAlias_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_CatRarrAlias_Key INT NOT NULL
		($2)::varchar, 	-- $2: Alias_Name VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: Web_Call_Category_Key INT NULL
		($4)::int, 	-- $4: WEB_CALL_REASON_KEY INT NULL
		($5)::int, 	-- $5: WEB_CALL_ACTION_KEY INT NULL
		($6)::int, 	-- $6: WEB_CALL_RESULT1_KEY INT NULL
		($7)::int, 	-- $7: WEB_CALL_RESULT2_KEY INT NULL
		($8)::int 	-- $8: WEB_CALL_RARR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCatRarrAlias/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCatRarrAlias_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCatRarrAlias_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCatRarrAlias_HIST;
SELECT * FROM STG.WINCHK_WebCallCatRarrAlias_HIST;
[STATUS=tbd]
*/

-- // TABLE 1112: WebCallCenterLogin
COPY INTO ARES.STG.SRC_WebCallCenterLogin_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: CallCenter_Login_Key INT NOT NULL
		($2)::char, 	-- $2: Teller CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Server VARCHAR(8000) NOT NULL
		($4)::datetime, 	-- $4: Login_Date datetime NOT NULL
		($5)::datetime, 	-- $5: Logout_Date datetime NULL
		($6)::boolean 	-- $6: LoggedIn BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCenterLogin/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCenterLogin_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCenterLogin_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCenterLogin_HIST;
SELECT * FROM STG.WINCHK_WebCallCenterLogin_HIST;
[STATUS=tbd]
*/

-- // TABLE 1113: WebCallChatCannedResponses
COPY INTO ARES.STG.SRC_WebCallChatCannedResponses_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_CHAT_CANNED_RESPONSES_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: SORT_PRIORITY smallint NOT NULL
		($4)::boolean 	-- $4: DELETED BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallChatCannedResponses/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallChatCannedResponses_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallChatCannedResponses_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallChatCannedResponses_HIST;
SELECT * FROM STG.WINCHK_WebCallChatCannedResponses_HIST;
[STATUS=tbd]
*/

-- // TABLE 1114: WebCallCSRReportColumn
COPY INTO ARES.STG.SRC_WebCallCSRReportColumn_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_CSRReport_Columns_Key INT NOT NULL
		($2)::varchar 	-- $2: ColumnName VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCSRReportColumn/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCSRReportColumn_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCSRReportColumn_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCSRReportColumn_HIST;
SELECT * FROM STG.WINCHK_WebCallCSRReportColumn_HIST;
[STATUS=tbd]
*/

-- // TABLE 1115: WebCallCSRReportColumnRARR
COPY INTO ARES.STG.SRC_WebCallCSRReportColumnRARR_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_CSRReport_ColumnRARR_Key INT NOT NULL
		($2)::int, 	-- $2: Web_Call_CSRReport_Columns_Key INT NOT NULL
		($3)::int 	-- $3: Web_Call_RARR_Key INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallCSRReportColumnRARR/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallCSRReportColumnRARR_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallCSRReportColumnRARR_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallCSRReportColumnRARR_HIST;
SELECT * FROM STG.WINCHK_WebCallCSRReportColumnRARR_HIST;
[STATUS=tbd]
*/

-- // TABLE 1116: WebCallDualAuth
COPY INTO ARES.STG.SRC_WebCallDualAuth_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_DualAuthId INT NOT NULL
		($2)::int, 	-- $2: FeatureId INT NOT NULL
		($3)::int, 	-- $3: CustomerId INT NOT NULL
		($4)::int, 	-- $4: VisitorId INT NOT NULL
		($5)::int, 	-- $5: LoanId INT NOT NULL
		($6)::number, 	-- $6: LoanAmount NUMBER(19,4) NULL
		($7)::varchar, 	-- $7: RequestedBy VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: AuthorizedBy VARCHAR(8000) NOT NULL
		($9)::datetime 	-- $9: AuthorizedDate datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallDualAuth/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallDualAuth_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallDualAuth_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallDualAuth_HIST;
SELECT * FROM STG.WINCHK_WebCallDualAuth_HIST;
[STATUS=tbd]
*/

-- // TABLE 1117: WebCallEmailTemplateAttachment
COPY INTO ARES.STG.SRC_WebCallEmailTemplateAttachment_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_EMAIL_TEMPLATE_ATTACHMENT_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_EMAIL_TEMPLATE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: FILE_PATH VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: FILE_NAME VARCHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::char, 	-- $6: ENTERED_BY CHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: DATE_UPDATED datetime NOT NULL
		($8)::char 	-- $8: UPDATED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallEmailTemplateAttachment/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallEmailTemplateAttachment_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallEmailTemplateAttachment_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallEmailTemplateAttachment_HIST;
SELECT * FROM STG.WINCHK_WebCallEmailTemplateAttachment_HIST;
[STATUS=tbd]
*/

-- // TABLE 1118: WebCallEmailTemplateCategory
COPY INTO ARES.STG.SRC_WebCallEmailTemplateCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_EMAIL_TEMPLATE_CATEGORY_KEY INT NOT NULL
		($2)::varchar, 	-- $2: EMAIL_TEMPLATE_CATEGORY VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: CATEGORY_DISPLAY_ORDER smallint NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_CREATED TIMESTAMP_LTZ NOT NULL
		($5)::char 	-- $5: ENTERED_BY CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallEmailTemplateCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallEmailTemplateCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallEmailTemplateCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallEmailTemplateCategory_HIST;
SELECT * FROM STG.WINCHK_WebCallEmailTemplateCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1119: WebCallEmailTemplates
COPY INTO ARES.STG.SRC_WebCallEmailTemplates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_EmailTemplate_Key INT NOT NULL
		($2)::varchar, 	-- $2: Template_Name VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Template_Description VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: Subject VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: Body VARCHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: Is_Body_Html BOOLEAN NOT NULL
		($7)::datetime, 	-- $7: DATE_ENTERED datetime NOT NULL
		($8)::boolean, 	-- $8: IS_ACTIVE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: FOR_SUPERVISOR_AND_ABOVE BOOLEAN NOT NULL
		($10)::smallint, 	-- $10: TEMPLATE_DISPLAY_ORDER smallint NOT NULL
		to_timestamp_ntz($11), 	-- $11: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12) 	-- $12: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallEmailTemplates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallEmailTemplates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallEmailTemplates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallEmailTemplates_HIST;
SELECT * FROM STG.WINCHK_WebCallEmailTemplates_HIST;
[STATUS=tbd]
*/

-- // TABLE 1120: WebCallEmailTemplatesHistory
COPY INTO ARES.STG.SRC_WebCallEmailTemplatesHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_EmailTemplate_Key INT NOT NULL
		($2)::varchar, 	-- $2: Template_Name VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Template_Description VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: Subject VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: Body VARCHAR(8000) NOT NULL
		($6)::boolean, 	-- $6: Is_Body_Html BOOLEAN NOT NULL
		($7)::datetime, 	-- $7: DATE_ENTERED datetime NOT NULL
		($8)::boolean, 	-- $8: IS_ACTIVE BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: FOR_SUPERVISOR_AND_ABOVE BOOLEAN NOT NULL
		($10)::smallint, 	-- $10: TEMPLATE_DISPLAY_ORDER smallint NOT NULL
		to_timestamp_ntz($11), 	-- $11: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($12) 	-- $12: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallEmailTemplatesHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallEmailTemplatesHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallEmailTemplatesHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallEmailTemplatesHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallEmailTemplatesHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1121: WebCallEmailTemplateToCategoryXref
COPY INTO ARES.STG.SRC_WebCallEmailTemplateToCategoryXref_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_EMAIL_TEMPLATE_TO_CATEGORY_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_EMAIL_TEMPLATE_KEY INT NOT NULL
		($3)::int 	-- $3: WEB_CALL_EMAIL_TEMPLATE_CATEGORY_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallEmailTemplateToCategoryXref/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallEmailTemplateToCategoryXref_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallEmailTemplateToCategoryXref_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallEmailTemplateToCategoryXref_HIST;
SELECT * FROM STG.WINCHK_WebCallEmailTemplateToCategoryXref_HIST;
[STATUS=tbd]
*/

-- // TABLE 1122: WebCallFeatures
COPY INTO ARES.STG.SRC_WebCallFeatures_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_FEATURES_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: DISPLAY_ORDER SMALLINT NOT NULL
		($4)::boolean, 	-- $4: SupDualAuthEnabled BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: CSRDualAuthEnabled BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallFeatures/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallFeatures_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallFeatures_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallFeatures_HIST;
SELECT * FROM STG.WINCHK_WebCallFeatures_HIST;
[STATUS=tbd]
*/

-- // TABLE 1123: WebCallFeaturesHistory
COPY INTO ARES.STG.SRC_WebCallFeaturesHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_FEATURES_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::smallint, 	-- $3: DISPLAY_ORDER SMALLINT NOT NULL
		($4)::boolean, 	-- $4: SupDualAuthEnabled BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: CSRDualAuthEnabled BOOLEAN NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallFeaturesHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallFeaturesHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallFeaturesHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallFeaturesHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallFeaturesHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1124: WebCallInvalidPhoneNumber
COPY INTO ARES.STG.SRC_WebCallInvalidPhoneNumber_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_Invalid_Phone_Number_Key INT NOT NULL
		($2)::varchar, 	-- $2: Phone_Number VARCHAR(8000) NULL
		($3)::datetime, 	-- $3: Invalid_Until datetime NULL
		($4)::datetime 	-- $4: Date_Entered datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallInvalidPhoneNumber/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallInvalidPhoneNumber_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallInvalidPhoneNumber_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallInvalidPhoneNumber_HIST;
SELECT * FROM STG.WINCHK_WebCallInvalidPhoneNumber_HIST;
[STATUS=tbd]
*/

-- // TABLE 1125: WebCallLoanAppSourceApp
COPY INTO ARES.STG.SRC_WebCallLoanAppSourceApp_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::char, 	-- $1: Source_App_Key CHAR(8000) NOT NULL
		($2)::varchar 	-- $2: Source_App_Description VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallLoanAppSourceApp/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallLoanAppSourceApp_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallLoanAppSourceApp_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallLoanAppSourceApp_HIST;
SELECT * FROM STG.WINCHK_WebCallLoanAppSourceApp_HIST;
[STATUS=tbd]
*/

-- // TABLE 1126: WebCallLoggingCategory
COPY INTO ARES.STG.SRC_WebCallLoggingCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_LOGGING_CATEGORY_KEY INT NOT NULL
		($2)::varchar 	-- $2: CATEGORY_NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallLoggingCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallLoggingCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallLoggingCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallLoggingCategory_HIST;
SELECT * FROM STG.WINCHK_WebCallLoggingCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1127: WebCallLoggingCategoryLog
COPY INTO ARES.STG.SRC_WebCallLoggingCategoryLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_LOGGING_CATEGORY_LOG_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_LOGGING_CATEGORY_KEY INT NOT NULL
		($3)::int 	-- $3: WEB_CALL_LOGGING_LOG_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallLoggingCategoryLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallLoggingCategoryLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallLoggingCategoryLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallLoggingCategoryLog_HIST;
SELECT * FROM STG.WINCHK_WebCallLoggingCategoryLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 1128: WebCallLoggingLog
COPY INTO ARES.STG.SRC_WebCallLoggingLog_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_LOGGING_LOG_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_LOGGING_LOG_EVENT_KEY INT NULL
		($3)::int, 	-- $3: PRIORITY INT NOT NULL
		($4)::varchar, 	-- $4: SEVERITY VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: TITLE VARCHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: TIME_STAMP datetime NOT NULL
		($7)::varchar, 	-- $7: MACHINE_NAME VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: APP_DOMAIN_NAME VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: WEB_CALL_LOGGING_LOG_KEY_PROCESS_KEY VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: PROCESS_NAME VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: THREAD_NAME VARCHAR(8000) NULL
		($12)::varchar, 	-- $12: WIN_32_THREAD_ID VARCHAR(8000) NULL
		($13)::varchar, 	-- $13: MESSAGE VARCHAR(8000) NULL
		($14)::ntext 	-- $14: FORMATTED_MESSAGE ntext NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallLoggingLog/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallLoggingLog_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallLoggingLog_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallLoggingLog_HIST;
SELECT * FROM STG.WINCHK_WebCallLoggingLog_HIST;
[STATUS=tbd]
*/

-- // TABLE 1129: WebCallQueue
COPY INTO ARES.STG.SRC_WebCallQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_QUEUE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: WEB_CALL_QUEUE_SESSION_KEY VARCHAR(8000) NULL
		($3)::int, 	-- $3: PARENT_ISSUE_QUEUE_KEY INT NULL
		($4)::datetime, 	-- $4: ONLINE_CREATED_DATE_TIME datetime NULL
		($5)::datetime, 	-- $5: OFFLINE_CREATED_DATE_TIME datetime NULL
		($6)::int, 	-- $6: WEB_CALL_QUEUE_CATEGORY_KEY INT NOT NULL
		($7)::int, 	-- $7: WEB_CALL_QUEUE_EDITED_CAMPAIGN_KEY INT NOT NULL
		($8)::int, 	-- $8: WEB_CALL_QUEUE_ASSIGNED_CAMPAIGN_KEY INT NOT NULL
		($9)::varchar, 	-- $9: PAGE VARCHAR(8000) NULL
		($10)::int, 	-- $10: WEB_CALL_QUEUE_STATUS_KEY INT NOT NULL
		($11)::boolean, 	-- $11: SUPERVISOR_ESCALLATION BOOLEAN NOT NULL
		($12)::varchar, 	-- $12: CSR VARCHAR(8000) NOT NULL
		($13)::char, 	-- $13: TELLER CHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: FIRST_NAME VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: LAST_NAME VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: HOME_PHONE VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: CELL_PHONE VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: WORK_PHONE VARCHAR(8000) NOT NULL
		($20)::int, 	-- $20: WEB_CALL_REASON_KEY INT NULL
		($21)::int, 	-- $21: WEB_CALL_ACTION_KEY INT NULL
		($22)::int, 	-- $22: WEB_CALL_RESULT1_KEY INT NULL
		($23)::int, 	-- $23: WEB_CALL_RESULT2_KEY INT NULL
		($24)::int, 	-- $24: WEB_CALL_RARR_KEY INT NULL
		($25)::varchar, 	-- $25: NOTES VARCHAR(8000) NOT NULL
		($26)::datetime, 	-- $26: FOLLOW_UPDATE datetime NULL
		($27)::boolean, 	-- $27: COMPLETED BOOLEAN NOT NULL
		($28)::boolean, 	-- $28: CHECKEDOUT BOOLEAN NOT NULL
		($29)::varchar, 	-- $29: WEB_CALL_CHAT_SESSION_KEY VARCHAR(36) NOT NULL
		($30)::varchar, 	-- $30: WEB_CALL_CHAT_CSR_KEY VARCHAR(8000) NOT NULL
		($31)::int, 	-- $31: WEB_CALL_LOAN_APP_KEY INT NULL
		($32)::int, 	-- $32: WEB_CALL_CUSTOMER_KEY INT NULL
		($33)::int, 	-- $33: WEB_CALL_VISITOR_KEY INT NULL
		($34)::varchar, 	-- $34: WEB_STATUS VARCHAR(8000) NULL
		($35)::int, 	-- $35: LOAN_KEY INT NULL
		($36)::int, 	-- $36: DIALER_STATUS INT NULL
		($37)::int, 	-- $37: DIALER_CAMPAIGN INT NULL
		($38)::datetime, 	-- $38: DIALER_DATE datetime NULL
		($39)::varchar, 	-- $39: WebSource VARCHAR(8000) NULL
		($40)::smallint, 	-- $40: Location smallint NULL
		($41)::varchar, 	-- $41: Address VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: City VARCHAR(8000) NULL
		($43)::varchar, 	-- $43: State VARCHAR(8000) NULL
		($44)::varchar, 	-- $44: Zipcode VARCHAR(8000) NULL
		($45)::varchar, 	-- $45: LeadId VARCHAR(8000) NULL
		($46)::varchar, 	-- $46: Buyer VARCHAR(8000) NULL
		($47)::number, 	-- $47: SoldAmount NUMBER(10,4) NULL
		($48)::varchar, 	-- $48: FinalScore VARCHAR(8000) NULL
		($49)::int, 	-- $49: WORK_ITEM_COLOR INT NULL
		($50)::int, 	-- $50: WEB_CALL_QUEUE_TYPE_KEY INT NULL
		($51)::boolean, 	-- $51: DD_CONTACT_HR BOOLEAN NULL
		($52)::int, 	-- $52: DD_CONTACT_ATTEMPTS INT NULL
		($53)::datetime, 	-- $53: DD_LAST_CONTACT_ATTEMPT_DATE datetime NULL
		($54)::boolean, 	-- $54: ITSupportEscallation BOOLEAN NULL
		($55)::datetime, 	-- $55: MODIFIED_DATE datetime NULL
		($56)::boolean, 	-- $56: IS_ONLINE BOOLEAN NULL
		($57)::varchar, 	-- $57: MARKETING_SENT_KEY VARCHAR(8000) NULL
		($58)::int, 	-- $58: RISREPT_KEY INT NULL
		($59)::bigint 	-- $59: WEB_VISIT_KEY BIGINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallQueue_HIST;
SELECT * FROM STG.WINCHK_WebCallQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 1130: WebCallQueueAudit
COPY INTO ARES.STG.SRC_WebCallQueueAudit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_QUEUE_AUDIT_KEY INT NOT NULL
		($2)::datetime, 	-- $2: AUDIT_DATE datetime NOT NULL
		($3)::char, 	-- $3: USER CHAR(8000) NOT NULL
		($4)::int, 	-- $4: WEB_CALL_QUEUE_KEY INT NOT NULL
		($5)::varchar, 	-- $5: FIELD_NAME VARCHAR(8000) NOT NULL
		($6)::varchar, 	-- $6: OLD_VALUE VARCHAR(8000) NULL
		($7)::varchar 	-- $7: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallQueueAudit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallQueueAudit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallQueueAudit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallQueueAudit_HIST;
SELECT * FROM STG.WINCHK_WebCallQueueAudit_HIST;
[STATUS=tbd]
*/

-- // TABLE 1131: WebCallQueueConfiguration
COPY INTO ARES.STG.SRC_WebCallQueueConfiguration_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_QUEUE_CONFIGURATION_KEY INT NOT NULL
		($2)::int, 	-- $2: DEFAULT_ONLINE_REFRESH_RATE INT NOT NULL
		($3)::int, 	-- $3: DEFAULT_TEST_USER_REFRESH_RATE INT NOT NULL
		($4)::int, 	-- $4: DEFAULT_CUSTOMER_SUPPORT_REFRESH_RATE INT NOT NULL
		($5)::int, 	-- $5: DEFAULT_SUMMARY_REFRESH_RATE INT NOT NULL
		($6)::int, 	-- $6: FOLLOW_UP_DATE_HOUR_THRESHOLD INT NOT NULL
		($7)::int 	-- $7: FOLLOW_UP_DATE_MINUTE_THRESHOLD INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallQueueConfiguration/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallQueueConfiguration_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallQueueConfiguration_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallQueueConfiguration_HIST;
SELECT * FROM STG.WINCHK_WebCallQueueConfiguration_HIST;
[STATUS=tbd]
*/

-- // TABLE 1132: WebCallQueueStatus
COPY INTO ARES.STG.SRC_WebCallQueueStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_QUEUE_STATUS_KEY INT NOT NULL
		($2)::varchar 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallQueueStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallQueueStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallQueueStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallQueueStatus_HIST;
SELECT * FROM STG.WINCHK_WebCallQueueStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 1133: WebCallQueueType
COPY INTO ARES.STG.SRC_WebCallQueueType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_QUEUE_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NULL
		($3)::boolean, 	-- $3: KEEP_OPEN BOOLEAN NULL
		($4)::int, 	-- $4: POP_PRIORITY INT NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallQueueType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallQueueType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallQueueType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallQueueType_HIST;
SELECT * FROM STG.WINCHK_WebCallQueueType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1134: WebCallQuickNote
COPY INTO ARES.STG.SRC_WebCallQuickNote_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: QUICK_NOTE_KEY INT NOT NULL
		($2)::smallint, 	-- $2: ASSIGNED_POSITION smallint NOT NULL
		($3)::varchar, 	-- $3: NOTE VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: BUTTON_TEXT VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: BUTTON_BACKGROUND_COLOR INT NOT NULL
		($6)::int, 	-- $6: BUTTON_FOREGROUND_COLOR INT NOT NULL
		($7)::int 	-- $7: WEB_CALL_CATRARRALIAS_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallQuickNote/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallQuickNote_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallQuickNote_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallQuickNote_HIST;
SELECT * FROM STG.WINCHK_WebCallQuickNote_HIST;
[STATUS=tbd]
*/

-- // TABLE 1135: WebCallRARR
COPY INTO ARES.STG.SRC_WebCallRARR_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_RARR_REASON_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_RARR_ACTION_KEY INT NOT NULL
		($4)::int, 	-- $4: WEB_CALL_RARR_RESULT1_KEY INT NOT NULL
		($5)::int, 	-- $5: WEB_CALL_RARR_RESULT2_KEY INT NULL
		($6)::boolean, 	-- $6: FOLLOW_UP_ENABLED BOOLEAN NOT NULL
		($7)::int, 	-- $7: FOLLOW_UP_AUTO_POPULATE INT NOT NULL
		($8)::boolean, 	-- $8: FOLLOW_UP_POP_UP_SETTING_DIALOG BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: DELETED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: Escalate_To_Supervisor BOOLEAN NULL
		($11)::int, 	-- $11: IATResultTypeKey INT NULL
		($12)::boolean, 	-- $12: DISABLED BOOLEAN NULL
		($13)::int, 	-- $13: Web_Call_Rarr_Group_Key INT NULL
		($14)::boolean, 	-- $14: UpdateCategory BOOLEAN NULL
		($15)::int, 	-- $15: NewCategoryId INT NULL
		($16)::int, 	-- $16: Points INT NOT NULL
		($17)::boolean, 	-- $17: SupervisorOnlyRarr BOOLEAN NOT NULL
		($18)::int, 	-- $18: WEB_DIALER_RESULT_TYPE_KEY INT NULL
		($19)::int, 	-- $19: WEB_CALL_RARR_TYPE_KEY INT NULL
		($20)::boolean, 	-- $20: IS_APPLICATION_SERVICE_TEAM_ONLY_RARR BOOLEAN NOT NULL
		to_timestamp_ntz($21), 	-- $21: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($22)::char, 	-- $22: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($23), 	-- $23: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($24), 	-- $24: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($25)::boolean 	-- $25: IS_STORE_CSR_RARR BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARR/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARR_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARR_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARR_HIST;
SELECT * FROM STG.WINCHK_WebCallRARR_HIST;
[STATUS=tbd]
*/

-- // TABLE 1136: WebCallRARRAction
COPY INTO ARES.STG.SRC_WebCallRARRAction_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_ACTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRAction/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRAction_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRAction_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRAction_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRAction_HIST;
[STATUS=tbd]
*/

-- // TABLE 1137: WebCallRARRActionHistory
COPY INTO ARES.STG.SRC_WebCallRARRActionHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_ACTION_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRActionHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRActionHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRActionHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRActionHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRActionHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1138: WebCallRARRCategoryReason
COPY INTO ARES.STG.SRC_WebCallRARRCategoryReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_CATEGORY_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_CATEGORY_REASON_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_RARR_REASON_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7) 	-- $7: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRCategoryReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRCategoryReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRCategoryReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRCategoryReason_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRCategoryReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 1139: WebCallRARRCategoryReasonHistory
COPY INTO ARES.STG.SRC_WebCallRARRCategoryReasonHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_CATEGORY_REASON_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_CATEGORY_REASON_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_RARR_REASON_KEY INT NOT NULL
		to_timestamp_ntz($4), 	-- $4: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($5)::char, 	-- $5: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($6), 	-- $6: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($7) 	-- $7: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRCategoryReasonHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRCategoryReasonHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRCategoryReasonHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRCategoryReasonHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRCategoryReasonHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1140: WebCallRARRConfigHistory
COPY INTO ARES.STG.SRC_WebCallRARRConfigHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_RARR_REASON_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_RARR_ACTION_KEY INT NOT NULL
		($4)::int, 	-- $4: WEB_CALL_RARR_RESULT1_KEY INT NOT NULL
		($5)::int, 	-- $5: WEB_CALL_RARR_RESULT2_KEY INT NULL
		($6)::boolean, 	-- $6: FOLLOW_UP_ENABLED BOOLEAN NOT NULL
		($7)::int, 	-- $7: FOLLOW_UP_AUTO_POPULATE INT NOT NULL
		($8)::boolean, 	-- $8: FOLLOW_UP_POP_UP_SETTING_DIALOG BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: DELETED BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: Escalate_To_Supervisor BOOLEAN NULL
		($11)::int, 	-- $11: IATResultTypeKey INT NULL
		($12)::boolean, 	-- $12: DISABLED BOOLEAN NULL
		($13)::int, 	-- $13: Web_Call_Rarr_Group_Key INT NULL
		($14)::boolean, 	-- $14: UpdateCategory BOOLEAN NULL
		($15)::int, 	-- $15: NewCategoryId INT NULL
		($16)::int, 	-- $16: Points INT NOT NULL
		($17)::boolean, 	-- $17: SupervisorOnlyRarr BOOLEAN NOT NULL
		($18)::int, 	-- $18: WEB_DIALER_RESULT_TYPE_KEY INT NULL
		($19)::int, 	-- $19: WEB_CALL_RARR_TYPE_KEY INT NULL
		($20)::boolean, 	-- $20: IS_APPLICATION_SERVICE_TEAM_ONLY_RARR BOOLEAN NOT NULL
		to_timestamp_ntz($21), 	-- $21: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($22)::char, 	-- $22: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($23), 	-- $23: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($24), 	-- $24: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
		($25)::boolean 	-- $25: IS_STORE_CSR_RARR BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRConfigHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRConfigHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRConfigHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRConfigHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRConfigHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1141: WebCallRARReason
COPY INTO ARES.STG.SRC_WebCallRARReason_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARReason/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARReason_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARReason_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARReason_HIST;
SELECT * FROM STG.WINCHK_WebCallRARReason_HIST;
[STATUS=tbd]
*/

-- // TABLE 1142: WebCallRARReasonHistory
COPY INTO ARES.STG.SRC_WebCallRARReasonHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_REASON_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARReasonHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARReasonHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARReasonHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARReasonHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARReasonHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1143: WebCallRARResult1
COPY INTO ARES.STG.SRC_WebCallRARResult1_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_RESULT1_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARResult1/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARResult1_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARResult1_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARResult1_HIST;
SELECT * FROM STG.WINCHK_WebCallRARResult1_HIST;
[STATUS=tbd]
*/

-- // TABLE 1144: WebCallRARResult1History
COPY INTO ARES.STG.SRC_WebCallRARResult1History_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_RESULT1_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARResult1History/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARResult1History_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARResult1History_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARResult1History_HIST;
SELECT * FROM STG.WINCHK_WebCallRARResult1History_HIST;
[STATUS=tbd]
*/

-- // TABLE 1145: WebCallRARResult2
COPY INTO ARES.STG.SRC_WebCallRARResult2_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_RESULT2_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARResult2/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARResult2_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARResult2_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARResult2_HIST;
SELECT * FROM STG.WINCHK_WebCallRARResult2_HIST;
[STATUS=tbd]
*/

-- // TABLE 1146: WebCallRARResult2History
COPY INTO ARES.STG.SRC_WebCallRARResult2History_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_RESULT2_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARResult2History/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARResult2History_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARResult2History_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARResult2History_HIST;
SELECT * FROM STG.WINCHK_WebCallRARResult2History_HIST;
[STATUS=tbd]
*/

-- // TABLE 1147: WebCallRARRFeatures
COPY INTO ARES.STG.SRC_WebCallRARRFeatures_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_FEATURES_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_RARR_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_FEATURES_KEY INT NOT NULL
		($4)::boolean, 	-- $4: FEATURE_ENABLE BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: SupDualAuthEnabled BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: CSRDualAuthEnabled BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRFeatures/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRFeatures_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRFeatures_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRFeatures_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRFeatures_HIST;
[STATUS=tbd]
*/

-- // TABLE 1148: WebCallRARRFeaturesHistory
COPY INTO ARES.STG.SRC_WebCallRARRFeaturesHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_FEATURES_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_RARR_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_FEATURES_KEY INT NOT NULL
		($4)::boolean, 	-- $4: FEATURE_ENABLE BOOLEAN NOT NULL
		($5)::boolean, 	-- $5: SupDualAuthEnabled BOOLEAN NOT NULL
		($6)::boolean, 	-- $6: CSRDualAuthEnabled BOOLEAN NOT NULL
		to_timestamp_ntz($7), 	-- $7: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($8)::char, 	-- $8: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($9), 	-- $9: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($10) 	-- $10: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRFeaturesHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRFeaturesHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRFeaturesHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRFeaturesHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRFeaturesHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1149: WebCallRarrGroup
COPY INTO ARES.STG.SRC_WebCallRarrGroup_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_Rarr_Group_KEY INT NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: DELETED BOOLEAN NOT NULL
		($4)::int, 	-- $4: Points INT NULL
		($5)::int, 	-- $5: RarrCountOffset INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRarrGroup/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRarrGroup_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRarrGroup_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRarrGroup_HIST;
SELECT * FROM STG.WINCHK_WebCallRarrGroup_HIST;
[STATUS=tbd]
*/

-- // TABLE 1150: WebCallRarrGroupHistory
COPY INTO ARES.STG.SRC_WebCallRarrGroupHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_Rarr_Group_KEY INT NOT NULL
		($2)::varchar, 	-- $2: Description VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: DELETED BOOLEAN NOT NULL
		($4)::int, 	-- $4: Points INT NULL
		($5)::int, 	-- $5: RarrCountOffset INT NOT NULL
		to_timestamp_ntz($6), 	-- $6: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($7)::char, 	-- $7: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($8), 	-- $8: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($9) 	-- $9: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRarrGroupHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRarrGroupHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRarrGroupHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRarrGroupHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRarrGroupHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1151: WebCallRARRHistory
COPY INTO ARES.STG.SRC_WebCallRARRHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_RARR_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_QUEUE_KEY INT NOT NULL
		($4)::varchar, 	-- $4: CREATED_BY VARCHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: CREATE_DATE datetime NOT NULL
		($6)::varchar, 	-- $6: NOTES VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_FOLLOWUP BOOLEAN NOT NULL
		($8)::datetime, 	-- $8: FOLLOWUP_DATE datetime NULL
		($9)::varchar, 	-- $9: Source VARCHAR(8000) NOT NULL
		($10)::number, 	-- $10: ForceApprovedAmount NUMBER(19,4) NULL
		($11)::int, 	-- $11: Rarr_Group_Key INT NULL
		($12)::varchar, 	-- $12: Rarr_Group_Name VARCHAR(8000) NULL
		($13)::int, 	-- $13: Rarr_Group_Points INT NULL
		($14)::int, 	-- $14: Team_Key INT NULL
		($15)::varchar, 	-- $15: Team_Name VARCHAR(8000) NULL
		($16)::int, 	-- $16: WEB_DIALER_RESULT_KEY INT NULL
		($17)::boolean, 	-- $17: SuppressRarrPoints BOOLEAN NULL
		($18)::varchar 	-- $18: SuppressPointsReason VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1152: WebCallRARRType
COPY INTO ARES.STG.SRC_WebCallRARRType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRType_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1153: WebCallRARRTypeHistory
COPY INTO ARES.STG.SRC_WebCallRARRTypeHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_RARR_TYPE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: CODE VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DESCRIPTION VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: DELETED BOOLEAN NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_UPDATED TIMESTAMP_LTZ NOT NULL
		($6)::char, 	-- $6: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($7), 	-- $7: SYS_START_TIME TIMESTAMP_LTZ NOT NULL
		to_timestamp_ntz($8) 	-- $8: SYS_END_TIME TIMESTAMP_LTZ NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallRARRTypeHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallRARRTypeHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallRARRTypeHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallRARRTypeHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallRARRTypeHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1154: WebCallUserSetting
COPY INTO ARES.STG.SRC_WebCallUserSetting_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_USER_SETTING_KEY INT NOT NULL
		($2)::varchar, 	-- $2: USER VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: SETTING VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: VALUE VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallUserSetting/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallUserSetting_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallUserSetting_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallUserSetting_HIST;
SELECT * FROM STG.WINCHK_WebCallUserSetting_HIST;
[STATUS=tbd]
*/

-- // TABLE 1155: WebCallVisitorAlerts
COPY INTO ARES.STG.SRC_WebCallVisitorAlerts_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_VisitorAlertId INT NOT NULL
		($2)::int, 	-- $2: VisitorId INT NOT NULL
		($3)::varchar, 	-- $3: AlertNote VARCHAR(8000) NOT NULL
		($4)::datetime, 	-- $4: ExpirationDate datetime NOT NULL
		($5)::boolean, 	-- $5: Active BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: CreatedBy VARCHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: CreateDate datetime NOT NULL
		($8)::varchar, 	-- $8: LastEditedBy VARCHAR(8000) NOT NULL
		($9)::datetime 	-- $9: LastEditDate datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallVisitorAlerts/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallVisitorAlerts_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallVisitorAlerts_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallVisitorAlerts_HIST;
SELECT * FROM STG.WINCHK_WebCallVisitorAlerts_HIST;
[STATUS=tbd]
*/

-- // TABLE 1156: WebCallVisitorAlertsAudit
COPY INTO ARES.STG.SRC_WebCallVisitorAlertsAudit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_VisitorAlertAuditId INT NOT NULL
		($2)::datetime, 	-- $2: AuditDate datetime NOT NULL
		($3)::varchar, 	-- $3: AuditType VARCHAR(8000) NOT NULL
		($4)::int, 	-- $4: Web_Call_VisitorAlertId INT NOT NULL
		($5)::int, 	-- $5: VisitorId INT NOT NULL
		($6)::varchar, 	-- $6: AlertNote VARCHAR(8000) NOT NULL
		($7)::datetime, 	-- $7: ExpirationDate datetime NOT NULL
		($8)::boolean, 	-- $8: Active BOOLEAN NOT NULL
		($9)::varchar, 	-- $9: CreatedBy VARCHAR(8000) NOT NULL
		($10)::datetime, 	-- $10: CreateDate datetime NOT NULL
		($11)::varchar, 	-- $11: LastEditedBy VARCHAR(8000) NOT NULL
		($12)::datetime 	-- $12: LastEditDate datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallVisitorAlertsAudit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallVisitorAlertsAudit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallVisitorAlertsAudit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallVisitorAlertsAudit_HIST;
SELECT * FROM STG.WINCHK_WebCallVisitorAlertsAudit_HIST;
[STATUS=tbd]
*/

-- // TABLE 1157: WebCallWebEmergencyAlertTemplate
COPY INTO ARES.STG.SRC_WebCallWebEmergencyAlertTemplate_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Call_Web_Emergency_Alert_Template_Key INT NOT NULL
		($2)::varchar, 	-- $2: Scenario VARCHAR(8000) NOT NULL
		($3)::xml, 	-- $3: Alert_Template_Text xml NOT NULL
		($4)::datetime, 	-- $4: Date_Entered datetime NOT NULL
		($5)::datetime, 	-- $5: Date_Last_Updated datetime NOT NULL
		($6)::varchar, 	-- $6: Created_By VARCHAR(8000) NOT NULL
		($7)::varchar 	-- $7: Last_Updated_By VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallWebEmergencyAlertTemplate/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallWebEmergencyAlertTemplate_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallWebEmergencyAlertTemplate_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallWebEmergencyAlertTemplate_HIST;
SELECT * FROM STG.WINCHK_WebCallWebEmergencyAlertTemplate_HIST;
[STATUS=tbd]
*/

-- // TABLE 1158: WebCallWorkItemCategoryHistory
COPY INTO ARES.STG.SRC_WebCallWorkItemCategoryHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_WORK_ITEM_CATEGORY_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_QUEUE_KEY INT NOT NULL
		($3)::int, 	-- $3: WEB_CALL_CATEGORY_KEY INT NOT NULL
		($4)::datetime 	-- $4: DATE_CREATED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallWorkItemCategoryHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallWorkItemCategoryHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallWorkItemCategoryHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallWorkItemCategoryHistory_HIST;
SELECT * FROM STG.WINCHK_WebCallWorkItemCategoryHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1159: WebCallWorkQueue
COPY INTO ARES.STG.SRC_WebCallWorkQueue_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_CALL_WORK_QUEUE_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_QUEUE_KEY INT NOT NULL
		($3)::varchar, 	-- $3: WEB_CALL_QUEUE_SESSION_KEY VARCHAR(8000) NULL
		($4)::datetime, 	-- $4: ONLINE_CREATED_DATE_TIME datetime NULL
		($5)::datetime, 	-- $5: OFFLINE_CREATED_DATE_TIME datetime NULL
		($6)::int, 	-- $6: WEB_CALL_QUEUE_CATEGORY_KEY INT NOT NULL
		($7)::int, 	-- $7: WEB_CALL_QUEUE_EDITED_CAMPAIGN_KEY INT NOT NULL
		($8)::int, 	-- $8: WEB_CALL_QUEUE_ASSIGNED_CAMPAIGN_KEY INT NOT NULL
		($9)::varchar, 	-- $9: PAGE VARCHAR(8000) NULL
		($10)::int, 	-- $10: WEB_CALL_QUEUE_STATUS_KEY INT NOT NULL
		($11)::boolean, 	-- $11: SUPERVISOR_ESCALLATION BOOLEAN NOT NULL
		($12)::varchar, 	-- $12: CSR VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: TELLER VARCHAR(8000) NOT NULL
		($14)::varchar, 	-- $14: EMAIL_ADDRESS VARCHAR(8000) NOT NULL
		($15)::varchar, 	-- $15: FIRST_NAME VARCHAR(8000) NOT NULL
		($16)::varchar, 	-- $16: LAST_NAME VARCHAR(8000) NOT NULL
		($17)::varchar, 	-- $17: HOME_PHONE VARCHAR(8000) NOT NULL
		($18)::varchar, 	-- $18: CELL_PHONE VARCHAR(8000) NOT NULL
		($19)::varchar, 	-- $19: WORK_PHONE VARCHAR(8000) NOT NULL
		($20)::int, 	-- $20: WEB_CALL_REASON_KEY INT NULL
		($21)::int, 	-- $21: WEB_CALL_ACTION_KEY INT NULL
		($22)::int, 	-- $22: WEB_CALL_RESULT1_KEY INT NULL
		($23)::int, 	-- $23: WEB_CALL_RESULT2_KEY INT NULL
		($24)::int, 	-- $24: WEB_CALL_RARR_KEY INT NULL
		($25)::varchar, 	-- $25: NOTES VARCHAR(8000) NOT NULL
		($26)::datetime, 	-- $26: FOLLOW_UPDATE datetime NULL
		($27)::boolean, 	-- $27: COMPLETED BOOLEAN NOT NULL
		($28)::boolean, 	-- $28: CHECKEDOUT BOOLEAN NOT NULL
		($29)::varchar, 	-- $29: WEB_CALL_CHAT_SESSION_KEY VARCHAR(36) NOT NULL
		($30)::varchar, 	-- $30: WEB_CALL_CHAT_CSR_KEY VARCHAR(8000) NOT NULL
		($31)::int, 	-- $31: WEB_CALL_LOAN_APP_KEY INT NULL
		($32)::int, 	-- $32: WEB_CALL_CUSTOMER_KEY INT NULL
		($33)::int, 	-- $33: WEB_CALL_VISITOR_KEY INT NULL
		($34)::varchar, 	-- $34: WEB_STATUS VARCHAR(8000) NULL
		($35)::int, 	-- $35: DIALER_STATUS INT NULL
		($36)::int, 	-- $36: LOAN_KEY INT NULL
		($37)::int, 	-- $37: DIALER_CAMPAIGN INT NULL
		($38)::datetime, 	-- $38: DIALER_DATE datetime NULL
		($39)::varchar, 	-- $39: WebSource VARCHAR(8000) NULL
		($40)::smallint, 	-- $40: Location smallint NULL
		($41)::varchar, 	-- $41: Address VARCHAR(8000) NULL
		($42)::varchar, 	-- $42: City VARCHAR(8000) NULL
		($43)::varchar, 	-- $43: State VARCHAR(8000) NULL
		($44)::varchar, 	-- $44: LeadId VARCHAR(8000) NULL
		($45)::varchar, 	-- $45: Zipcode VARCHAR(8000) NULL
		($46)::varchar, 	-- $46: Buyer VARCHAR(8000) NULL
		($47)::number, 	-- $47: SoldAmount NUMBER(10,4) NULL
		($48)::varchar, 	-- $48: FinalScore VARCHAR(8000) NULL
		($49)::int, 	-- $49: WORK_ITEM_COLOR INT NULL
		($50)::int, 	-- $50: WEB_CALL_QUEUE_TYPE_KEY INT NULL
		($51)::boolean, 	-- $51: DD_CONTACT_HR BOOLEAN NULL
		($52)::int, 	-- $52: DD_CONTACT_ATTEMPTS INT NULL
		($53)::datetime, 	-- $53: DD_LAST_CONTACT_ATTEMPT_DATE datetime NULL
		($54)::int, 	-- $54: PHONE_COUNT INT NULL
		($55)::boolean, 	-- $55: ITSupportEscallation BOOLEAN NULL
		($56)::datetime, 	-- $56: MODIFIED_DATE datetime NULL
		($57)::boolean, 	-- $57: IS_ONLINE BOOLEAN NULL
		($58)::varchar, 	-- $58: MARKETING_SENT_KEY VARCHAR(8000) NULL
		($59)::int, 	-- $59: RISREPT_KEY INT NULL
		($60)::bigint 	-- $60: WEB_VISIT_KEY BIGINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebCallWorkQueue/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebCallWorkQueue_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebCallWorkQueue_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebCallWorkQueue_HIST;
SELECT * FROM STG.WINCHK_WebCallWorkQueue_HIST;
[STATUS=tbd]
*/

-- // TABLE 1160: WebDailyReport
COPY INTO ARES.STG.SRC_WebDailyReport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: web_daily_report_key INT NOT NULL
		($2)::int, 	-- $2: web_daily_report_field_key INT NOT NULL
		($3)::bigint, 	-- $3: numeric_value BIGINT NOT NULL
		($4)::datetime, 	-- $4: date_reported datetime NOT NULL
		($5)::varchar, 	-- $5: state VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: msa VARCHAR(8000) NULL
		($7)::varchar 	-- $7: source VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDailyReport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDailyReport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDailyReport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDailyReport_HIST;
SELECT * FROM STG.WINCHK_WebDailyReport_HIST;
[STATUS=tbd]
*/

-- // TABLE 1161: WebDailyReportFields
COPY INTO ARES.STG.SRC_WebDailyReportFields_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: web_daily_report_fields_key INT NOT NULL
		($2)::varchar, 	-- $2: field_description VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: group_name VARCHAR(8000) NULL
		($4)::int, 	-- $4: Group_Sort_Priority INT NOT NULL
		($5)::int, 	-- $5: Field_Sort_Priority INT NOT NULL
		($6)::boolean, 	-- $6: Disabled BOOLEAN NOT NULL
		($7)::boolean 	-- $7: allow_range BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDailyReportFields/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDailyReportFields_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDailyReportFields_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDailyReportFields_HIST;
SELECT * FROM STG.WINCHK_WebDailyReportFields_HIST;
[STATUS=tbd]
*/

-- // TABLE 1162: WebDailyReportStates
COPY INTO ARES.STG.SRC_WebDailyReportStates_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: web_daily_report_State_key INT NOT NULL
		($2)::varchar, 	-- $2: state VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: State_Sort_Priority INT NOT NULL
		($4)::boolean 	-- $4: Disabled BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDailyReportStates/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDailyReportStates_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDailyReportStates_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDailyReportStates_HIST;
SELECT * FROM STG.WINCHK_WebDailyReportStates_HIST;
[STATUS=tbd]
*/

-- // TABLE 1163: WebDialerAgentSurveyResult
COPY INTO ARES.STG.SRC_WebDialerAgentSurveyResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_AGENT_SURVEY_RESULT_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::varchar, 	-- $3: AGENT VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: AGENT_EMAIL VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: SESSION_ID VARCHAR(8000) NOT NULL
		($6)::datetime, 	-- $6: CALL_DATE datetime NOT NULL
		($7)::int, 	-- $7: CALL_COUNT INT NOT NULL
		($8)::boolean, 	-- $8: UNDERSTANDS_CONCERNS BOOLEAN NOT NULL
		($9)::boolean, 	-- $9: TIME_TAKEN BOOLEAN NOT NULL
		($10)::boolean, 	-- $10: ISSUE BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: KNOWLEDGE BOOLEAN NOT NULL
		($12)::boolean 	-- $12: OVERALL_SATISFACTION BOOLEAN NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerAgentSurveyResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerAgentSurveyResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerAgentSurveyResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerAgentSurveyResult_HIST;
SELECT * FROM STG.WINCHK_WebDialerAgentSurveyResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 1164: WebDialerCallResult
COPY INTO ARES.STG.SRC_WebDialerCallResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_CALL_RESULT_KEY INT NOT NULL
		($2)::boolean, 	-- $2: ABANDONED BOOLEAN NULL
		($3)::time, 	-- $3: AFTER_CALL_WORK_TIME TIME NULL
		($4)::varchar, 	-- $4: AGENT VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: ANI VARCHAR(8000) NULL
		($6)::int, 	-- $6: ANI_AREA_CODE INT NULL
		($7)::int, 	-- $7: ANI_COUNTRY_CODE INT NULL
		($8)::varchar, 	-- $8: ANI_STATE VARCHAR(8000) NULL
		($9)::time, 	-- $9: BILL_TIME TIME NULL
		($10)::int, 	-- $10: CALLS INT NULL
		($11)::int, 	-- $11: CALLS_COMPLETED_IN_IVR INT NULL
		($12)::int, 	-- $12: CALLS_TIMED_OUT_IN_IVR INT NULL
		($13)::int, 	-- $13: CALL_ID INT NULL
		($14)::time, 	-- $14: CALL_TIME TIME NULL
		($15)::varchar, 	-- $15: CALL_TYPE VARCHAR(8000) NULL
		($16)::varchar, 	-- $16: CAMPAIGN VARCHAR(8000) NULL
		($17)::int, 	-- $17: CONFERENCES INT NULL
		($18)::time, 	-- $18: CONFERENCE_TIME TIME NULL
		($19)::time, 	-- $19: CONSULT_TIME TIME NULL
		($20)::boolean, 	-- $20: CONTACTED BOOLEAN NULL
		($21)::int, 	-- $21: CONTACT_ID INT NULL
		($22)::decimal, 	-- $22: COST DECIMAL(38,0) NULL
		($23)::int, 	-- $23: CUSTOMER_KEY INT NULL
		($24)::datetime, 	-- $24: DATE_ENTERED datetime NOT NULL
		($25)::varchar, 	-- $25: DESTINATION_AGENT VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: DISPOSITION VARCHAR(8000) NULL
		($27)::varchar, 	-- $27: DNIS VARCHAR(8000) NULL
		($28)::int, 	-- $28: DNIS_AREA_CODE INT NULL
		($29)::int, 	-- $29: DNIS_COUNTRY_CODE INT NULL
		($30)::varchar, 	-- $30: DNIS_STATE VARCHAR(8000) NULL
		($31)::int, 	-- $31: EXTENSION INT NULL
		($32)::time, 	-- $32: HANDLE_TIME TIME NULL
		($33)::int, 	-- $33: HOLDS INT NULL
		($34)::time, 	-- $34: HOLD_TIME TIME NULL
		($35)::boolean, 	-- $35: IS_COMPLETE BOOLEAN NULL
		($36)::varchar, 	-- $36: IVR_PATH VARCHAR(8000) NULL
		($37)::time, 	-- $37: IVR_TIME TIME NULL
		($38)::datetime, 	-- $38: LAST_MODIFIED datetime NULL
		($39)::varchar, 	-- $39: LIST_NAME VARCHAR(8000) NOT NULL
		($40)::time, 	-- $40: MANUAL_DIALING_TIME TIME NULL
		($41)::int, 	-- $41: MARKETING_SENT_KEY INT NULL
		($42)::varchar, 	-- $42: NOTES VARCHAR(8000) NULL
		($43)::int, 	-- $43: PARKS INT NULL
		($44)::time, 	-- $44: PARK_TIME TIME NULL
		($45)::time, 	-- $45: PREVIEW_TIME TIME NULL
		($46)::int, 	-- $46: PRIORITY INT NULL
		($47)::time, 	-- $47: QUEUE_WAIT_TIME TIME NULL
		($48)::decimal, 	-- $48: RATE DECIMAL(38,0) NULL
		($49)::varchar, 	-- $49: RESULT VARCHAR(8000) NOT NULL
		($50)::time, 	-- $50: RING_TIME TIME NULL
		($51)::int, 	-- $51: RISREPT_KEY INT NULL
		($52)::int, 	-- $52: SERVICE_LEVEL INT NULL
		($53)::varchar, 	-- $53: SESSION_ID VARCHAR(8000) NULL
		($54)::varchar, 	-- $54: SKILL VARCHAR(8000) NULL
		($55)::time, 	-- $55: SPEED_OF_ANSWER TIME NULL
		($56)::time, 	-- $56: TALK_TIME TIME NULL
		($57)::time, 	-- $57: TALK_TIME_LESS_HOLD_AND_PARK TIME NULL
		($58)::char, 	-- $58: TELLER CHAR(8000) NULL
		($59)::time, 	-- $59: THIRD_PARTY_TALK_TIME TIME NULL
		($60)::datetime, 	-- $60: TIME_STAMP datetime NULL
		($61)::int, 	-- $61: TRANSFERS INT NULL
		($62)::int, 	-- $62: VISITOR_KEY INT NULL
		($63)::int, 	-- $63: WEB_CALL_QUEUE_KEY INT NULL
		($64)::int, 	-- $64: WEB_DIALER_RESULT_TYPE_KEY INT NULL
		($65)::int, 	-- $65: APPLICATION_KEY INT NULL
		($66)::int, 	-- $66: LOAN_KEY INT NULL
		($67)::int, 	-- $67: LOCATION INT NULL
		($68)::varchar, 	-- $68: MRKT_CAMPAIGN VARCHAR(8000) NULL
		($69)::int, 	-- $69: QUEUE_TYPE INT NULL
		($70)::varchar 	-- $70: NOBLE_HASH VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerCallResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerCallResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerCallResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerCallResult_HIST;
SELECT * FROM STG.WINCHK_WebDialerCallResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 1165: WebDialerCallResultNoble
COPY INTO ARES.STG.SRC_WebDialerCallResultNoble_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_CALL_RESULT_KEY INT NOT NULL
		($2)::int, 	-- $2: RECORD_ID INT NOT NULL
		($3)::int 	-- $3: ISDN_CAUSE_CODE INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerCallResultNoble/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerCallResultNoble_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerCallResultNoble_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerCallResultNoble_HIST;
SELECT * FROM STG.WINCHK_WebDialerCallResultNoble_HIST;
[STATUS=tbd]
*/

-- // TABLE 1166: WebDialerPhoneLine
COPY INTO ARES.STG.SRC_WebDialerPhoneLine_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_PHONE_LINE_KEY INT NOT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::int, 	-- $3: LINE_NO INT NOT NULL
		($4)::int, 	-- $4: COLOR_RGB INT NOT NULL
		($5)::boolean, 	-- $5: ENABLED BOOLEAN NOT NULL
		($6)::varchar 	-- $6: PHONE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerPhoneLine/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerPhoneLine_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerPhoneLine_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerPhoneLine_HIST;
SELECT * FROM STG.WINCHK_WebDialerPhoneLine_HIST;
[STATUS=tbd]
*/

-- // TABLE 1167: WebDialerResult
COPY INTO ARES.STG.SRC_WebDialerResult_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_RESULT_KEY INT NOT NULL
		($2)::varchar, 	-- $2: RESULT VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: LIST_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: PHONE_TYPE VARCHAR(8000) NOT NULL
		($5)::datetime, 	-- $5: DATE_ENTERED datetime NOT NULL
		($6)::int, 	-- $6: VISITOR_KEY INT NULL
		($7)::int, 	-- $7: WEB_CALL_QUEUE_KEY INT NULL
		($8)::char, 	-- $8: TELLER CHAR(8000) NULL
		($9)::varchar, 	-- $9: INCOMING_DID VARCHAR(8000) NULL
		($10)::datetime, 	-- $10: AUDIO_DROPPED_DATE datetime NULL
		($11)::datetime, 	-- $11: CALL_ENDED_DATE datetime NULL
		($12)::int, 	-- $12: WEB_DIALER_RESULT_TYPE_KEY INT NULL
		($13)::varchar, 	-- $13: ANI VARCHAR(8000) NULL
		($14)::int, 	-- $14: ANI_COUNTRY_CODE INT NULL
		($15)::time, 	-- $15: BILL_TIME TIME NULL
		($16)::varchar, 	-- $16: CALL_TYPE VARCHAR(8000) NULL
		($17)::int, 	-- $17: CALLS INT NULL
		($18)::varchar, 	-- $18: CAMPAIGN VARCHAR(8000) NULL
		($19)::varchar, 	-- $19: CATEGORY VARCHAR(8000) NULL
		($20)::varchar, 	-- $20: COMMENTS VARCHAR(8000) NULL
		($21)::boolean, 	-- $21: CONTACT BOOLEAN NULL
		($22)::decimal, 	-- $22: COST DECIMAL(38,0) NULL
		($23)::datetime, 	-- $23: CALL_DATE datetime NULL
		($24)::varchar, 	-- $24: DESTINATION_AGENT VARCHAR(8000) NULL
		($25)::varchar, 	-- $25: DISPOSITION VARCHAR(8000) NULL
		($26)::varchar, 	-- $26: DNIS VARCHAR(8000) NULL
		($27)::int, 	-- $27: DNIS_COUNTRY_CODE INT NULL
		($28)::boolean, 	-- $28: DROPPED BOOLEAN NULL
		($29)::time, 	-- $29: DURATION TIME NULL
		($30)::time, 	-- $30: HANDLE_TIME TIME NULL
		($31)::time, 	-- $31: HOLD_TIME TIME NULL
		($32)::varchar, 	-- $32: IVR_FLOW VARCHAR(8000) NULL
		($33)::time, 	-- $33: MANUAL_DIALING_TIME TIME NULL
		($34)::time, 	-- $34: PREVIEW_TIME TIME NULL
		($35)::int, 	-- $35: PRIORITY INT NULL
		($36)::time, 	-- $36: QUEUE_TIME TIME NULL
		($37)::decimal, 	-- $37: RATE DECIMAL(38,0) NULL
		($38)::int, 	-- $38: SERVICE_LEVEL INT NULL
		($39)::varchar, 	-- $39: SESSION_ID VARCHAR(8000) NULL
		($40)::varchar, 	-- $40: SKILL VARCHAR(8000) NULL
		($41)::time, 	-- $41: SPEED_OF_ANSWER TIME NULL
		($42)::time, 	-- $42: TALK_TIME TIME NULL
		($43)::datetime, 	-- $43: WORK_ITEM_DATE datetime NULL
		($44)::time, 	-- $44: THIRD_PARTY_TALK_TIME TIME NULL
		($45)::time, 	-- $45: WRAP_TIME TIME NULL
		($46)::boolean, 	-- $46: IS_COMPLETE BOOLEAN NULL
		($47)::varchar, 	-- $47: AGENT VARCHAR(8000) NULL
		($48)::varchar, 	-- $48: AGENT_EMAIL VARCHAR(8000) NULL
		($49)::int, 	-- $49: AGENT_EXTENSION INT NULL
		($50)::varchar, 	-- $50: AGENT_NAME VARCHAR(8000) NULL
		($51)::int, 	-- $51: ANI_AREA_CODE INT NULL
		($52)::varchar, 	-- $52: CITY VARCHAR(8000) NULL
		($53)::varchar, 	-- $53: COMPANY VARCHAR(8000) NULL
		($54)::varchar, 	-- $54: COUNTRY VARCHAR(8000) NULL
		($55)::varchar, 	-- $55: DEST_AGENT_EMAIL VARCHAR(8000) NULL
		($56)::int, 	-- $56: DEST_AGENT_EXTENSION INT NULL
		($57)::varchar, 	-- $57: DEST_AGENT_NAME VARCHAR(8000) NULL
		($58)::int, 	-- $58: DNIS_AREA_CODE INT NULL
		($59)::varchar, 	-- $59: FIRST_NAME VARCHAR(8000) NULL
		($60)::varchar, 	-- $60: LAST_NAME VARCHAR(8000) NULL
		($61)::varchar, 	-- $61: NUMBER1 VARCHAR(8000) NULL
		($62)::varchar, 	-- $62: NUMBER2 VARCHAR(8000) NULL
		($63)::varchar, 	-- $63: NUMBER3 VARCHAR(8000) NULL
		($64)::varchar, 	-- $64: CALLED_STATE VARCHAR(8000) NULL
		($65)::varchar, 	-- $65: STREET VARCHAR(8000) NULL
		($66)::time, 	-- $66: CALL_TIME TIME NULL
		($67)::datetime, 	-- $67: TIME_STAMP datetime NULL
		($68)::varchar, 	-- $68: ZIP VARCHAR(8000) NULL
		($69)::varchar 	-- $69: MARKETING_SENT_KEY VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerResult/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerResult_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerResult_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerResult_HIST;
SELECT * FROM STG.WINCHK_WebDialerResult_HIST;
[STATUS=tbd]
*/

-- // TABLE 1168: WebDialerResultType
COPY INTO ARES.STG.SRC_WebDialerResultType_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: IATResultTypeKey INT NULL
		($2)::varchar, 	-- $2: DESCRIPTION VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: DELETED BOOLEAN NOT NULL
		($4)::varchar, 	-- $4: FIVE_NINE_KEY VARCHAR(8000) NULL
		($5)::int, 	-- $5: WEB_CALL_CATRARR_ALIAS_KEY INT NULL
		($6)::boolean, 	-- $6: IS_SYSTEM_DISPOSITION BOOLEAN NULL
		($7)::int 	-- $7: WEB_DIALER_RESULT_TYPE_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerResultType/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerResultType_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerResultType_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerResultType_HIST;
SELECT * FROM STG.WINCHK_WebDialerResultType_HIST;
[STATUS=tbd]
*/

-- // TABLE 1169: WebDialerStatus
COPY INTO ARES.STG.SRC_WebDialerStatus_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_STATUS_KEY INT NOT NULL
		($2)::smallint, 	-- $2: STATUS smallint NOT NULL
		($3)::datetime 	-- $3: DATE_MODIFIED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerStatus/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerStatus_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerStatus_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerStatus_HIST;
SELECT * FROM STG.WINCHK_WebDialerStatus_HIST;
[STATUS=tbd]
*/

-- // TABLE 1170: WebDialerUploadHistory
COPY INTO ARES.STG.SRC_WebDialerUploadHistory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_UPLOAD_HISTORY_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_CALL_QUEUE_KEY INT NOT NULL
		($3)::datetime, 	-- $3: WORK_ITEM_DATE_ENTERED datetime NULL
		($4)::int, 	-- $4: PRIORITY INT NOT NULL
		($5)::varchar, 	-- $5: CATEGORY VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: FIRST_NAME VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: LAST_NAME VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: CELL_PHONE VARCHAR(8000) NULL
		($9)::varchar, 	-- $9: HOME_PHONE VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: WORK_PHONE VARCHAR(8000) NULL
		($11)::varchar, 	-- $11: UPLOAD_OPERATION VARCHAR(8000) NULL
		($12)::datetime 	-- $12: UPLOAD_DATE datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerUploadHistory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerUploadHistory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerUploadHistory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerUploadHistory_HIST;
SELECT * FROM STG.WINCHK_WebDialerUploadHistory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1171: WebDialerUser
COPY INTO ARES.STG.SRC_WebDialerUser_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_DIALER_USER_KEY INT NOT NULL
		($2)::char, 	-- $2: TELLER CHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: DIALER_USER_ID VARCHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_ACTIVE BOOLEAN NOT NULL
		($5)::datetime 	-- $5: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebDialerUser/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebDialerUser_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebDialerUser_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebDialerUser_HIST;
SELECT * FROM STG.WINCHK_WebDialerUser_HIST;
[STATUS=tbd]
*/

-- // TABLE 1172: WebLead
COPY INTO ARES.STG.SRC_WebLead_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Key INT NOT NULL
		($2)::int, 	-- $2: Web_Lead_Gen_Key INT NOT NULL
		($3)::int, 	-- $3: Loan_Application_Key INT NULL
		($4)::int, 	-- $4: Attributes INT NULL
		($5)::numeric, 	-- $5: Price NUMERIC NULL
		($6)::datetime, 	-- $6: Date_Entered datetime NOT NULL
		($7)::numeric, 	-- $7: MinPrice NUMERIC NULL
		($8)::int, 	-- $8: SubID INT NULL
		($9)::boolean, 	-- $9: Is_Store_Lead BOOLEAN NULL
		($10)::int, 	-- $10: Customer_Key INT NULL
		($11)::int, 	-- $11: Loan_Key INT NULL
		($12)::int 	-- $12: VISITOR_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLead/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLead_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLead_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLead_HIST;
SELECT * FROM STG.WINCHK_WebLead_HIST;
[STATUS=tbd]
*/

-- // TABLE 1173: WebLeadArchive
COPY INTO ARES.STG.SRC_WebLeadArchive_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Key INT NOT NULL
		($2)::int, 	-- $2: Web_Lead_Gen_Key INT NOT NULL
		($3)::int, 	-- $3: Loan_Application_Key INT NULL
		($4)::int, 	-- $4: Attributes INT NULL
		($5)::numeric, 	-- $5: Price NUMERIC NULL
		($6)::datetime, 	-- $6: Date_Entered datetime NOT NULL
		($7)::numeric, 	-- $7: MinPrice NUMERIC NULL
		($8)::int 	-- $8: SubID INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadArchive/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadArchive_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadArchive_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadArchive_HIST;
SELECT * FROM STG.WINCHK_WebLeadArchive_HIST;
[STATUS=tbd]
*/

-- // TABLE 1174: WebLeadBuyers
COPY INTO ARES.STG.SRC_WebLeadBuyers_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: lead_buyer_key INT NOT NULL
		($2)::int, 	-- $2: external_buyer_id INT NULL
		($3)::varchar, 	-- $3: buyer_name VARCHAR(8000) NULL
		($4)::int, 	-- $4: tier_amt INT NULL
		($5)::varchar 	-- $5: parent_buyer VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadBuyers/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadBuyers_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadBuyers_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadBuyers_HIST;
SELECT * FROM STG.WINCHK_WebLeadBuyers_HIST;
[STATUS=tbd]
*/

-- // TABLE 1175: WebLeadCallCampaignQueueXRef
COPY INTO ARES.STG.SRC_WebLeadCallCampaignQueueXRef_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_LEAD_CALL_CAMPAIGN_QUEUE_XREF_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_LEAD_KEY INT NOT NULL
		($3)::int, 	-- $3: CALL_CAMPAIGN_QUEUE_KEY INT NULL
		($4)::int 	-- $4: CALL_CAMPAIGN_QUEUE_ACTIVITY_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadCallCampaignQueueXRef/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadCallCampaignQueueXRef_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadCallCampaignQueueXRef_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadCallCampaignQueueXRef_HIST;
SELECT * FROM STG.WINCHK_WebLeadCallCampaignQueueXRef_HIST;
[STATUS=tbd]
*/

-- // TABLE 1176: WebLeadCriteria
COPY INTO ARES.STG.SRC_WebLeadCriteria_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_LEAD_CRITERIA_KEY INT NOT NULL
		($2)::varchar, 	-- $2: LEAD_TYPE VARCHAR(8000) NULL
		($3)::int, 	-- $3: PRIORITY INT NOT NULL
		($4)::int, 	-- $4: APPLICATION_STATUS INT NULL
		($5)::boolean, 	-- $5: EXISTING_CUSTOMER BOOLEAN NULL
		($6)::varchar, 	-- $6: STATE VARCHAR(8000) NULL
		($7)::boolean, 	-- $7: EXISTING_LOAN BOOLEAN NULL
		($8)::decimal, 	-- $8: MAXIMUM_RI_BALANCE DECIMAL(38,0) NULL
		($9)::decimal, 	-- $9: MINIMUM_AVAILABLE_CREDIT DECIMAL(38,0) NULL
		($10)::boolean, 	-- $10: ACCEPT_LEAD BOOLEAN NOT NULL
		($11)::boolean, 	-- $11: ADD_TO_CUSTOMER_LEAD BOOLEAN NOT NULL
		($12)::varchar, 	-- $12: URL VARCHAR(8000) NOT NULL
		($13)::boolean, 	-- $13: ALLOW_DENIED_APPLICATIONS BOOLEAN NULL
		($14)::boolean, 	-- $14: ALLOW_INCOMPLETE_APPLICATIONS BOOLEAN NULL
		($15)::int, 	-- $15: DUPLICATE_MAX_AGE_DAYS INT NOT NULL
		($16)::decimal, 	-- $16: MAXIMUM_LOAN_BALANCE DECIMAL(38,0) NULL
		($17)::varchar, 	-- $17: CAMPAIGN_ID VARCHAR(8000) NULL
		($18)::boolean, 	-- $18: IGNORE_INTERNAL_DUPLICATES BOOLEAN NOT NULL
		($19)::varchar 	-- $19: CROSS_CHECK_URL VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadCriteria/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadCriteria_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadCriteria_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadCriteria_HIST;
SELECT * FROM STG.WINCHK_WebLeadCriteria_HIST;
[STATUS=tbd]
*/

-- // TABLE 1177: WebLeadCriteriaAuditCategory
COPY INTO ARES.STG.SRC_WebLeadCriteriaAuditCategory_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_LEAD_CRITERIA_AUDIT_CATEGORY_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_LEAD_CRITERIA_KEY INT NOT NULL
		($3)::varchar 	-- $3: AUDIT_CATEGORY VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadCriteriaAuditCategory/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadCriteriaAuditCategory_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadCriteriaAuditCategory_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadCriteriaAuditCategory_HIST;
SELECT * FROM STG.WINCHK_WebLeadCriteriaAuditCategory_HIST;
[STATUS=tbd]
*/

-- // TABLE 1178: WebLeadGen
COPY INTO ARES.STG.SRC_WebLeadGen_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Gen_Key INT NOT NULL
		($2)::varchar, 	-- $2: Name VARCHAR(8000) NOT NULL
		($3)::datetime, 	-- $3: Date_Entered datetime NOT NULL
		($4)::datetime, 	-- $4: Date_Updated datetime NOT NULL
		($5)::boolean, 	-- $5: IS_ACTIVE BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: DISPLAY_NAME VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: SHOW_DENIAL_REASON BOOLEAN NOT NULL
		($8)::smallint 	-- $8: SSN_REQUIREMENT SMALLINT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadGen/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadGen_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadGen_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadGen_HIST;
SELECT * FROM STG.WINCHK_WebLeadGen_HIST;
[STATUS=tbd]
*/

-- // TABLE 1179: WebLeadGenTiers
COPY INTO ARES.STG.SRC_WebLeadGenTiers_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Gen_Key INT NOT NULL
		($2)::int, 	-- $2: Score INT NOT NULL
		($3)::numeric, 	-- $3: Price NUMERIC NULL
		($4)::int 	-- $4: WEB_LEAD_GEN_TIERS_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadGenTiers/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadGenTiers_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadGenTiers_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadGenTiers_HIST;
SELECT * FROM STG.WINCHK_WebLeadGenTiers_HIST;
[STATUS=tbd]
*/

-- // TABLE 1180: WebLeadPostData
COPY INTO ARES.STG.SRC_WebLeadPostData_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Key INT NOT NULL
		($2)::varchar, 	-- $2: Form_Data VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Response_Data VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: Result VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: Info VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: Error VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: Url VARCHAR(8000) NULL
		($8)::numeric, 	-- $8: Price NUMERIC NULL
		($9)::int, 	-- $9: Web_Lead_Posted_Data_Key INT NOT NULL
		($10)::datetime, 	-- $10: Date_Entered datetime NULL
		($11)::smallint, 	-- $11: ProcessTime smallint NULL
		($12)::smallint, 	-- $12: SCORING_TIME smallint NULL
		($13)::varchar, 	-- $13: APP_SERVER_NAME VARCHAR(8000) NULL
		($14)::varchar, 	-- $14: EMAIL VARCHAR(8000) NULL
		($15)::char, 	-- $15: SSN CHAR(8000) NULL
		($16)::varchar 	-- $16: CAMPAIGN_ID VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadPostData/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadPostData_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadPostData_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadPostData_HIST;
SELECT * FROM STG.WINCHK_WebLeadPostData_HIST;
[STATUS=tbd]
*/

-- // TABLE 1181: WebLeadPostDataArchive
COPY INTO ARES.STG.SRC_WebLeadPostDataArchive_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: Web_Lead_Key INT NOT NULL
		($2)::varchar, 	-- $2: Form_Data VARCHAR(8000) NOT NULL
		($3)::varchar, 	-- $3: Response_Data VARCHAR(8000) NULL
		($4)::varchar, 	-- $4: Result VARCHAR(8000) NULL
		($5)::varchar, 	-- $5: Info VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: Error VARCHAR(8000) NULL
		($7)::varchar, 	-- $7: Url VARCHAR(8000) NULL
		($8)::numeric, 	-- $8: Price NUMERIC NULL
		($9)::int, 	-- $9: Web_Lead_Posted_Data_Key INT NOT NULL
		($10)::datetime, 	-- $10: Date_Entered datetime NULL
		($11)::smallint, 	-- $11: ProcessTime smallint NULL
		($12)::smallint, 	-- $12: SCORING_TIME smallint NULL
		($13)::varchar 	-- $13: APP_SERVER_NAME VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadPostDataArchive/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadPostDataArchive_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadPostDataArchive_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadPostDataArchive_HIST;
SELECT * FROM STG.WINCHK_WebLeadPostDataArchive_HIST;
[STATUS=tbd]
*/

-- // TABLE 1182: WebLeadPostDataValues
COPY INTO ARES.STG.SRC_WebLeadPostDataValues_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::bigint, 	-- $1: Web_Lead_Post_Data_Values_Key BIGINT NOT NULL
		($2)::int, 	-- $2: Web_Lead_Posted_Data_Key INT NOT NULL
		($3)::varchar, 	-- $3: Item_Key VARCHAR(8000) NOT NULL
		($4)::varchar 	-- $4: Item_Value VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadPostDataValues/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadPostDataValues_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadPostDataValues_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadPostDataValues_HIST;
SELECT * FROM STG.WINCHK_WebLeadPostDataValues_HIST;
[STATUS=tbd]
*/

-- // TABLE 1183: WebLeadSale
COPY INTO ARES.STG.SRC_WebLeadSale_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEBLEADSALE_KEY INT NOT NULL
		($2)::datetime, 	-- $2: DATE_ENTERED datetime NOT NULL
		($3)::int, 	-- $3: LOAN_APPLICATION_KEY INT NULL
		($4)::smallint, 	-- $4: STATUS SMALLINT NOT NULL
		($5)::int, 	-- $5: LEAD_ID INT NOT NULL
		($6)::int, 	-- $6: BUYER_ID INT NOT NULL
		($7)::varchar, 	-- $7: DELIVERY_URL VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: DELIVERY_MSG VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: ERROR VARCHAR(8000) NOT NULL
		($10)::datetime, 	-- $10: LAST_UPDATED_DATE datetime NULL
		($11)::number 	-- $11: PRICE NUMBER(10,4) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLeadSale/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLeadSale_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLeadSale_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLeadSale_HIST;
SELECT * FROM STG.WINCHK_WebLeadSale_HIST;
[STATUS=tbd]
*/

-- // TABLE 1184: WebLoanCreditFraud
COPY INTO ARES.STG.SRC_WebLoanCreditFraud_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_LOAN_CREDIT_FRAUD_KEY INT NOT NULL
		($2)::int, 	-- $2: CUSTOMER_KEY INT NOT NULL
		($3)::int, 	-- $3: TRANS_DETAIL_KEY INT NOT NULL
		($4)::smallint, 	-- $4: LOCATION smallint NOT NULL
		($5)::int, 	-- $5: LOAN_KEY INT NOT NULL
		($6)::varchar, 	-- $6: FRAUD_TYPE VARCHAR(8000) NOT NULL
		($7)::boolean, 	-- $7: IS_PROCESSED BOOLEAN NOT NULL
		($8)::datetime 	-- $8: DATE_ENTERED datetime NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebLoanCreditFraud/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebLoanCreditFraud_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebLoanCreditFraud_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebLoanCreditFraud_HIST;
SELECT * FROM STG.WINCHK_WebLoanCreditFraud_HIST;
[STATUS=tbd]
*/

-- // TABLE 1185: WebPixelVendor
COPY INTO ARES.STG.SRC_WebPixelVendor_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WPV_Key INT NOT NULL
		($2)::varchar, 	-- $2: VendorName VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: Enabled BOOLEAN NOT NULL
		($4)::varchar, 	-- $4: ClassName VARCHAR(8000) NOT NULL
		($5)::boolean, 	-- $5: UseNumericScore BOOLEAN NOT NULL
		($6)::varchar, 	-- $6: NumericPassScore VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: NumericWarnScore VARCHAR(8000) NOT NULL
		($8)::varchar, 	-- $8: NumericFailScore VARCHAR(8000) NOT NULL
		($9)::boolean, 	-- $9: AlphaPassOnUnknown BOOLEAN NOT NULL
		($10)::varchar, 	-- $10: AlphaPassScore VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: AlphaWarnScore VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: AlphaFailScore VARCHAR(8000) NOT NULL
		($13)::varchar 	-- $13: PROXY VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebPixelVendor/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebPixelVendor_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebPixelVendor_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebPixelVendor_HIST;
SELECT * FROM STG.WINCHK_WebPixelVendor_HIST;
[STATUS=tbd]
*/

-- // TABLE 1186: WebPixelVendorData
COPY INTO ARES.STG.SRC_WebPixelVendorData_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_PIXEL_VENDOR_DATA_KEY INT NOT NULL
		($2)::int, 	-- $2: LOAN_APPLICATION_KEY INT NULL
		to_timestamp_ntz($3), 	-- $3: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($4)::varchar, 	-- $4: IP_ADDRESS VARCHAR(8000) NOT NULL
		($5)::int, 	-- $5: WEB_PIXEL_VENDOR_KEY INT NOT NULL
		($6)::smallint, 	-- $6: MILLISECONDS_FOR_RESPONSE smallint NULL
		($7)::varchar, 	-- $7: PASS_WARN_FAIL VARCHAR(8000) NOT NULL
		($8)::xml, 	-- $8: RAW_RESPONSE xml NULL
		($9)::varchar, 	-- $9: DEVICE_ALIAS VARCHAR(8000) NOT NULL
		($10)::varchar, 	-- $10: VENDOR_RESPONSE_MESSAGE VARCHAR(8000) NULL
		($11)::smallint, 	-- $11: WEB_PIXEL_VENDOR_REASON_PULLED_KEY SMALLINT NOT NULL
		($12)::int 	-- $12: VISITOR_KEY INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebPixelVendorData/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebPixelVendorData_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebPixelVendorData_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebPixelVendorData_HIST;
SELECT * FROM STG.WINCHK_WebPixelVendorData_HIST;
[STATUS=tbd]
*/

-- // TABLE 1187: WebPixelVendorDetail
COPY INTO ARES.STG.SRC_WebPixelVendorDetail_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_PIXEL_VENDOR_DETAIL_KEY INT NOT NULL
		($2)::int, 	-- $2: WEB_PIXEL_VENDOR_KEY INT NOT NULL
		($3)::varchar, 	-- $3: RULE_SET_NAME VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: DESCRIPTION VARCHAR(8000) NOT NULL
		($5)::varchar, 	-- $5: TEST_URL VARCHAR(8000) NULL
		($6)::varchar, 	-- $6: PRODUCTION_URL VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: TEST_USER_ID VARCHAR(8000) NULL
		($8)::varchar, 	-- $8: PRODUCTION_USER_ID VARCHAR(8000) NOT NULL
		($9)::varchar, 	-- $9: TEST_PASSWORD VARCHAR(8000) NULL
		($10)::varchar, 	-- $10: PRODUCTION_PASSWORD VARCHAR(8000) NOT NULL
		($11)::varchar, 	-- $11: LICENSE_KEY VARCHAR(8000) NOT NULL
		($12)::varchar, 	-- $12: USER_KEY VARCHAR(8000) NOT NULL
		($13)::boolean, 	-- $13: IS_ENABLED BOOLEAN NOT NULL
		($14)::varchar, 	-- $14: DEVICE_ALIAS_EXPRESSION VARCHAR(8000) NULL
		($15)::varchar, 	-- $15: VENDOR_RESPONSE_MESSAGE_EXPRESSION VARCHAR(8000) NULL
		($16)::varchar 	-- $16: VENDOR_RESULT_MESSAGE_EXPRESSION VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebPixelVendorDetail/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebPixelVendorDetail_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebPixelVendorDetail_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebPixelVendorDetail_HIST;
SELECT * FROM STG.WINCHK_WebPixelVendorDetail_HIST;
[STATUS=tbd]
*/

-- // TABLE 1188: WebPixelVendorReasonPulled
COPY INTO ARES.STG.SRC_WebPixelVendorReasonPulled_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::smallint, 	-- $1: WEB_PIXEL_VENDOR_REASON_PULLED_KEY SMALLINT NOT NULL
		($2)::varchar 	-- $2: NAME VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebPixelVendorReasonPulled/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebPixelVendorReasonPulled_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebPixelVendorReasonPulled_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebPixelVendorReasonPulled_HIST;
SELECT * FROM STG.WINCHK_WebPixelVendorReasonPulled_HIST;
[STATUS=tbd]
*/

-- // TABLE 1189: WebReferralMethod
COPY INTO ARES.STG.SRC_WebReferralMethod_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WEB_REFERRAL_METHOD_KEY INT NOT NULL
		($2)::varchar, 	-- $2: NAME VARCHAR(8000) NOT NULL
		($3)::boolean, 	-- $3: IS_ACTIVE BOOLEAN NOT NULL
		($4)::int 	-- $4: SORT_ORDER INT NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WebReferralMethod/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WebReferralMethod_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WebReferralMethod_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WebReferralMethod_HIST;
SELECT * FROM STG.WINCHK_WebReferralMethod_HIST;
[STATUS=tbd]
*/

-- // TABLE 1190: WireTransferFileImport
COPY INTO ARES.STG.SRC_WireTransferFileImport_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WIRE_TRANSFER_FILE_IMPORT_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: IMPORT_DATE TIMESTAMP_LTZ NOT NULL
		($3)::varchar, 	-- $3: IMPORT_PROCESS VARCHAR(8000) NOT NULL
		($4)::varchar, 	-- $4: WIRE_TRANSFER_FILE_NAME VARCHAR(8000) NOT NULL
		($5)::int 	-- $5: RUN_MASTER_KEY INT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WireTransferFileImport/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WireTransferFileImport_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WireTransferFileImport_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WireTransferFileImport_HIST;
SELECT * FROM STG.WINCHK_WireTransferFileImport_HIST;
[STATUS=tbd]
*/

-- // TABLE 1191: WireTransferMatch
COPY INTO ARES.STG.SRC_WireTransferMatch_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WIRE_TRANSFER_MATCH_KEY INT NOT NULL
		to_timestamp_ntz($2), 	-- $2: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($3)::char, 	-- $3: ENTERED_BY CHAR(8000) NOT NULL
		($4)::boolean, 	-- $4: IS_MATCHED BOOLEAN NOT NULL
		($5)::int, 	-- $5: CUSTOMER_KEY INT NULL
		($6)::smallint, 	-- $6: LOCATION smallint NULL
		($7)::int, 	-- $7: TRANS_DETAIL_KEY INT NULL
		($8)::int, 	-- $8: SERVICE_TRANS_DETAIL_KEY INT NULL
		($9)::char, 	-- $9: UPDATED_BY CHAR(8000) NOT NULL
		to_timestamp_ntz($10), 	-- $10: UPDATED_DATE TIMESTAMP_LTZ NULL
		($11)::boolean, 	-- $11: MATCHED_BY_BATCH BOOLEAN NOT NULL
		($12)::varchar, 	-- $12: BATCH_NAME VARCHAR(8000) NOT NULL
		($13)::varchar, 	-- $13: WIRE_TRANSFER_RECEIPT VARCHAR(8000) NOT NULL
		to_timestamp_ntz($14), 	-- $14: TRANSACTION_DATE TIMESTAMP_LTZ NOT NULL
		($15)::number, 	-- $15: PRINCIPAL_AMOUNT NUMBER(10,4) NULL
		($16)::number, 	-- $16: FEE_AMOUNT NUMBER(10,4) NULL
		($17)::number, 	-- $17: COMMISSION_AMOUNT NUMBER(10,4) NULL
		($18)::number, 	-- $18: TOTAL_AMOUNT NUMBER(10,4) NULL
		($19)::boolean, 	-- $19: SENDER BOOLEAN NOT NULL
		($20)::boolean, 	-- $20: RECEIVER BOOLEAN NOT NULL
		($21)::varchar, 	-- $21: SENDER_FIRST_NAME VARCHAR(8000) NOT NULL
		($22)::varchar, 	-- $22: SENDER_LAST_NAME VARCHAR(8000) NOT NULL
		($23)::char, 	-- $23: SENDER_MIDDLE_INITIAL CHAR(8000) NOT NULL
		($24)::varchar, 	-- $24: SENDER_FULL_NAME VARCHAR(8000) NOT NULL
		($25)::varchar, 	-- $25: SENDER_STREET VARCHAR(8000) NOT NULL
		($26)::varchar, 	-- $26: SENDER_CITY VARCHAR(8000) NOT NULL
		($27)::char, 	-- $27: SENDER_STATE CHAR(8000) NOT NULL
		($28)::varchar, 	-- $28: SENDER_ZIP_CODE VARCHAR(8000) NOT NULL
		($29)::char, 	-- $29: SENDER_COUNTRY_CODE_2_CHAR CHAR(8000) NOT NULL
		($30)::char, 	-- $30: SENDER_COUNTRY_CODE_3_CHAR CHAR(8000) NOT NULL
		($31)::varchar, 	-- $31: SENDER_PHONE VARCHAR(8000) NOT NULL
		($32)::varchar, 	-- $32: SENDER_TAX_ID VARCHAR(8000) NOT NULL
		($33)::varchar, 	-- $33: SENDER_ID_TYPE VARCHAR(8000) NOT NULL
		($34)::varchar, 	-- $34: SENDER_ID_NUMBER VARCHAR(8000) NOT NULL
		($35)::varchar, 	-- $35: SENDER_ID_AUTHORITY VARCHAR(8000) NOT NULL
		($36)::varchar, 	-- $36: SENDER_DOB VARCHAR(8000) NOT NULL
		($37)::varchar, 	-- $37: RECEIVER_FIRST_NAME VARCHAR(8000) NOT NULL
		($38)::varchar, 	-- $38: RECEIVER_LAST_NAME VARCHAR(8000) NOT NULL
		($39)::char, 	-- $39: RECEIVER_MIDDLE_INITIAL CHAR(8000) NOT NULL
		($40)::varchar, 	-- $40: RECEIVER_FULL_NAME VARCHAR(8000) NOT NULL
		($41)::varchar, 	-- $41: RECEIVER_STREET VARCHAR(8000) NOT NULL
		($42)::varchar, 	-- $42: RECEIVER_CITY VARCHAR(8000) NOT NULL
		($43)::char, 	-- $43: RECEIVER_STATE CHAR(8000) NOT NULL
		($44)::varchar, 	-- $44: RECEIVER_ZIP_CODE VARCHAR(8000) NOT NULL
		($45)::char, 	-- $45: RECEIVER_COUNTRY_CODE_2_CHAR CHAR(8000) NOT NULL
		($46)::char, 	-- $46: RECEIVER_COUNTRY_CODE_3_CHAR CHAR(8000) NOT NULL
		($47)::varchar, 	-- $47: RECEIVER_PHONE VARCHAR(8000) NOT NULL
		($48)::varchar, 	-- $48: RECEIVER_TAX_ID VARCHAR(8000) NOT NULL
		($49)::varchar, 	-- $49: RECEIVER_ID_TYPE VARCHAR(8000) NOT NULL
		($50)::varchar, 	-- $50: RECEIVER_ID_NUMBER VARCHAR(8000) NOT NULL
		($51)::varchar, 	-- $51: RECEIVER_ID_AUTHORITY VARCHAR(8000) NOT NULL
		($52)::varchar, 	-- $52: RECEIVER_DOB VARCHAR(8000) NOT NULL
		($53)::int, 	-- $53: RUN_MASTER_KEY INT NULL
		($54)::varchar 	-- $54: AGENT_LOCATION VARCHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/WireTransferMatch/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WireTransferMatch_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WireTransferMatch_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WireTransferMatch_HIST;
SELECT * FROM STG.WINCHK_WireTransferMatch_HIST;
[STATUS=tbd]
*/

-- // TABLE 1192: WireTransferMatchEdit
COPY INTO ARES.STG.SRC_WireTransferMatchEdit_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::int, 	-- $1: WIRE_TRANSFER_MATCH_EDIT_KEY INT NOT NULL
		($2)::int, 	-- $2: WIRE_TRANSFER_MATCH_KEY INT NOT NULL
		($3)::smallint, 	-- $3: LOCATION smallint NOT NULL
		($4)::char, 	-- $4: TELLER CHAR(8000) NOT NULL
		to_timestamp_ntz($5), 	-- $5: DATE_ENTERED TIMESTAMP_LTZ NOT NULL
		($6)::varchar, 	-- $6: FIELD_NAME VARCHAR(8000) NOT NULL
		($7)::varchar, 	-- $7: OLD_VALUE VARCHAR(8000) NULL
		($8)::varchar 	-- $8: NEW_VALUE VARCHAR(8000) NULL
    FROM @ETL.INBOUND/SRC/Backfill/WireTransferMatchEdit/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*WireTransferMatchEdit_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_WireTransferMatchEdit_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_WireTransferMatchEdit_HIST;
SELECT * FROM STG.WINCHK_WireTransferMatchEdit_HIST;
[STATUS=tbd]
*/

-- // TABLE 1193: wucodes
COPY INTO ARES.STG.SRC_wucodes_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: RES_CODE VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: MEANING VARCHAR(8000) NULL
		($3)::boolean 	-- $3: GOOD BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/wucodes/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*wucodes_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_wucodes_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_wucodes_HIST;
SELECT * FROM STG.WINCHK_wucodes_HIST;
[STATUS=tbd]
*/

-- // TABLE 1194: wuprstat
COPY INTO ARES.STG.SRC_wuprstat_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: CODE VARCHAR(8000) NULL
		($2)::varchar, 	-- $2: MEANING VARCHAR(8000) NULL
		($3)::boolean 	-- $3: GOOD BOOLEAN NULL
    FROM @ETL.INBOUND/SRC/Backfill/wuprstat/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*wuprstat_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_wuprstat_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_wuprstat_HIST;
SELECT * FROM STG.WINCHK_wuprstat_HIST;
[STATUS=tbd]
*/

-- // TABLE 1195: ZipArea
COPY INTO ARES.STG.SRC_ZipArea_HIST FROM (
    SELECT 
        METADATA$FILENAME, CURRENT_TIMESTAMP(), to_date('2023-07-12'), 
        ($1)::varchar, 	-- $1: ZIPCODE VARCHAR(8000) NOT NULL
		($2)::char 	-- $2: AREA CHAR(8000) NOT NULL
    FROM @ETL.INBOUND/SRC/Backfill/ZipArea/
)
FILE_FORMAT = (
    FORMAT_NAME = ZEUS.STG.SRC_CSV_PIPE_SH1_EON_GZ
)
PATTERN = '.*ZipArea_Backfill.csv.gz*';
/*
USE ARES.;
SELECT ETL.COPYSELECT('STG','WINCHK_ZipArea_HIST',3);
SELECT COUNT(*) AS row_count FROM STG.WINCHK_ZipArea_HIST;
SELECT * FROM STG.WINCHK_ZipArea_HIST;
[STATUS=tbd]
*/
